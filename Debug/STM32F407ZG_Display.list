
STM32F407ZG_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e58  0800f880  0800f880  0001f880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146d8  080146d8  00030770  2**0
                  CONTENTS
  4 .ARM          00000008  080146d8  080146d8  000246d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080146e0  080146e0  00030770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146e0  080146e0  000246e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080146e4  080146e4  000246e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000770  20000000  080146e8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030770  2**0
                  CONTENTS
 10 .bss          000113d4  20000770  20000770  00030770  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  20011b44  20011b44  00030770  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000307a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004199a  00000000  00000000  000307e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005463  00000000  00000000  0007217d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ea0  00000000  00000000  000775e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002334  00000000  00000000  0007a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006732  00000000  00000000  0007c7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000243b3  00000000  00000000  00082ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e68b2  00000000  00000000  000a7299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000dd84  00000000  00000000  0018db4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0019b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000770 	.word	0x20000770
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f868 	.word	0x0800f868

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000774 	.word	0x20000774
 80001cc:	0800f868 	.word	0x0800f868

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <Level1Item2_Enter>:
void buttonListenFunction(void *argument);

/* USER CODE BEGIN PFP */

// Example menu item specific enter callback function, run when the associated menu item is entered.
static void Level1Item2_Enter(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 8000f48:	490a      	ldr	r1, [pc, #40]	; (8000f74 <Level1Item2_Enter+0x30>)
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <Level1Item2_Enter+0x34>)
 8000f4c:	f004 f8cc 	bl	80050e8 <u8g2_SetFont>
	u8g2_FirstPage(&u8g2);
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <Level1Item2_Enter+0x34>)
 8000f52:	f003 f9a4 	bl	800429e <u8g2_FirstPage>
	do {
		u8g2_DrawStr(&u8g2, 0, 15, "ENTER");
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <Level1Item2_Enter+0x38>)
 8000f58:	220f      	movs	r2, #15
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <Level1Item2_Enter+0x34>)
 8000f5e:	f004 f807 	bl	8004f70 <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <Level1Item2_Enter+0x34>)
 8000f64:	f003 f9af 	bl	80042c6 <u8g2_NextPage>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f3      	bne.n	8000f56 <Level1Item2_Enter+0x12>
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	080132a4 	.word	0x080132a4
 8000f78:	20000d1c 	.word	0x20000d1c
 8000f7c:	0800f8a0 	.word	0x0800f8a0

08000f80 <Item_Select_Callback>:

// Example menu item specific select callback function, run when the associated menu item is selected.
static void Item_Select_Callback(uint8_t x, uint8_t y) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	460a      	mov	r2, r1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
	u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 8000f90:	490a      	ldr	r1, [pc, #40]	; (8000fbc <Item_Select_Callback+0x3c>)
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <Item_Select_Callback+0x40>)
 8000f94:	f004 f8a8 	bl	80050e8 <u8g2_SetFont>
	u8g2_SetDrawColor(&u8g2, 1);	// change color of text (inverse)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <Item_Select_Callback+0x40>)
 8000f9c:	f004 fa15 	bl	80053ca <u8g2_SetDrawColor>
	u8g2_DrawRBox(&u8g2, x, y, 100, 20, 8);	// draw frame
 8000fa0:	79ba      	ldrb	r2, [r7, #6]
 8000fa2:	79f9      	ldrb	r1, [r7, #7]
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	2314      	movs	r3, #20
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <Item_Select_Callback+0x40>)
 8000fb0:	f003 f82c 	bl	800400c <u8g2_DrawRBox>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	080132a4 	.word	0x080132a4
 8000fc0:	20000d1c 	.word	0x20000d1c

08000fc4 <u8g2_DrawDLine>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////D

// DRAW DOTTED LINE
void u8g2_DrawDLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2, u8g2_int_t d) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	4608      	mov	r0, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	70fb      	strb	r3, [r7, #3]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70bb      	strb	r3, [r7, #2]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	707b      	strb	r3, [r7, #1]
	u8g2_uint_t tmp;
	u8g2_uint_t x,y;
	u8g2_uint_t dx, dy;
	u8g2_int_t err;
	u8g2_int_t ystep;
	uint8_t swapxy = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	727b      	strb	r3, [r7, #9]
	/* no intersection check at the moment, should be added... */
	if (x1>x2) dx=x1-x2; else dx=x2-x1;
 8000fe2:	78fa      	ldrb	r2, [r7, #3]
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d904      	bls.n	8000ff4 <u8g2_DrawDLine+0x30>
 8000fea:	78fa      	ldrb	r2, [r7, #3]
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	737b      	strb	r3, [r7, #13]
 8000ff2:	e003      	b.n	8000ffc <u8g2_DrawDLine+0x38>
 8000ff4:	787a      	ldrb	r2, [r7, #1]
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	737b      	strb	r3, [r7, #13]
	if (y1>y2) dy=y1-y2; else dy=y2-y1;
 8000ffc:	78ba      	ldrb	r2, [r7, #2]
 8000ffe:	7e3b      	ldrb	r3, [r7, #24]
 8001000:	429a      	cmp	r2, r3
 8001002:	d904      	bls.n	800100e <u8g2_DrawDLine+0x4a>
 8001004:	78ba      	ldrb	r2, [r7, #2]
 8001006:	7e3b      	ldrb	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	733b      	strb	r3, [r7, #12]
 800100c:	e003      	b.n	8001016 <u8g2_DrawDLine+0x52>
 800100e:	7e3a      	ldrb	r2, [r7, #24]
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	733b      	strb	r3, [r7, #12]
	if (dy>dx) {
 8001016:	7b3a      	ldrb	r2, [r7, #12]
 8001018:	7b7b      	ldrb	r3, [r7, #13]
 800101a:	429a      	cmp	r2, r3
 800101c:	d913      	bls.n	8001046 <u8g2_DrawDLine+0x82>
		swapxy = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	727b      	strb	r3, [r7, #9]
		tmp=dx; dx=dy; dy=tmp;
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	723b      	strb	r3, [r7, #8]
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	737b      	strb	r3, [r7, #13]
 800102a:	7a3b      	ldrb	r3, [r7, #8]
 800102c:	733b      	strb	r3, [r7, #12]
		tmp=x1; x1=y1; y1=tmp;
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	723b      	strb	r3, [r7, #8]
 8001032:	78bb      	ldrb	r3, [r7, #2]
 8001034:	70fb      	strb	r3, [r7, #3]
 8001036:	7a3b      	ldrb	r3, [r7, #8]
 8001038:	70bb      	strb	r3, [r7, #2]
		tmp=x2; x2=y2; y2=tmp;
 800103a:	787b      	ldrb	r3, [r7, #1]
 800103c:	723b      	strb	r3, [r7, #8]
 800103e:	7e3b      	ldrb	r3, [r7, #24]
 8001040:	707b      	strb	r3, [r7, #1]
 8001042:	7a3b      	ldrb	r3, [r7, #8]
 8001044:	763b      	strb	r3, [r7, #24]
	}
	if (x1>x2) tmp=x1, x1=x2, x2=tmp, tmp=y1, y1=y2, y2=tmp;
 8001046:	78fa      	ldrb	r2, [r7, #3]
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	429a      	cmp	r2, r3
 800104c:	d90b      	bls.n	8001066 <u8g2_DrawDLine+0xa2>
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	723b      	strb	r3, [r7, #8]
 8001052:	787b      	ldrb	r3, [r7, #1]
 8001054:	70fb      	strb	r3, [r7, #3]
 8001056:	7a3b      	ldrb	r3, [r7, #8]
 8001058:	707b      	strb	r3, [r7, #1]
 800105a:	78bb      	ldrb	r3, [r7, #2]
 800105c:	723b      	strb	r3, [r7, #8]
 800105e:	7e3b      	ldrb	r3, [r7, #24]
 8001060:	70bb      	strb	r3, [r7, #2]
 8001062:	7a3b      	ldrb	r3, [r7, #8]
 8001064:	763b      	strb	r3, [r7, #24]
	err = dx >> 1;
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	085b      	lsrs	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	72fb      	strb	r3, [r7, #11]
	if (y2>y1) ystep = 1; else ystep = -1, y = y1;
 800106e:	7e3a      	ldrb	r2, [r7, #24]
 8001070:	78bb      	ldrb	r3, [r7, #2]
 8001072:	429a      	cmp	r2, r3
 8001074:	d902      	bls.n	800107c <u8g2_DrawDLine+0xb8>
 8001076:	2301      	movs	r3, #1
 8001078:	72bb      	strb	r3, [r7, #10]
 800107a:	e003      	b.n	8001084 <u8g2_DrawDLine+0xc0>
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	72bb      	strb	r3, [r7, #10]
 8001080:	78bb      	ldrb	r3, [r7, #2]
 8001082:	73bb      	strb	r3, [r7, #14]
	#ifndef  U8G2_16BIT
		if (x2 == 255) x2--;
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d102      	bne.n	8001090 <u8g2_DrawDLine+0xcc>
 800108a:	787b      	ldrb	r3, [r7, #1]
 800108c:	3b01      	subs	r3, #1
 800108e:	707b      	strb	r3, [r7, #1]
	#else
		if (x2 == 0xffff) x2--;
	#endif
	for(x=x1; x<=x2; x++) {
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e0a0      	b.n	80011d8 <u8g2_DrawDLine+0x214>
		if (swapxy == 0) {
 8001096:	7a7b      	ldrb	r3, [r7, #9]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d144      	bne.n	8001126 <u8g2_DrawDLine+0x162>
			if(d==0) {
 800109c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d106      	bne.n	80010b2 <u8g2_DrawDLine+0xee>
				u8g2_DrawPixel(u8g2, x, y); /* solid line */
 80010a4:	7bba      	ldrb	r2, [r7, #14]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4619      	mov	r1, r3
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f004 f95a 	bl	8005364 <u8g2_DrawPixel>
 80010b0:	e07d      	b.n	80011ae <u8g2_DrawDLine+0x1ea>
			} else if(d==1){
 80010b2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d10c      	bne.n	80010d4 <u8g2_DrawDLine+0x110>
				if(x%2==0) u8g2_DrawPixel(u8g2, x, y); /* dotted line */
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d173      	bne.n	80011ae <u8g2_DrawDLine+0x1ea>
 80010c6:	7bba      	ldrb	r2, [r7, #14]
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f004 f949 	bl	8005364 <u8g2_DrawPixel>
 80010d2:	e06c      	b.n	80011ae <u8g2_DrawDLine+0x1ea>
			} else if(d>1){
 80010d4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	dd0f      	ble.n	80010fc <u8g2_DrawDLine+0x138>
				if((x/d)%2==0) u8g2_DrawPixel(u8g2, x, y); /* dashed line */
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80010e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d15f      	bne.n	80011ae <u8g2_DrawDLine+0x1ea>
 80010ee:	7bba      	ldrb	r2, [r7, #14]
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f004 f935 	bl	8005364 <u8g2_DrawPixel>
 80010fa:	e058      	b.n	80011ae <u8g2_DrawDLine+0x1ea>
			} else if(d<0){
 80010fc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da54      	bge.n	80011ae <u8g2_DrawDLine+0x1ea>
				if((x/-d)%2!=0) u8g2_DrawPixel(u8g2, x, y); /* dashed line inverted */
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800110a:	425b      	negs	r3, r3
 800110c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d04a      	beq.n	80011ae <u8g2_DrawDLine+0x1ea>
 8001118:	7bba      	ldrb	r2, [r7, #14]
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f004 f920 	bl	8005364 <u8g2_DrawPixel>
 8001124:	e043      	b.n	80011ae <u8g2_DrawDLine+0x1ea>
			}
		} else {
			if(d==0) {
 8001126:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <u8g2_DrawDLine+0x178>
				u8g2_DrawPixel(u8g2, y, x); /* solid line */
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f004 f915 	bl	8005364 <u8g2_DrawPixel>
 800113a:	e038      	b.n	80011ae <u8g2_DrawDLine+0x1ea>
			} else if(d==1){
 800113c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d10c      	bne.n	800115e <u8g2_DrawDLine+0x19a>
				if(x%2==0) u8g2_DrawPixel(u8g2, y, x); /* dotted line */
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d12e      	bne.n	80011ae <u8g2_DrawDLine+0x1ea>
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	7bbb      	ldrb	r3, [r7, #14]
 8001154:	4619      	mov	r1, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f004 f904 	bl	8005364 <u8g2_DrawPixel>
 800115c:	e027      	b.n	80011ae <u8g2_DrawDLine+0x1ea>
			} else if(d>1){
 800115e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001162:	2b01      	cmp	r3, #1
 8001164:	dd0f      	ble.n	8001186 <u8g2_DrawDLine+0x1c2>
				if((x/d)%2==0) u8g2_DrawPixel(u8g2, y, x); /* dashed line */
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800116c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d11a      	bne.n	80011ae <u8g2_DrawDLine+0x1ea>
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	4619      	mov	r1, r3
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f004 f8f0 	bl	8005364 <u8g2_DrawPixel>
 8001184:	e013      	b.n	80011ae <u8g2_DrawDLine+0x1ea>
			} else if(d<0){
 8001186:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	da0f      	bge.n	80011ae <u8g2_DrawDLine+0x1ea>
				if((x/-d)%2!=0) u8g2_DrawPixel(u8g2, y, x); /* dashed line inverted */
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001194:	425b      	negs	r3, r3
 8001196:	fb92 f3f3 	sdiv	r3, r2, r3
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <u8g2_DrawDLine+0x1ea>
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f004 f8db 	bl	8005364 <u8g2_DrawPixel>
			}
		}
		err -= (uint8_t)dy;
 80011ae:	7afa      	ldrb	r2, [r7, #11]
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	72fb      	strb	r3, [r7, #11]
		if (err<0) y += (u8g2_uint_t)ystep, err += (u8g2_uint_t)dx;
 80011b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da08      	bge.n	80011d2 <u8g2_DrawDLine+0x20e>
 80011c0:	7aba      	ldrb	r2, [r7, #10]
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	4413      	add	r3, r2
 80011c6:	73bb      	strb	r3, [r7, #14]
 80011c8:	7afa      	ldrb	r2, [r7, #11]
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	4413      	add	r3, r2
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	72fb      	strb	r3, [r7, #11]
	for(x=x1; x<=x2; x++) {
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	3301      	adds	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	787b      	ldrb	r3, [r7, #1]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f67f af5a 	bls.w	8001096 <u8g2_DrawDLine+0xd2>
	}
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	0000      	movs	r0, r0
	...

080011f0 <DrawGraphChangingLength>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// DRAW GRAPH FOR CHANGING LENGTH POINT IN MENU (2ND)
uint64_t used_difference_ = 0;
uint8_t already_used_ = 0;
static void DrawGraphChangingLength(void) {
 80011f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f4:	b096      	sub	sp, #88	; 0x58
 80011f6:	af02      	add	r7, sp, #8
	u8g2_SetDrawColor(&u8g2, 1);
 80011f8:	2101      	movs	r1, #1
 80011fa:	4883      	ldr	r0, [pc, #524]	; (8001408 <DrawGraphChangingLength+0x218>)
 80011fc:	f004 f8e5 	bl	80053ca <u8g2_SetDrawColor>
	//u8g2_SetBitmapMode(&u8g2, 1);
	u8g2_FirstPage(&u8g2);
 8001200:	4881      	ldr	r0, [pc, #516]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001202:	f003 f84c 	bl	800429e <u8g2_FirstPage>
	do {
		u8g2_DrawFrame(&u8g2, 10, 4, 220, 120); // x, y, w, h
 8001206:	2378      	movs	r3, #120	; 0x78
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	23dc      	movs	r3, #220	; 0xdc
 800120c:	2204      	movs	r2, #4
 800120e:	210a      	movs	r1, #10
 8001210:	487d      	ldr	r0, [pc, #500]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001212:	f002 fea7 	bl	8003f64 <u8g2_DrawFrame>
		u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8001216:	497d      	ldr	r1, [pc, #500]	; (800140c <DrawGraphChangingLength+0x21c>)
 8001218:	487b      	ldr	r0, [pc, #492]	; (8001408 <DrawGraphChangingLength+0x218>)
 800121a:	f003 ff65 	bl	80050e8 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 115, 30, "?");
 800121e:	4b7c      	ldr	r3, [pc, #496]	; (8001410 <DrawGraphChangingLength+0x220>)
 8001220:	221e      	movs	r2, #30
 8001222:	2173      	movs	r1, #115	; 0x73
 8001224:	4878      	ldr	r0, [pc, #480]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001226:	f003 fea3 	bl	8004f70 <u8g2_DrawStr>
		// draw unicode symbols
		// horizontal lines:
		u8g2_DrawDLine(&u8g2, 10, 40, 229, 40, 1); // x1, y1, x2, y2
 800122a:	2301      	movs	r3, #1
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2328      	movs	r3, #40	; 0x28
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	23e5      	movs	r3, #229	; 0xe5
 8001234:	2228      	movs	r2, #40	; 0x28
 8001236:	210a      	movs	r1, #10
 8001238:	4873      	ldr	r0, [pc, #460]	; (8001408 <DrawGraphChangingLength+0x218>)
 800123a:	f7ff fec3 	bl	8000fc4 <u8g2_DrawDLine>
		u8g2_DrawDLine(&u8g2, 10, 110, 229, 110, 1); // x1, y1, x2, y2
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	236e      	movs	r3, #110	; 0x6e
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	23e5      	movs	r3, #229	; 0xe5
 8001248:	226e      	movs	r2, #110	; 0x6e
 800124a:	210a      	movs	r1, #10
 800124c:	486e      	ldr	r0, [pc, #440]	; (8001408 <DrawGraphChangingLength+0x218>)
 800124e:	f7ff feb9 	bl	8000fc4 <u8g2_DrawDLine>
		// vertical lines:
		u8g2_DrawDLine(&u8g2, 78, 4, 78, 40, 1); // x1, y1, x2, y2
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	2328      	movs	r3, #40	; 0x28
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	234e      	movs	r3, #78	; 0x4e
 800125c:	2204      	movs	r2, #4
 800125e:	214e      	movs	r1, #78	; 0x4e
 8001260:	4869      	ldr	r0, [pc, #420]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001262:	f7ff feaf 	bl	8000fc4 <u8g2_DrawDLine>
		u8g2_DrawDLine(&u8g2, 162, 4, 162, 40, 1); // x1, y1, x2, y2
 8001266:	2301      	movs	r3, #1
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2328      	movs	r3, #40	; 0x28
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	23a2      	movs	r3, #162	; 0xa2
 8001270:	2204      	movs	r2, #4
 8001272:	21a2      	movs	r1, #162	; 0xa2
 8001274:	4864      	ldr	r0, [pc, #400]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001276:	f7ff fea5 	bl	8000fc4 <u8g2_DrawDLine>
		if (!already_used_) {
 800127a:	4b66      	ldr	r3, [pc, #408]	; (8001414 <DrawGraphChangingLength+0x224>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d131      	bne.n	80012e6 <DrawGraphChangingLength+0xf6>
			used_difference_ = 0;
 8001282:	4965      	ldr	r1, [pc, #404]	; (8001418 <DrawGraphChangingLength+0x228>)
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 230; i <= 240; ++i) {
 8001290:	23e6      	movs	r3, #230	; 0xe6
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001294:	e013      	b.n	80012be <DrawGraphChangingLength+0xce>
				used_difference_ += line_points_y[i];
 8001296:	4a61      	ldr	r2, [pc, #388]	; (800141c <DrawGraphChangingLength+0x22c>)
 8001298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	17da      	asrs	r2, r3, #31
 80012a0:	461c      	mov	r4, r3
 80012a2:	4615      	mov	r5, r2
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <DrawGraphChangingLength+0x228>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	eb14 0802 	adds.w	r8, r4, r2
 80012ae:	eb45 0903 	adc.w	r9, r5, r3
 80012b2:	4b59      	ldr	r3, [pc, #356]	; (8001418 <DrawGraphChangingLength+0x228>)
 80012b4:	e9c3 8900 	strd	r8, r9, [r3]
			for (int i = 230; i <= 240; ++i) {
 80012b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ba:	3301      	adds	r3, #1
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c0:	2bf0      	cmp	r3, #240	; 0xf0
 80012c2:	dde8      	ble.n	8001296 <DrawGraphChangingLength+0xa6>
			}
			used_difference_ /= 11;
 80012c4:	4b54      	ldr	r3, [pc, #336]	; (8001418 <DrawGraphChangingLength+0x228>)
 80012c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ca:	f04f 020b 	mov.w	r2, #11
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	f7ff fcb9 	bl	8000c48 <__aeabi_uldivmod>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	494f      	ldr	r1, [pc, #316]	; (8001418 <DrawGraphChangingLength+0x228>)
 80012dc:	e9c1 2300 	strd	r2, r3, [r1]
			already_used_ = 1;
 80012e0:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <DrawGraphChangingLength+0x224>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
		}
		if (already_used_ && used_difference_) {
 80012e6:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <DrawGraphChangingLength+0x224>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <DrawGraphChangingLength+0x1ea>
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <DrawGraphChangingLength+0x228>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	d070      	beq.n	80013da <DrawGraphChangingLength+0x1ea>
			u8g2_DrawUTF8(&u8g2, 30, 30, "СЧ");
 80012f8:	4b49      	ldr	r3, [pc, #292]	; (8001420 <DrawGraphChangingLength+0x230>)
 80012fa:	221e      	movs	r2, #30
 80012fc:	211e      	movs	r1, #30
 80012fe:	4842      	ldr	r0, [pc, #264]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001300:	f003 fe50 	bl	8004fa4 <u8g2_DrawUTF8>
			u8g2_DrawUTF8(&u8g2, 190, 30, "ВЧ");
 8001304:	4b47      	ldr	r3, [pc, #284]	; (8001424 <DrawGraphChangingLength+0x234>)
 8001306:	221e      	movs	r2, #30
 8001308:	21be      	movs	r1, #190	; 0xbe
 800130a:	483f      	ldr	r0, [pc, #252]	; (8001408 <DrawGraphChangingLength+0x218>)
 800130c:	f003 fe4a 	bl	8004fa4 <u8g2_DrawUTF8>
			u8g2_DrawStr(&u8g2, 85, 80, " > L > ");
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <DrawGraphChangingLength+0x238>)
 8001312:	2250      	movs	r2, #80	; 0x50
 8001314:	2155      	movs	r1, #85	; 0x55
 8001316:	483c      	ldr	r0, [pc, #240]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001318:	f003 fe2a 	bl	8004f70 <u8g2_DrawStr>
			u8g2_DrawUTF8(&u8g2, 35, 95, "мм");
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <DrawGraphChangingLength+0x23c>)
 800131e:	225f      	movs	r2, #95	; 0x5f
 8001320:	2123      	movs	r1, #35	; 0x23
 8001322:	4839      	ldr	r0, [pc, #228]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001324:	f003 fe3e 	bl	8004fa4 <u8g2_DrawUTF8>
			u8g2_DrawUTF8(&u8g2, 185, 95, "мм");
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <DrawGraphChangingLength+0x23c>)
 800132a:	225f      	movs	r2, #95	; 0x5f
 800132c:	21b9      	movs	r1, #185	; 0xb9
 800132e:	4836      	ldr	r0, [pc, #216]	; (8001408 <DrawGraphChangingLength+0x218>)
 8001330:	f003 fe38 	bl	8004fa4 <u8g2_DrawUTF8>
			char mes1[25];
			char mes2[25];
			double ans1 = used_difference_*max_gs_speed;
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <DrawGraphChangingLength+0x228>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff f925 	bl	800058c <__aeabi_ul2d>
 8001342:	a32d      	add	r3, pc, #180	; (adr r3, 80013f8 <DrawGraphChangingLength+0x208>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f956 	bl	80005f8 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			double ans2 = used_difference_*min_hss_speed;
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <DrawGraphChangingLength+0x228>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff f915 	bl	800058c <__aeabi_ul2d>
 8001362:	a327      	add	r3, pc, #156	; (adr r3, 8001400 <DrawGraphChangingLength+0x210>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f946 	bl	80005f8 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			if (ans1 && ans2) {
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001380:	f7ff fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d124      	bne.n	80013d4 <DrawGraphChangingLength+0x1e4>
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001396:	f7ff fb97 	bl	8000ac8 <__aeabi_dcmpeq>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d119      	bne.n	80013d4 <DrawGraphChangingLength+0x1e4>
				sprintf(mes1, "%.2lf\n", ans1);
 80013a0:	f107 001c 	add.w	r0, r7, #28
 80013a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013a8:	4921      	ldr	r1, [pc, #132]	; (8001430 <DrawGraphChangingLength+0x240>)
 80013aa:	f00c f845 	bl	800d438 <siprintf>
				u8g2_DrawUTF8(&u8g2, 20, 80, mes1);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2250      	movs	r2, #80	; 0x50
 80013b4:	2114      	movs	r1, #20
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <DrawGraphChangingLength+0x218>)
 80013b8:	f003 fdf4 	bl	8004fa4 <u8g2_DrawUTF8>
				sprintf(mes2, "%.2lf\n", ans2);
 80013bc:	4638      	mov	r0, r7
 80013be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013c2:	491b      	ldr	r1, [pc, #108]	; (8001430 <DrawGraphChangingLength+0x240>)
 80013c4:	f00c f838 	bl	800d438 <siprintf>
				u8g2_DrawUTF8(&u8g2, 165, 80, mes2);
 80013c8:	463b      	mov	r3, r7
 80013ca:	2250      	movs	r2, #80	; 0x50
 80013cc:	21a5      	movs	r1, #165	; 0xa5
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <DrawGraphChangingLength+0x218>)
 80013d0:	f003 fde8 	bl	8004fa4 <u8g2_DrawUTF8>
			}
			already_used_ = 0;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <DrawGraphChangingLength+0x224>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
		}
	} while (u8g2_NextPage(&u8g2));
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <DrawGraphChangingLength+0x218>)
 80013dc:	f002 ff73 	bl	80042c6 <u8g2_NextPage>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f47f af0f 	bne.w	8001206 <DrawGraphChangingLength+0x16>
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3750      	adds	r7, #80	; 0x50
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013f4:	f3af 8000 	nop.w
 80013f8:	bc01a36e 	.word	0xbc01a36e
 80013fc:	3f741205 	.word	0x3f741205
 8001400:	020c49ba 	.word	0x020c49ba
 8001404:	3f76872b 	.word	0x3f76872b
 8001408:	20000d1c 	.word	0x20000d1c
 800140c:	0800fc6c 	.word	0x0800fc6c
 8001410:	0800f8a8 	.word	0x0800f8a8
 8001414:	20000db0 	.word	0x20000db0
 8001418:	20000da8 	.word	0x20000da8
 800141c:	20000958 	.word	0x20000958
 8001420:	0800f8ac 	.word	0x0800f8ac
 8001424:	0800f8b4 	.word	0x0800f8b4
 8001428:	0800f8bc 	.word	0x0800f8bc
 800142c:	0800f8c4 	.word	0x0800f8c4
 8001430:	0800f8cc 	.word	0x0800f8cc

08001434 <Generic_Write>:
MENU_ITEM(Menu_1_8, Menu_1_1, Menu_1_7, Menu_1, NULL_MENU, Item_Select_Callback, NULL, 125, 70, 110, 25, 0, current_messages[7]);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// FUNCTION FOR WRITE TEXT AND VALUES IN MENU ITEMS
static void Generic_Write(Menu_Item_t *currentMenuItem, Menu_Item_t *currentMenuLayerTopItem) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b0a4      	sub	sp, #144	; 0x90
 8001438:	af02      	add	r7, sp, #8
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	Menu_Item_t *bufptr = currentMenuLayerTopItem;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	u8g2_FirstPage(&u8g2);
 8001444:	48ab      	ldr	r0, [pc, #684]	; (80016f4 <Generic_Write+0x2c0>)
 8001446:	f002 ff2a 	bl	800429e <u8g2_FirstPage>
	do {
		u8g2_SetDrawColor(&u8g2, 1);	// inverse color
 800144a:	2101      	movs	r1, #1
 800144c:	48a9      	ldr	r0, [pc, #676]	; (80016f4 <Generic_Write+0x2c0>)
 800144e:	f003 ffbc 	bl	80053ca <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, currentMenuItem->xPos, currentMenuItem->yPos - 17, currentMenuItem->cursorWidth, currentMenuItem->cursorHeigth);	// select frame
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7e19      	ldrb	r1, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7e5b      	ldrb	r3, [r3, #25]
 800145a:	3b11      	subs	r3, #17
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7e98      	ldrb	r0, [r3, #26]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7edb      	ldrb	r3, [r3, #27]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	4603      	mov	r3, r0
 800146a:	48a2      	ldr	r0, [pc, #648]	; (80016f4 <Generic_Write+0x2c0>)
 800146c:	f002 fd44 	bl	8003ef8 <u8g2_DrawBox>
		u8g2_SetFont(&u8g2, u8g2_font_unifont_t_cyrillic);	// set cyrillic font
 8001470:	49a1      	ldr	r1, [pc, #644]	; (80016f8 <Generic_Write+0x2c4>)
 8001472:	48a0      	ldr	r0, [pc, #640]	; (80016f4 <Generic_Write+0x2c0>)
 8001474:	f003 fe38 	bl	80050e8 <u8g2_SetFont>
		do {
			// if have same coordinates
			if (bufptr->yPos == currentMenuItem->yPos && bufptr->xPos == currentMenuItem->xPos) {
 8001478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800147c:	7e5a      	ldrb	r2, [r3, #25]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7e5b      	ldrb	r3, [r3, #25]
 8001482:	429a      	cmp	r2, r3
 8001484:	d145      	bne.n	8001512 <Generic_Write+0xde>
 8001486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800148a:	7e1a      	ldrb	r2, [r3, #24]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7e1b      	ldrb	r3, [r3, #24]
 8001490:	429a      	cmp	r2, r3
 8001492:	d13e      	bne.n	8001512 <Generic_Write+0xde>
				u8g2_SetDrawColor(&u8g2, 0); // set ordinary text color
 8001494:	2100      	movs	r1, #0
 8001496:	4897      	ldr	r0, [pc, #604]	; (80016f4 <Generic_Write+0x2c0>)
 8001498:	f003 ff97 	bl	80053ca <u8g2_SetDrawColor>
				uint8_t stringInterval = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
				char str[100];
				strcpy(str, (bufptr->Text)); // copy text from buffer
 80014a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00c f957 	bl	800d762 <strcpy>
				const char s[2] = "-";
 80014b4:	232d      	movs	r3, #45	; 0x2d
 80014b6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				char *token;
				token = strtok(str, s);
 80014ba:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00c f823 	bl	800d510 <strtok>
 80014ca:	67f8      	str	r0, [r7, #124]	; 0x7c
				while (token != NULL) {
 80014cc:	e019      	b.n	8001502 <Generic_Write+0xce>
					u8g2_DrawUTF8(&u8g2, bufptr->xPos, bufptr->yPos + stringInterval, token);
 80014ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014d2:	7e19      	ldrb	r1, [r3, #24]
 80014d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014d8:	7e5a      	ldrb	r2, [r3, #25]
 80014da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014de:	4413      	add	r3, r2
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014e4:	4883      	ldr	r0, [pc, #524]	; (80016f4 <Generic_Write+0x2c0>)
 80014e6:	f003 fd5d 	bl	8004fa4 <u8g2_DrawUTF8>
					token = strtok(NULL, s);
 80014ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014ee:	4619      	mov	r1, r3
 80014f0:	2000      	movs	r0, #0
 80014f2:	f00c f80d 	bl	800d510 <strtok>
 80014f6:	67f8      	str	r0, [r7, #124]	; 0x7c
					stringInterval += 15;
 80014f8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014fc:	330f      	adds	r3, #15
 80014fe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
				while (token != NULL) {
 8001502:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e2      	bne.n	80014ce <Generic_Write+0x9a>
				}
				u8g2_SetDrawColor(&u8g2, 1);
 8001508:	2101      	movs	r1, #1
 800150a:	487a      	ldr	r0, [pc, #488]	; (80016f4 <Generic_Write+0x2c0>)
 800150c:	f003 ff5d 	bl	80053ca <u8g2_SetDrawColor>
			if (bufptr->yPos == currentMenuItem->yPos && bufptr->xPos == currentMenuItem->xPos) {
 8001510:	e039      	b.n	8001586 <Generic_Write+0x152>
			} else {
				u8g2_SetDrawColor(&u8g2, 1); // set inverse text color
 8001512:	2101      	movs	r1, #1
 8001514:	4877      	ldr	r0, [pc, #476]	; (80016f4 <Generic_Write+0x2c0>)
 8001516:	f003 ff58 	bl	80053ca <u8g2_SetDrawColor>
				uint8_t stringInterval = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				char str[100];
				strcpy(str, (bufptr->Text));
 8001520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f00c f918 	bl	800d762 <strcpy>
				const char s[2] = "-";
 8001532:	232d      	movs	r3, #45	; 0x2d
 8001534:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
				char *token;
				token = strtok(str, s);
 8001538:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f00b ffe4 	bl	800d510 <strtok>
 8001548:	6778      	str	r0, [r7, #116]	; 0x74
				while (token != NULL) {
 800154a:	e019      	b.n	8001580 <Generic_Write+0x14c>
					u8g2_DrawUTF8(&u8g2, bufptr->xPos, bufptr->yPos + stringInterval, token);
 800154c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001550:	7e19      	ldrb	r1, [r3, #24]
 8001552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001556:	7e5a      	ldrb	r2, [r3, #25]
 8001558:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001562:	4864      	ldr	r0, [pc, #400]	; (80016f4 <Generic_Write+0x2c0>)
 8001564:	f003 fd1e 	bl	8004fa4 <u8g2_DrawUTF8>
					token = strtok(NULL, s);
 8001568:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800156c:	4619      	mov	r1, r3
 800156e:	2000      	movs	r0, #0
 8001570:	f00b ffce 	bl	800d510 <strtok>
 8001574:	6778      	str	r0, [r7, #116]	; 0x74
					stringInterval += 15;
 8001576:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800157a:	330f      	adds	r3, #15
 800157c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				while (token != NULL) {
 8001580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1e2      	bne.n	800154c <Generic_Write+0x118>
				}
			}
			bufptr = bufptr->Next;
 8001586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			// IF FIRST MENU ITEM - DRAW UNDERLINE SYMBOLS
			if (Menu_GetCurrentMenu()->Parent == &Menu_1) {
 8001590:	f002 f8be 	bl	8003710 <Menu_GetCurrentMenu>
 8001594:	4603      	mov	r3, r0
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a58      	ldr	r2, [pc, #352]	; (80016fc <Generic_Write+0x2c8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	f040 815c 	bne.w	8001858 <Generic_Write+0x424>
				uint8_t index_ = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
				uint8_t row = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
				if (Menu_GetCurrentMenu() == &Menu_1_1) {
 80015ac:	f002 f8b0 	bl	8003710 <Menu_GetCurrentMenu>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a53      	ldr	r2, [pc, #332]	; (8001700 <Generic_Write+0x2cc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d106      	bne.n	80015c6 <Generic_Write+0x192>
					index_ = 0, row = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80015c4:	e059      	b.n	800167a <Generic_Write+0x246>
				} else if (Menu_GetCurrentMenu() == &Menu_1_2) {
 80015c6:	f002 f8a3 	bl	8003710 <Menu_GetCurrentMenu>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a4d      	ldr	r2, [pc, #308]	; (8001704 <Generic_Write+0x2d0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d106      	bne.n	80015e0 <Generic_Write+0x1ac>
					index_ = 1, row = 0;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80015de:	e04c      	b.n	800167a <Generic_Write+0x246>
				} else if (Menu_GetCurrentMenu() == &Menu_1_3) {
 80015e0:	f002 f896 	bl	8003710 <Menu_GetCurrentMenu>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a48      	ldr	r2, [pc, #288]	; (8001708 <Generic_Write+0x2d4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d106      	bne.n	80015fa <Generic_Write+0x1c6>
					index_ = 2, row = 0;
 80015ec:	2302      	movs	r3, #2
 80015ee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80015f8:	e03f      	b.n	800167a <Generic_Write+0x246>
				} else if (Menu_GetCurrentMenu() == &Menu_1_4) {
 80015fa:	f002 f889 	bl	8003710 <Menu_GetCurrentMenu>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a42      	ldr	r2, [pc, #264]	; (800170c <Generic_Write+0x2d8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d106      	bne.n	8001614 <Generic_Write+0x1e0>
					index_ = 3, row = 0;
 8001606:	2303      	movs	r3, #3
 8001608:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001612:	e032      	b.n	800167a <Generic_Write+0x246>
				} else if (Menu_GetCurrentMenu() == &Menu_1_5) {
 8001614:	f002 f87c 	bl	8003710 <Menu_GetCurrentMenu>
 8001618:	4603      	mov	r3, r0
 800161a:	4a3d      	ldr	r2, [pc, #244]	; (8001710 <Generic_Write+0x2dc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d106      	bne.n	800162e <Generic_Write+0x1fa>
					index_ = 4, row = 0;
 8001620:	2304      	movs	r3, #4
 8001622:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800162c:	e025      	b.n	800167a <Generic_Write+0x246>
				} else if (Menu_GetCurrentMenu() == &Menu_1_6) {
 800162e:	f002 f86f 	bl	8003710 <Menu_GetCurrentMenu>
 8001632:	4603      	mov	r3, r0
 8001634:	4a37      	ldr	r2, [pc, #220]	; (8001714 <Generic_Write+0x2e0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d106      	bne.n	8001648 <Generic_Write+0x214>
					index_ = 0, row = 1;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001640:	2301      	movs	r3, #1
 8001642:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001646:	e018      	b.n	800167a <Generic_Write+0x246>
				} else if (Menu_GetCurrentMenu() == &Menu_1_7) {
 8001648:	f002 f862 	bl	8003710 <Menu_GetCurrentMenu>
 800164c:	4603      	mov	r3, r0
 800164e:	4a32      	ldr	r2, [pc, #200]	; (8001718 <Generic_Write+0x2e4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d106      	bne.n	8001662 <Generic_Write+0x22e>
					index_ = 1, row = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800165a:	2301      	movs	r3, #1
 800165c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001660:	e00b      	b.n	800167a <Generic_Write+0x246>
				} else if (Menu_GetCurrentMenu() == &Menu_1_8) {
 8001662:	f002 f855 	bl	8003710 <Menu_GetCurrentMenu>
 8001666:	4603      	mov	r3, r0
 8001668:	4a2c      	ldr	r2, [pc, #176]	; (800171c <Generic_Write+0x2e8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d105      	bne.n	800167a <Generic_Write+0x246>
					index_ = 2, row = 1;
 800166e:	2302      	movs	r3, #2
 8001670:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001674:	2301      	movs	r3, #1
 8001676:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
				}
				u8g2_SetDrawColor(&u8g2, 0);
 800167a:	2100      	movs	r1, #0
 800167c:	481d      	ldr	r0, [pc, #116]	; (80016f4 <Generic_Write+0x2c0>)
 800167e:	f003 fea4 	bl	80053ca <u8g2_SetDrawColor>
				if (row == 0) {
 8001682:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001686:	2b00      	cmp	r3, #0
 8001688:	d17d      	bne.n	8001786 <Generic_Write+0x352>
					if (menu1position <= 2) {
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <Generic_Write+0x2ec>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b02      	cmp	r3, #2
 8001690:	dc48      	bgt.n	8001724 <Generic_Write+0x2f0>
						u8g2_DrawHLine(&u8g2, 37+8*menu1position, 21+25*index_, 8);
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <Generic_Write+0x2ec>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3325      	adds	r3, #37	; 0x25
 800169e:	b2d9      	uxtb	r1, r3
 80016a0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80016a4:	461a      	mov	r2, r3
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	461a      	mov	r2, r3
 80016ac:	0090      	lsls	r0, r2, #2
 80016ae:	461a      	mov	r2, r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	4413      	add	r3, r2
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3315      	adds	r3, #21
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	2308      	movs	r3, #8
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <Generic_Write+0x2c0>)
 80016be:	f003 fe1f 	bl	8005300 <u8g2_DrawHLine>
						u8g2_DrawHLine(&u8g2, 37+8*menu1position, 22+25*index_, 8);
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <Generic_Write+0x2ec>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3325      	adds	r3, #37	; 0x25
 80016ce:	b2d9      	uxtb	r1, r3
 80016d0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80016d4:	461a      	mov	r2, r3
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4413      	add	r3, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	0090      	lsls	r0, r2, #2
 80016de:	461a      	mov	r2, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3316      	adds	r3, #22
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	2308      	movs	r3, #8
 80016ec:	4801      	ldr	r0, [pc, #4]	; (80016f4 <Generic_Write+0x2c0>)
 80016ee:	f003 fe07 	bl	8005300 <u8g2_DrawHLine>
 80016f2:	e0b1      	b.n	8001858 <Generic_Write+0x424>
 80016f4:	20000d1c 	.word	0x20000d1c
 80016f8:	08011898 	.word	0x08011898
 80016fc:	0800faa4 	.word	0x0800faa4
 8001700:	0800fb10 	.word	0x0800fb10
 8001704:	0800fb34 	.word	0x0800fb34
 8001708:	0800fb58 	.word	0x0800fb58
 800170c:	0800fb7c 	.word	0x0800fb7c
 8001710:	0800fba0 	.word	0x0800fba0
 8001714:	0800fbc4 	.word	0x0800fbc4
 8001718:	0800fbe8 	.word	0x0800fbe8
 800171c:	0800fc0c 	.word	0x0800fc0c
 8001720:	20000950 	.word	0x20000950
					} else {
						u8g2_DrawHLine(&u8g2, 45+8*menu1position, 21+25*index_, 8);
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <Generic_Write+0x448>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	332d      	adds	r3, #45	; 0x2d
 8001730:	b2d9      	uxtb	r1, r3
 8001732:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001736:	461a      	mov	r2, r3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4413      	add	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	0090      	lsls	r0, r2, #2
 8001740:	461a      	mov	r2, r3
 8001742:	4603      	mov	r3, r0
 8001744:	4413      	add	r3, r2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3315      	adds	r3, #21
 800174a:	b2da      	uxtb	r2, r3
 800174c:	2308      	movs	r3, #8
 800174e:	484c      	ldr	r0, [pc, #304]	; (8001880 <Generic_Write+0x44c>)
 8001750:	f003 fdd6 	bl	8005300 <u8g2_DrawHLine>
						u8g2_DrawHLine(&u8g2, 45+8*menu1position, 22+25*index_, 8);
 8001754:	4b49      	ldr	r3, [pc, #292]	; (800187c <Generic_Write+0x448>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	332d      	adds	r3, #45	; 0x2d
 8001760:	b2d9      	uxtb	r1, r3
 8001762:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001766:	461a      	mov	r2, r3
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	4413      	add	r3, r2
 800176c:	461a      	mov	r2, r3
 800176e:	0090      	lsls	r0, r2, #2
 8001770:	461a      	mov	r2, r3
 8001772:	4603      	mov	r3, r0
 8001774:	4413      	add	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3316      	adds	r3, #22
 800177a:	b2da      	uxtb	r2, r3
 800177c:	2308      	movs	r3, #8
 800177e:	4840      	ldr	r0, [pc, #256]	; (8001880 <Generic_Write+0x44c>)
 8001780:	f003 fdbe 	bl	8005300 <u8g2_DrawHLine>
 8001784:	e068      	b.n	8001858 <Generic_Write+0x424>
					}
				} else if (row == 1){
 8001786:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800178a:	2b01      	cmp	r3, #1
 800178c:	d164      	bne.n	8001858 <Generic_Write+0x424>
					if (menu1position <= 2) {
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <Generic_Write+0x448>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b02      	cmp	r3, #2
 8001794:	dc30      	bgt.n	80017f8 <Generic_Write+0x3c4>
						u8g2_DrawHLine(&u8g2, 157+8*menu1position, 21+25*index_, 8);
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <Generic_Write+0x448>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	3b63      	subs	r3, #99	; 0x63
 80017a2:	b2d9      	uxtb	r1, r3
 80017a4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80017a8:	461a      	mov	r2, r3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	461a      	mov	r2, r3
 80017b0:	0090      	lsls	r0, r2, #2
 80017b2:	461a      	mov	r2, r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	4413      	add	r3, r2
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3315      	adds	r3, #21
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	2308      	movs	r3, #8
 80017c0:	482f      	ldr	r0, [pc, #188]	; (8001880 <Generic_Write+0x44c>)
 80017c2:	f003 fd9d 	bl	8005300 <u8g2_DrawHLine>
						u8g2_DrawHLine(&u8g2, 157+8*menu1position, 22+25*index_, 8);
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <Generic_Write+0x448>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3b63      	subs	r3, #99	; 0x63
 80017d2:	b2d9      	uxtb	r1, r3
 80017d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80017d8:	461a      	mov	r2, r3
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4413      	add	r3, r2
 80017de:	461a      	mov	r2, r3
 80017e0:	0090      	lsls	r0, r2, #2
 80017e2:	461a      	mov	r2, r3
 80017e4:	4603      	mov	r3, r0
 80017e6:	4413      	add	r3, r2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3316      	adds	r3, #22
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	2308      	movs	r3, #8
 80017f0:	4823      	ldr	r0, [pc, #140]	; (8001880 <Generic_Write+0x44c>)
 80017f2:	f003 fd85 	bl	8005300 <u8g2_DrawHLine>
 80017f6:	e02f      	b.n	8001858 <Generic_Write+0x424>
					} else {
						u8g2_DrawHLine(&u8g2, 165+8*menu1position, 21+25*index_, 8);
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <Generic_Write+0x448>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3b5b      	subs	r3, #91	; 0x5b
 8001804:	b2d9      	uxtb	r1, r3
 8001806:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800180a:	461a      	mov	r2, r3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4413      	add	r3, r2
 8001810:	461a      	mov	r2, r3
 8001812:	0090      	lsls	r0, r2, #2
 8001814:	461a      	mov	r2, r3
 8001816:	4603      	mov	r3, r0
 8001818:	4413      	add	r3, r2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	3315      	adds	r3, #21
 800181e:	b2da      	uxtb	r2, r3
 8001820:	2308      	movs	r3, #8
 8001822:	4817      	ldr	r0, [pc, #92]	; (8001880 <Generic_Write+0x44c>)
 8001824:	f003 fd6c 	bl	8005300 <u8g2_DrawHLine>
						u8g2_DrawHLine(&u8g2, 165+8*menu1position, 22+25*index_, 8);
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <Generic_Write+0x448>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3b5b      	subs	r3, #91	; 0x5b
 8001834:	b2d9      	uxtb	r1, r3
 8001836:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800183a:	461a      	mov	r2, r3
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	4413      	add	r3, r2
 8001840:	461a      	mov	r2, r3
 8001842:	0090      	lsls	r0, r2, #2
 8001844:	461a      	mov	r2, r3
 8001846:	4603      	mov	r3, r0
 8001848:	4413      	add	r3, r2
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3316      	adds	r3, #22
 800184e:	b2da      	uxtb	r2, r3
 8001850:	2308      	movs	r3, #8
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <Generic_Write+0x44c>)
 8001854:	f003 fd54 	bl	8005300 <u8g2_DrawHLine>
					}
				}
			}
		} while (bufptr != currentMenuLayerTopItem);
 8001858:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	f47f ae0a 	bne.w	8001478 <Generic_Write+0x44>
	} while (u8g2_NextPage(&u8g2));
 8001864:	4806      	ldr	r0, [pc, #24]	; (8001880 <Generic_Write+0x44c>)
 8001866:	f002 fd2e 	bl	80042c6 <u8g2_NextPage>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	f47f adec 	bne.w	800144a <Generic_Write+0x16>
}
 8001872:	bf00      	nop
 8001874:	bf00      	nop
 8001876:	3788      	adds	r7, #136	; 0x88
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000950 	.word	0x20000950
 8001880:	20000d1c 	.word	0x20000d1c
 8001884:	00000000 	.word	0x00000000

08001888 <double_string>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TRANSFORM DOUBLE FROM data_array TO STRING
double double_string(int x) {
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	int last_part = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
	for (int i = 5; i > 2; --i){
 8001894:	2305      	movs	r3, #5
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	e03a      	b.n	8001910 <double_string+0x88>
		last_part += data_array[x][i] * pow(10, 5-i);
 800189a:	4951      	ldr	r1, [pc, #324]	; (80019e0 <double_string+0x158>)
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4413      	add	r3, r2
 80018aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe38 	bl	8000524 <__aeabi_i2d>
 80018b4:	4604      	mov	r4, r0
 80018b6:	460d      	mov	r5, r1
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f1c3 0305 	rsb	r3, r3, #5
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe30 	bl	8000524 <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	ec43 2b11 	vmov	d1, r2, r3
 80018cc:	ed9f 0b42 	vldr	d0, [pc, #264]	; 80019d8 <double_string+0x150>
 80018d0:	f00a f8ac 	bl	800ba2c <pow>
 80018d4:	ec53 2b10 	vmov	r2, r3, d0
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fe8c 	bl	80005f8 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	6978      	ldr	r0, [r7, #20]
 80018ea:	f7fe fe1b 	bl	8000524 <__aeabi_i2d>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4620      	mov	r0, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	f7fe fcc9 	bl	800028c <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f929 	bl	8000b58 <__aeabi_d2iz>
 8001906:	4603      	mov	r3, r0
 8001908:	617b      	str	r3, [r7, #20]
	for (int i = 5; i > 2; --i){
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	3b01      	subs	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b02      	cmp	r3, #2
 8001914:	dcc1      	bgt.n	800189a <double_string+0x12>
	}
	int first_part = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i) {
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	e03a      	b.n	8001996 <double_string+0x10e>
		first_part += data_array[x][i] * pow(10, 2-i);
 8001920:	492f      	ldr	r1, [pc, #188]	; (80019e0 <double_string+0x158>)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	4413      	add	r3, r2
 8001930:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fdf5 	bl	8000524 <__aeabi_i2d>
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f1c3 0302 	rsb	r3, r3, #2
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fded 	bl	8000524 <__aeabi_i2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	ec43 2b11 	vmov	d1, r2, r3
 8001952:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80019d8 <double_string+0x150>
 8001956:	f00a f869 	bl	800ba2c <pow>
 800195a:	ec53 2b10 	vmov	r2, r3, d0
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fe49 	bl	80005f8 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4614      	mov	r4, r2
 800196c:	461d      	mov	r5, r3
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7fe fdd8 	bl	8000524 <__aeabi_i2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe fc86 	bl	800028c <__adddf3>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f8e6 	bl	8000b58 <__aeabi_d2iz>
 800198c:	4603      	mov	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i) {
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	3301      	adds	r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b02      	cmp	r3, #2
 800199a:	ddc1      	ble.n	8001920 <double_string+0x98>
	}
	return (double)first_part + (double)last_part/1000;
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7fe fdc1 	bl	8000524 <__aeabi_i2d>
 80019a2:	4604      	mov	r4, r0
 80019a4:	460d      	mov	r5, r1
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7fe fdbc 	bl	8000524 <__aeabi_i2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <double_string+0x15c>)
 80019b2:	f7fe ff4b 	bl	800084c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80019ca:	eeb0 0a47 	vmov.f32	s0, s14
 80019ce:	eef0 0a67 	vmov.f32	s1, s15
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bdb0      	pop	{r4, r5, r7, pc}
 80019d8:	00000000 	.word	0x00000000
 80019dc:	40240000 	.word	0x40240000
 80019e0:	20000004 	.word	0x20000004
 80019e4:	408f4000 	.word	0x408f4000

080019e8 <add_element>:

// ADD ELEMENT IN GRAPH (3 POINT IN START MENU)
void add_element(int a) {
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < line_points_max_index; ++i) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e00b      	b.n	8001a0e <add_element+0x26>
		line_points_y[i] = line_points_y[i+1];
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <add_element+0x48>)
 80019fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a00:	490b      	ldr	r1, [pc, #44]	; (8001a30 <add_element+0x48>)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < line_points_max_index; ++i) {
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <add_element+0x4c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbee      	blt.n	80019f6 <add_element+0xe>
	}
	line_points_y[line_points_max_index] = a;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <add_element+0x4c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4904      	ldr	r1, [pc, #16]	; (8001a30 <add_element+0x48>)
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000958 	.word	0x20000958
 8001a34:	2000057c 	.word	0x2000057c

08001a38 <displayGraphPoints>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// DISPLAY GRAPH WITH ADD POINT TO IT (3 POINT IN MAIN MENU)
static void displayGraphPoints() {
 8001a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a3c:	ed2d 8b02 	vpush	{d8}
 8001a40:	b0ae      	sub	sp, #184	; 0xb8
 8001a42:	af02      	add	r7, sp, #8
	// static counter for new drawing
	u8g2_SetDrawColor(&u8g2, 1);
 8001a44:	2101      	movs	r1, #1
 8001a46:	4886      	ldr	r0, [pc, #536]	; (8001c60 <displayGraphPoints+0x228>)
 8001a48:	f003 fcbf 	bl	80053ca <u8g2_SetDrawColor>
	const int max_x_point = 220;
 8001a4c:	23dc      	movs	r3, #220	; 0xdc
 8001a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const int max_y_point = 100;
 8001a52:	2364      	movs	r3, #100	; 0x64
 8001a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	//write cursor
	int cursor_coordinate = 50-pointer_y_coordinate;
 8001a58:	4b82      	ldr	r3, [pc, #520]	; (8001c64 <displayGraphPoints+0x22c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	u8g2_DrawHLine(&u8g2, 10, cursor_coordinate, max_x_point);
 8001a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	210a      	movs	r1, #10
 8001a72:	487b      	ldr	r0, [pc, #492]	; (8001c60 <displayGraphPoints+0x228>)
 8001a74:	f003 fc44 	bl	8005300 <u8g2_DrawHLine>
	// axis name and value
	u8g2_SetFont(&u8g2, u8g2_font_chikita_tf);
 8001a78:	497b      	ldr	r1, [pc, #492]	; (8001c68 <displayGraphPoints+0x230>)
 8001a7a:	4879      	ldr	r0, [pc, #484]	; (8001c60 <displayGraphPoints+0x228>)
 8001a7c:	f003 fb34 	bl	80050e8 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, 10, 108, bias_names[current_bias_index]);
 8001a80:	4b7a      	ldr	r3, [pc, #488]	; (8001c6c <displayGraphPoints+0x234>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009a      	lsls	r2, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a78      	ldr	r2, [pc, #480]	; (8001c70 <displayGraphPoints+0x238>)
 8001a90:	4413      	add	r3, r2
 8001a92:	226c      	movs	r2, #108	; 0x6c
 8001a94:	210a      	movs	r1, #10
 8001a96:	4872      	ldr	r0, [pc, #456]	; (8001c60 <displayGraphPoints+0x228>)
 8001a98:	f003 fa6a 	bl	8004f70 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 100, 108, multiplier_names[current_multiplier_index]);
 8001a9c:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <displayGraphPoints+0x23c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009a      	lsls	r2, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a73      	ldr	r2, [pc, #460]	; (8001c78 <displayGraphPoints+0x240>)
 8001aac:	4413      	add	r3, r2
 8001aae:	226c      	movs	r2, #108	; 0x6c
 8001ab0:	2164      	movs	r1, #100	; 0x64
 8001ab2:	486b      	ldr	r0, [pc, #428]	; (8001c60 <displayGraphPoints+0x228>)
 8001ab4:	f003 fa5c 	bl	8004f70 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 175, 108,"OX: 500 ms");
 8001ab8:	4b70      	ldr	r3, [pc, #448]	; (8001c7c <displayGraphPoints+0x244>)
 8001aba:	226c      	movs	r2, #108	; 0x6c
 8001abc:	21af      	movs	r1, #175	; 0xaf
 8001abe:	4868      	ldr	r0, [pc, #416]	; (8001c60 <displayGraphPoints+0x228>)
 8001ac0:	f003 fa56 	bl	8004f70 <u8g2_DrawStr>
	char mes2[6];
	char mes3[6];
	char previous_message[25];
	char current_message[25];
	char pointer_message[25];
	itoa(line_points_y[line_points_max_index-1], mes1, 10);
 8001ac4:	4b6e      	ldr	r3, [pc, #440]	; (8001c80 <displayGraphPoints+0x248>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	4a6e      	ldr	r2, [pc, #440]	; (8001c84 <displayGraphPoints+0x24c>)
 8001acc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ad0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ad4:	220a      	movs	r2, #10
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f00a ff42 	bl	800c960 <itoa>
	sprintf(previous_message, "Previous: %s\n", mes1);
 8001adc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ae0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4968      	ldr	r1, [pc, #416]	; (8001c88 <displayGraphPoints+0x250>)
 8001ae8:	f00b fca6 	bl	800d438 <siprintf>
	itoa(line_points_y[line_points_max_index], mes2, 10);
 8001aec:	4b64      	ldr	r3, [pc, #400]	; (8001c80 <displayGraphPoints+0x248>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a64      	ldr	r2, [pc, #400]	; (8001c84 <displayGraphPoints+0x24c>)
 8001af2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001af6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001afa:	220a      	movs	r2, #10
 8001afc:	4619      	mov	r1, r3
 8001afe:	f00a ff2f 	bl	800c960 <itoa>
	sprintf(current_message, "Current: %s\n", mes2);
 8001b02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b06:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	495f      	ldr	r1, [pc, #380]	; (8001c8c <displayGraphPoints+0x254>)
 8001b0e:	f00b fc93 	bl	800d438 <siprintf>
	itoa(cursor_coordinate, mes3, 10);
 8001b12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b16:	220a      	movs	r2, #10
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001b1e:	f00a ff1f 	bl	800c960 <itoa>
	sprintf(pointer_message, "Pointer: %s\n", mes3);
 8001b22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b26:	f107 001c 	add.w	r0, r7, #28
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4958      	ldr	r1, [pc, #352]	; (8001c90 <displayGraphPoints+0x258>)
 8001b2e:	f00b fc83 	bl	800d438 <siprintf>
	u8g2_DrawStr(&u8g2, 10, 118, previous_message);
 8001b32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b36:	2276      	movs	r2, #118	; 0x76
 8001b38:	210a      	movs	r1, #10
 8001b3a:	4849      	ldr	r0, [pc, #292]	; (8001c60 <displayGraphPoints+0x228>)
 8001b3c:	f003 fa18 	bl	8004f70 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 100, 118, current_message);
 8001b40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b44:	2276      	movs	r2, #118	; 0x76
 8001b46:	2164      	movs	r1, #100	; 0x64
 8001b48:	4845      	ldr	r0, [pc, #276]	; (8001c60 <displayGraphPoints+0x228>)
 8001b4a:	f003 fa11 	bl	8004f70 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 175, 118, pointer_message);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	2276      	movs	r2, #118	; 0x76
 8001b54:	21af      	movs	r1, #175	; 0xaf
 8001b56:	4842      	ldr	r0, [pc, #264]	; (8001c60 <displayGraphPoints+0x228>)
 8001b58:	f003 fa0a 	bl	8004f70 <u8g2_DrawStr>
	// draw frame
	u8g2_DrawFrame(&u8g2, 10, 0, max_x_point, max_y_point+1);
 8001b5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	2200      	movs	r2, #0
 8001b72:	210a      	movs	r1, #10
 8001b74:	483a      	ldr	r0, [pc, #232]	; (8001c60 <displayGraphPoints+0x228>)
 8001b76:	f002 f9f5 	bl	8003f64 <u8g2_DrawFrame>
	// vertical lines for grid
	int x_steps = 14;
 8001b7a:	230e      	movs	r3, #14
 8001b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	for (int i = 1; i < x_steps; ++i) {
 8001b80:	2301      	movs	r3, #1
 8001b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001b86:	e022      	b.n	8001bce <displayGraphPoints+0x196>
		u8g2_DrawDLine(&u8g2, i*15 + 15, 0, i*15 + 15, max_y_point, 1);
 8001b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	b2d9      	uxtb	r1, r3
 8001bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	9200      	str	r2, [sp, #0]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4601      	mov	r1, r0
 8001bbe:	4828      	ldr	r0, [pc, #160]	; (8001c60 <displayGraphPoints+0x228>)
 8001bc0:	f7ff fa00 	bl	8000fc4 <u8g2_DrawDLine>
	for (int i = 1; i < x_steps; ++i) {
 8001bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001bce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbd6      	blt.n	8001b88 <displayGraphPoints+0x150>
	}
	// horizontal lines for grid
	int y_steps = 6;
 8001bda:	2306      	movs	r3, #6
 8001bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	for (int i = 1; i < y_steps; ++i) {
 8001be0:	2301      	movs	r3, #1
 8001be2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001be6:	e020      	b.n	8001c2a <displayGraphPoints+0x1f2>
		u8g2_DrawDLine(&u8g2, 10, i*16 + 2, max_x_point+10, i*16 + 2, 1);
 8001be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	b2d8      	uxtb	r0, r3
 8001bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	330a      	adds	r3, #10
 8001bfe:	b2d9      	uxtb	r1, r3
 8001c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	9200      	str	r2, [sp, #0]
 8001c14:	460b      	mov	r3, r1
 8001c16:	4602      	mov	r2, r0
 8001c18:	210a      	movs	r1, #10
 8001c1a:	4811      	ldr	r0, [pc, #68]	; (8001c60 <displayGraphPoints+0x228>)
 8001c1c:	f7ff f9d2 	bl	8000fc4 <u8g2_DrawDLine>
	for (int i = 1; i < y_steps; ++i) {
 8001c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c24:	3301      	adds	r3, #1
 8001c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbd8      	blt.n	8001be8 <displayGraphPoints+0x1b0>
	}
	// main axises:
	u8g2_DrawVLine(&u8g2, 120, 0, max_y_point);
 8001c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2178      	movs	r1, #120	; 0x78
 8001c40:	4807      	ldr	r0, [pc, #28]	; (8001c60 <displayGraphPoints+0x228>)
 8001c42:	f003 fb76 	bl	8005332 <u8g2_DrawVLine>
	u8g2_DrawHLine(&u8g2, 10, 50, max_x_point);
 8001c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2232      	movs	r2, #50	; 0x32
 8001c4e:	210a      	movs	r1, #10
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <displayGraphPoints+0x228>)
 8001c52:	f003 fb55 	bl	8005300 <u8g2_DrawHLine>

	// draw lines for point forward
	// INVERSED COORDINATES, BECAUSE POINT MEASURED FROM UPPER END
	for (int i = 10; i < max_x_point+10; ++i) {
 8001c56:	230a      	movs	r3, #10
 8001c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c5c:	e167      	b.n	8001f2e <displayGraphPoints+0x4f6>
 8001c5e:	bf00      	nop
 8001c60:	20000d1c 	.word	0x20000d1c
 8001c64:	20000954 	.word	0x20000954
 8001c68:	08013af8 	.word	0x08013af8
 8001c6c:	20000384 	.word	0x20000384
 8001c70:	200003d0 	.word	0x200003d0
 8001c74:	20000254 	.word	0x20000254
 8001c78:	200002a0 	.word	0x200002a0
 8001c7c:	0800f990 	.word	0x0800f990
 8001c80:	2000057c 	.word	0x2000057c
 8001c84:	20000958 	.word	0x20000958
 8001c88:	0800f99c 	.word	0x0800f99c
 8001c8c:	0800f9ac 	.word	0x0800f9ac
 8001c90:	0800f9bc 	.word	0x0800f9bc
		int start_y = max_y_point/2-(float)((line_points_y[i]/translateus2Y-max_y_point/2)*multiplier[current_multiplier_index]) + bias[current_bias_index];
 8001c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c98:	0fda      	lsrs	r2, r3, #31
 8001c9a:	4413      	add	r3, r2
 8001c9c:	105b      	asrs	r3, r3, #1
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ca6:	4aaa      	ldr	r2, [pc, #680]	; (8001f50 <displayGraphPoints+0x518>)
 8001ca8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	17da      	asrs	r2, r3, #31
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	617a      	str	r2, [r7, #20]
 8001cb6:	f240 621a 	movw	r2, #1562	; 0x61a
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc2:	f7fe ffc1 	bl	8000c48 <__aeabi_uldivmod>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001cd2:	0fd3      	lsrs	r3, r2, #31
 8001cd4:	4413      	add	r3, r2
 8001cd6:	105b      	asrs	r3, r3, #1
 8001cd8:	17da      	asrs	r2, r3, #31
 8001cda:	461c      	mov	r4, r3
 8001cdc:	4615      	mov	r5, r2
 8001cde:	ebb0 0a04 	subs.w	sl, r0, r4
 8001ce2:	eb61 0b05 	sbc.w	fp, r1, r5
 8001ce6:	4650      	mov	r0, sl
 8001ce8:	4659      	mov	r1, fp
 8001cea:	f7fe fc4f 	bl	800058c <__aeabi_ul2d>
 8001cee:	4b99      	ldr	r3, [pc, #612]	; (8001f54 <displayGraphPoints+0x51c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a99      	ldr	r2, [pc, #612]	; (8001f58 <displayGraphPoints+0x520>)
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc7c 	bl	80005f8 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff4e 	bl	8000ba8 <__aeabi_d2f>
 8001d0c:	ee07 0a90 	vmov	s15, r0
 8001d10:	ee38 7a67 	vsub.f32	s14, s16, s15
 8001d14:	4b91      	ldr	r3, [pc, #580]	; (8001f5c <displayGraphPoints+0x524>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a91      	ldr	r2, [pc, #580]	; (8001f60 <displayGraphPoints+0x528>)
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2e:	ee17 3a90 	vmov	r3, s15
 8001d32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		int end_y = max_y_point/2-(float)((line_points_y[i+1]/translateus2Y-max_y_point/2)*multiplier[current_multiplier_index]) + bias[current_bias_index];
 8001d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d3a:	0fda      	lsrs	r2, r3, #31
 8001d3c:	4413      	add	r3, r2
 8001d3e:	105b      	asrs	r3, r3, #1
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001d48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4a80      	ldr	r2, [pc, #512]	; (8001f50 <displayGraphPoints+0x518>)
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	17da      	asrs	r2, r3, #31
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	60fa      	str	r2, [r7, #12]
 8001d5a:	f240 621a 	movw	r2, #1562	; 0x61a
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d66:	f7fe ff6f 	bl	8000c48 <__aeabi_uldivmod>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001d76:	0fd3      	lsrs	r3, r2, #31
 8001d78:	4413      	add	r3, r2
 8001d7a:	105b      	asrs	r3, r3, #1
 8001d7c:	17da      	asrs	r2, r3, #31
 8001d7e:	4698      	mov	r8, r3
 8001d80:	4691      	mov	r9, r2
 8001d82:	ebb0 0308 	subs.w	r3, r0, r8
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	eb61 0309 	sbc.w	r3, r1, r9
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d92:	f7fe fbfb 	bl	800058c <__aeabi_ul2d>
 8001d96:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <displayGraphPoints+0x51c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6f      	ldr	r2, [pc, #444]	; (8001f58 <displayGraphPoints+0x520>)
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc28 	bl	80005f8 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fefa 	bl	8000ba8 <__aeabi_d2f>
 8001db4:	ee07 0a90 	vmov	s15, r0
 8001db8:	ee38 7a67 	vsub.f32	s14, s16, s15
 8001dbc:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <displayGraphPoints+0x524>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <displayGraphPoints+0x528>)
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd6:	ee17 3a90 	vmov	r3, s15
 8001dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		if ((start_y <= max_y_point) && (end_y <= max_y_point) && (start_y >= 0) && (end_y >= 0)) {
 8001dde:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dc23      	bgt.n	8001e32 <displayGraphPoints+0x3fa>
 8001dea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dc1d      	bgt.n	8001e32 <displayGraphPoints+0x3fa>
 8001df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db19      	blt.n	8001e32 <displayGraphPoints+0x3fa>
 8001dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db15      	blt.n	8001e32 <displayGraphPoints+0x3fa>
			u8g2_DrawLine(&u8g2, i, start_y, i+1, end_y);
 8001e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e0a:	b2d8      	uxtb	r0, r3
 8001e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e10:	b2d9      	uxtb	r1, r3
 8001e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	460a      	mov	r2, r1
 8001e28:	4601      	mov	r1, r0
 8001e2a:	484e      	ldr	r0, [pc, #312]	; (8001f64 <displayGraphPoints+0x52c>)
 8001e2c:	f003 fb42 	bl	80054b4 <u8g2_DrawLine>
 8001e30:	e078      	b.n	8001f24 <displayGraphPoints+0x4ec>
		} else if ((start_y <= 0) && (end_y >= 0)) {
 8001e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	dc15      	bgt.n	8001e66 <displayGraphPoints+0x42e>
 8001e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db11      	blt.n	8001e66 <displayGraphPoints+0x42e>
			u8g2_DrawLine(&u8g2, i, 0, i+1, end_y);
 8001e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e46:	b2d9      	uxtb	r1, r3
 8001e48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4841      	ldr	r0, [pc, #260]	; (8001f64 <displayGraphPoints+0x52c>)
 8001e60:	f003 fb28 	bl	80054b4 <u8g2_DrawLine>
 8001e64:	e05e      	b.n	8001f24 <displayGraphPoints+0x4ec>
		} else if ((start_y >= 0) && (end_y <= 0)) {
 8001e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db17      	blt.n	8001e9e <displayGraphPoints+0x466>
 8001e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	dc13      	bgt.n	8001e9e <displayGraphPoints+0x466>
			u8g2_DrawLine(&u8g2, i, start_y, i+1, 0);
 8001e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e7a:	b2d8      	uxtb	r0, r3
 8001e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e80:	b2d9      	uxtb	r1, r3
 8001e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	460a      	mov	r2, r1
 8001e94:	4601      	mov	r1, r0
 8001e96:	4833      	ldr	r0, [pc, #204]	; (8001f64 <displayGraphPoints+0x52c>)
 8001e98:	f003 fb0c 	bl	80054b4 <u8g2_DrawLine>
 8001e9c:	e042      	b.n	8001f24 <displayGraphPoints+0x4ec>
		} else if ((start_y > max_y_point) && (start_y <= max_y_point)){
 8001e9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	dd1b      	ble.n	8001ee2 <displayGraphPoints+0x4aa>
 8001eaa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001eae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dc15      	bgt.n	8001ee2 <displayGraphPoints+0x4aa>
			u8g2_DrawLine(&u8g2, i, max_y_point, i+1, end_y);
 8001eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eba:	b2d8      	uxtb	r0, r3
 8001ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ec0:	b2d9      	uxtb	r1, r3
 8001ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	460a      	mov	r2, r1
 8001ed8:	4601      	mov	r1, r0
 8001eda:	4822      	ldr	r0, [pc, #136]	; (8001f64 <displayGraphPoints+0x52c>)
 8001edc:	f003 faea 	bl	80054b4 <u8g2_DrawLine>
 8001ee0:	e020      	b.n	8001f24 <displayGraphPoints+0x4ec>
		} else if (start_y <= max_y_point && start_y > max_y_point){
 8001ee2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dc1a      	bgt.n	8001f24 <displayGraphPoints+0x4ec>
 8001eee:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dd14      	ble.n	8001f24 <displayGraphPoints+0x4ec>
			u8g2_DrawLine(&u8g2, i, start_y, i+1, max_y_point);
 8001efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001efe:	b2d8      	uxtb	r0, r3
 8001f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f04:	b2d9      	uxtb	r1, r3
 8001f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	460a      	mov	r2, r1
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	4811      	ldr	r0, [pc, #68]	; (8001f64 <displayGraphPoints+0x52c>)
 8001f20:	f003 fac8 	bl	80054b4 <u8g2_DrawLine>
	for (int i = 10; i < max_x_point+10; ++i) {
 8001f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f32:	3309      	adds	r3, #9
 8001f34:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f77f aeab 	ble.w	8001c94 <displayGraphPoints+0x25c>
		}
	}
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	37b0      	adds	r7, #176	; 0xb0
 8001f44:	46bd      	mov	sp, r7
 8001f46:	ecbd 8b02 	vpop	{d8}
 8001f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000958 	.word	0x20000958
 8001f54:	20000254 	.word	0x20000254
 8001f58:	20000258 	.word	0x20000258
 8001f5c:	20000384 	.word	0x20000384
 8001f60:	2000038c 	.word	0x2000038c
 8001f64:	20000d1c 	.word	0x20000d1c

08001f68 <DrawStateConstatntLength>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// DRAW OBJECT LENGTH LIMITS (2 MENU ITEM)
uint64_t used_difference = 0;
static void DrawStateConstatntLength() {
 8001f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f6c:	b0af      	sub	sp, #188	; 0xbc
 8001f6e:	af04      	add	r7, sp, #16
	uint8_t already_used = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	u8g2_FirstPage(&u8g2);
 8001f76:	48c0      	ldr	r0, [pc, #768]	; (8002278 <DrawStateConstatntLength+0x310>)
 8001f78:	f002 f991 	bl	800429e <u8g2_FirstPage>
	u8g2_SetDrawColor(&u8g2, 1);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	48be      	ldr	r0, [pc, #760]	; (8002278 <DrawStateConstatntLength+0x310>)
 8001f80:	f003 fa23 	bl	80053ca <u8g2_SetDrawColor>
	const int max_x_point = 220;
 8001f84:	23dc      	movs	r3, #220	; 0xdc
 8001f86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	const int max_y_point = 110;
 8001f8a:	236e      	movs	r3, #110	; 0x6e
 8001f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	do {
		// draw frame
		u8g2_DrawFrame(&u8g2, 10, 10, max_x_point, max_y_point+1);
 8001f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	220a      	movs	r2, #10
 8001fa6:	210a      	movs	r1, #10
 8001fa8:	48b3      	ldr	r0, [pc, #716]	; (8002278 <DrawStateConstatntLength+0x310>)
 8001faa:	f001 ffdb 	bl	8003f64 <u8g2_DrawFrame>
		u8g2_SetFont(&u8g2, u8g2_font_10x20_t_cyrillic);
 8001fae:	49b3      	ldr	r1, [pc, #716]	; (800227c <DrawStateConstatntLength+0x314>)
 8001fb0:	48b1      	ldr	r0, [pc, #708]	; (8002278 <DrawStateConstatntLength+0x310>)
 8001fb2:	f003 f899 	bl	80050e8 <u8g2_SetFont>
		int index_ = 9;
 8001fb6:	2309      	movs	r3, #9
 8001fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		if (Menu_GetCurrentMenu() == &Menu_1_1) {
 8001fbc:	f001 fba8 	bl	8003710 <Menu_GetCurrentMenu>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4aaf      	ldr	r2, [pc, #700]	; (8002280 <DrawStateConstatntLength+0x318>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d103      	bne.n	8001fd0 <DrawStateConstatntLength+0x68>
			index_ = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fce:	e044      	b.n	800205a <DrawStateConstatntLength+0xf2>
		} else if (Menu_GetCurrentMenu() == &Menu_1_2) {
 8001fd0:	f001 fb9e 	bl	8003710 <Menu_GetCurrentMenu>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4aab      	ldr	r2, [pc, #684]	; (8002284 <DrawStateConstatntLength+0x31c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d103      	bne.n	8001fe4 <DrawStateConstatntLength+0x7c>
			index_ = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fe2:	e03a      	b.n	800205a <DrawStateConstatntLength+0xf2>
		} else if (Menu_GetCurrentMenu() == &Menu_1_3) {
 8001fe4:	f001 fb94 	bl	8003710 <Menu_GetCurrentMenu>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4aa7      	ldr	r2, [pc, #668]	; (8002288 <DrawStateConstatntLength+0x320>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d103      	bne.n	8001ff8 <DrawStateConstatntLength+0x90>
			index_ = 2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ff6:	e030      	b.n	800205a <DrawStateConstatntLength+0xf2>
		} else if (Menu_GetCurrentMenu() == &Menu_1_4) {
 8001ff8:	f001 fb8a 	bl	8003710 <Menu_GetCurrentMenu>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4aa3      	ldr	r2, [pc, #652]	; (800228c <DrawStateConstatntLength+0x324>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <DrawStateConstatntLength+0xa4>
			index_ = 3;
 8002004:	2303      	movs	r3, #3
 8002006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800200a:	e026      	b.n	800205a <DrawStateConstatntLength+0xf2>
		} else if (Menu_GetCurrentMenu() == &Menu_1_5) {
 800200c:	f001 fb80 	bl	8003710 <Menu_GetCurrentMenu>
 8002010:	4603      	mov	r3, r0
 8002012:	4a9f      	ldr	r2, [pc, #636]	; (8002290 <DrawStateConstatntLength+0x328>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d103      	bne.n	8002020 <DrawStateConstatntLength+0xb8>
			index_ = 4;
 8002018:	2304      	movs	r3, #4
 800201a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800201e:	e01c      	b.n	800205a <DrawStateConstatntLength+0xf2>
		} else if (Menu_GetCurrentMenu() == &Menu_1_6) {
 8002020:	f001 fb76 	bl	8003710 <Menu_GetCurrentMenu>
 8002024:	4603      	mov	r3, r0
 8002026:	4a9b      	ldr	r2, [pc, #620]	; (8002294 <DrawStateConstatntLength+0x32c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <DrawStateConstatntLength+0xcc>
			index_ = 5;
 800202c:	2305      	movs	r3, #5
 800202e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002032:	e012      	b.n	800205a <DrawStateConstatntLength+0xf2>
		} else if (Menu_GetCurrentMenu() == &Menu_1_7) {
 8002034:	f001 fb6c 	bl	8003710 <Menu_GetCurrentMenu>
 8002038:	4603      	mov	r3, r0
 800203a:	4a97      	ldr	r2, [pc, #604]	; (8002298 <DrawStateConstatntLength+0x330>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d103      	bne.n	8002048 <DrawStateConstatntLength+0xe0>
			index_ = 6;
 8002040:	2306      	movs	r3, #6
 8002042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002046:	e008      	b.n	800205a <DrawStateConstatntLength+0xf2>
		} else if (Menu_GetCurrentMenu() == &Menu_1_8) {
 8002048:	f001 fb62 	bl	8003710 <Menu_GetCurrentMenu>
 800204c:	4603      	mov	r3, r0
 800204e:	4a93      	ldr	r2, [pc, #588]	; (800229c <DrawStateConstatntLength+0x334>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d102      	bne.n	800205a <DrawStateConstatntLength+0xf2>
			index_ = 7;
 8002054:	2307      	movs	r3, #7
 8002056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		}
		if (index_ != 9) {
 800205a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800205e:	2b09      	cmp	r3, #9
 8002060:	d051      	beq.n	8002106 <DrawStateConstatntLength+0x19e>
			char mes[25];
			sprintf(mes, "L = %d%d%d,%d%d%d мм", data_array[index_][0], data_array[index_][1], data_array[index_][2], data_array[index_][3], data_array[index_][4], data_array[index_][5]);
 8002062:	498f      	ldr	r1, [pc, #572]	; (80022a0 <DrawStateConstatntLength+0x338>)
 8002064:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	498a      	ldr	r1, [pc, #552]	; (80022a0 <DrawStateConstatntLength+0x338>)
 8002078:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	3304      	adds	r3, #4
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	4984      	ldr	r1, [pc, #528]	; (80022a0 <DrawStateConstatntLength+0x338>)
 800208e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3308      	adds	r3, #8
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	487f      	ldr	r0, [pc, #508]	; (80022a0 <DrawStateConstatntLength+0x338>)
 80020a2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4403      	add	r3, r0
 80020b0:	330c      	adds	r3, #12
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	4e7a      	ldr	r6, [pc, #488]	; (80022a0 <DrawStateConstatntLength+0x338>)
 80020b6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4433      	add	r3, r6
 80020c4:	3310      	adds	r3, #16
 80020c6:	681e      	ldr	r6, [r3, #0]
 80020c8:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <DrawStateConstatntLength+0x338>)
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	3314      	adds	r3, #20
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f107 0c14 	add.w	ip, r7, #20
 80020e4:	9303      	str	r3, [sp, #12]
 80020e6:	9602      	str	r6, [sp, #8]
 80020e8:	9001      	str	r0, [sp, #4]
 80020ea:	9100      	str	r1, [sp, #0]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	496c      	ldr	r1, [pc, #432]	; (80022a4 <DrawStateConstatntLength+0x33c>)
 80020f2:	4660      	mov	r0, ip
 80020f4:	f00b f9a0 	bl	800d438 <siprintf>
			u8g2_DrawUTF8(&u8g2, 50, 30, mes);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	221e      	movs	r2, #30
 80020fe:	2132      	movs	r1, #50	; 0x32
 8002100:	485d      	ldr	r0, [pc, #372]	; (8002278 <DrawStateConstatntLength+0x310>)
 8002102:	f002 ff4f 	bl	8004fa4 <u8g2_DrawUTF8>
		}
		if (!already_used) {
 8002106:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800210a:	2b00      	cmp	r3, #0
 800210c:	d136      	bne.n	800217c <DrawStateConstatntLength+0x214>
			used_difference = 0;
 800210e:	4966      	ldr	r1, [pc, #408]	; (80022a8 <DrawStateConstatntLength+0x340>)
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 230; i <= 240; ++i) {
 800211c:	23e6      	movs	r3, #230	; 0xe6
 800211e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002122:	e016      	b.n	8002152 <DrawStateConstatntLength+0x1ea>
				used_difference += line_points_y[i];
 8002124:	4a61      	ldr	r2, [pc, #388]	; (80022ac <DrawStateConstatntLength+0x344>)
 8002126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	17da      	asrs	r2, r3, #31
 8002130:	461c      	mov	r4, r3
 8002132:	4615      	mov	r5, r2
 8002134:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <DrawStateConstatntLength+0x340>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	eb14 0802 	adds.w	r8, r4, r2
 800213e:	eb45 0903 	adc.w	r9, r5, r3
 8002142:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <DrawStateConstatntLength+0x340>)
 8002144:	e9c3 8900 	strd	r8, r9, [r3]
			for (int i = 230; i <= 240; ++i) {
 8002148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800214c:	3301      	adds	r3, #1
 800214e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002152:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002156:	2bf0      	cmp	r3, #240	; 0xf0
 8002158:	dde4      	ble.n	8002124 <DrawStateConstatntLength+0x1bc>
			}
			used_difference /= 11;
 800215a:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <DrawStateConstatntLength+0x340>)
 800215c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002160:	f04f 020b 	mov.w	r2, #11
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f7fe fd6e 	bl	8000c48 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	494d      	ldr	r1, [pc, #308]	; (80022a8 <DrawStateConstatntLength+0x340>)
 8002172:	e9c1 2300 	strd	r2, r3, [r1]
			already_used = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		}
		// draw frame
		u8g2_DrawFrame(&u8g2, 90, 40, 60, 30);
 800217c:	231e      	movs	r3, #30
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	233c      	movs	r3, #60	; 0x3c
 8002182:	2228      	movs	r2, #40	; 0x28
 8002184:	215a      	movs	r1, #90	; 0x5a
 8002186:	483c      	ldr	r0, [pc, #240]	; (8002278 <DrawStateConstatntLength+0x310>)
 8002188:	f001 feec 	bl	8003f64 <u8g2_DrawFrame>
		double length = double_string(index_);
 800218c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002190:	f7ff fb7a 	bl	8001888 <double_string>
 8002194:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
		double min_gs_length = min_gs_speed*used_difference;
 8002198:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <DrawStateConstatntLength+0x340>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe f9f3 	bl	800058c <__aeabi_ul2d>
 80021a6:	a32c      	add	r3, pc, #176	; (adr r3, 8002258 <DrawStateConstatntLength+0x2f0>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fa24 	bl	80005f8 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		double max_hss_length = max_hss_speed*used_difference;
 80021b8:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <DrawStateConstatntLength+0x340>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe f9e3 	bl	800058c <__aeabi_ul2d>
 80021c6:	a326      	add	r3, pc, #152	; (adr r3, 8002260 <DrawStateConstatntLength+0x2f8>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	f7fe fa14 	bl	80005f8 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		double max_gs_length = max_gs_speed*used_difference;
 80021d8:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <DrawStateConstatntLength+0x340>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe f9d3 	bl	800058c <__aeabi_ul2d>
 80021e6:	a320      	add	r3, pc, #128	; (adr r3, 8002268 <DrawStateConstatntLength+0x300>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe fa04 	bl	80005f8 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		double min_hss_length = min_hss_speed*used_difference;
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <DrawStateConstatntLength+0x340>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe f9c3 	bl	800058c <__aeabi_ul2d>
 8002206:	a31a      	add	r3, pc, #104	; (adr r3, 8002270 <DrawStateConstatntLength+0x308>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe f9f4 	bl	80005f8 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (used_difference) {
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <DrawStateConstatntLength+0x340>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	4313      	orrs	r3, r2
 8002220:	d068      	beq.n	80022f4 <DrawStateConstatntLength+0x38c>
			if (length <= max_gs_length && length > min_gs_length) {
 8002222:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002226:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800222a:	f7fe fc61 	bl	8000af0 <__aeabi_dcmple>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03f      	beq.n	80022b4 <DrawStateConstatntLength+0x34c>
 8002234:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002238:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800223c:	f7fe fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d036      	beq.n	80022b4 <DrawStateConstatntLength+0x34c>
				u8g2_DrawUTF8(&u8g2, 110, 60, "СЧ");
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <DrawStateConstatntLength+0x348>)
 8002248:	223c      	movs	r2, #60	; 0x3c
 800224a:	216e      	movs	r1, #110	; 0x6e
 800224c:	480a      	ldr	r0, [pc, #40]	; (8002278 <DrawStateConstatntLength+0x310>)
 800224e:	f002 fea9 	bl	8004fa4 <u8g2_DrawUTF8>
 8002252:	e055      	b.n	8002300 <DrawStateConstatntLength+0x398>
 8002254:	f3af 8000 	nop.w
 8002258:	bc6a7efa 	.word	0xbc6a7efa
 800225c:	3f689374 	.word	0x3f689374
 8002260:	8d4fdf3b 	.word	0x8d4fdf3b
 8002264:	3f826e97 	.word	0x3f826e97
 8002268:	bc01a36e 	.word	0xbc01a36e
 800226c:	3f741205 	.word	0x3f741205
 8002270:	020c49ba 	.word	0x020c49ba
 8002274:	3f76872b 	.word	0x3f76872b
 8002278:	20000d1c 	.word	0x20000d1c
 800227c:	0800fc6c 	.word	0x0800fc6c
 8002280:	0800fb10 	.word	0x0800fb10
 8002284:	0800fb34 	.word	0x0800fb34
 8002288:	0800fb58 	.word	0x0800fb58
 800228c:	0800fb7c 	.word	0x0800fb7c
 8002290:	0800fba0 	.word	0x0800fba0
 8002294:	0800fbc4 	.word	0x0800fbc4
 8002298:	0800fbe8 	.word	0x0800fbe8
 800229c:	0800fc0c 	.word	0x0800fc0c
 80022a0:	20000004 	.word	0x20000004
 80022a4:	0800f9cc 	.word	0x0800f9cc
 80022a8:	20000db8 	.word	0x20000db8
 80022ac:	20000958 	.word	0x20000958
 80022b0:	0800f8ac 	.word	0x0800f8ac
			} else if (length >= min_hss_length && length < max_hss_length) {
 80022b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80022b8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80022bc:	f7fe fc22 	bl	8000b04 <__aeabi_dcmpge>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00f      	beq.n	80022e6 <DrawStateConstatntLength+0x37e>
 80022c6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80022ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80022ce:	f7fe fc05 	bl	8000adc <__aeabi_dcmplt>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <DrawStateConstatntLength+0x37e>
				u8g2_DrawUTF8(&u8g2, 110, 60, "ВЧ");
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <DrawStateConstatntLength+0x3f8>)
 80022da:	223c      	movs	r2, #60	; 0x3c
 80022dc:	216e      	movs	r1, #110	; 0x6e
 80022de:	4821      	ldr	r0, [pc, #132]	; (8002364 <DrawStateConstatntLength+0x3fc>)
 80022e0:	f002 fe60 	bl	8004fa4 <u8g2_DrawUTF8>
 80022e4:	e00c      	b.n	8002300 <DrawStateConstatntLength+0x398>
			} else {
				u8g2_DrawUTF8(&u8g2, 115, 60, "?");
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <DrawStateConstatntLength+0x400>)
 80022e8:	223c      	movs	r2, #60	; 0x3c
 80022ea:	2173      	movs	r1, #115	; 0x73
 80022ec:	481d      	ldr	r0, [pc, #116]	; (8002364 <DrawStateConstatntLength+0x3fc>)
 80022ee:	f002 fe59 	bl	8004fa4 <u8g2_DrawUTF8>
 80022f2:	e005      	b.n	8002300 <DrawStateConstatntLength+0x398>
			}
		} else {
			u8g2_DrawUTF8(&u8g2, 115, 60, "?");
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <DrawStateConstatntLength+0x400>)
 80022f6:	223c      	movs	r2, #60	; 0x3c
 80022f8:	2173      	movs	r1, #115	; 0x73
 80022fa:	481a      	ldr	r0, [pc, #104]	; (8002364 <DrawStateConstatntLength+0x3fc>)
 80022fc:	f002 fe52 	bl	8004fa4 <u8g2_DrawUTF8>
		}
		u8g2_DrawHLine(&u8g2, 10, 73, 220);
 8002300:	23dc      	movs	r3, #220	; 0xdc
 8002302:	2249      	movs	r2, #73	; 0x49
 8002304:	210a      	movs	r1, #10
 8002306:	4817      	ldr	r0, [pc, #92]	; (8002364 <DrawStateConstatntLength+0x3fc>)
 8002308:	f002 fffa 	bl	8005300 <u8g2_DrawHLine>
		char mes3[25];
		char mes4[25];
		sprintf(mes3, "СЧ: L<=%.3lfмм\n", max_gs_length);
 800230c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002310:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002314:	4915      	ldr	r1, [pc, #84]	; (800236c <DrawStateConstatntLength+0x404>)
 8002316:	f00b f88f 	bl	800d438 <siprintf>
		sprintf(mes4, "ВЧ: L>=%.3lfмм\n", min_hss_length);
 800231a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800231e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002322:	4913      	ldr	r1, [pc, #76]	; (8002370 <DrawStateConstatntLength+0x408>)
 8002324:	f00b f888 	bl	800d438 <siprintf>
		u8g2_DrawUTF8(&u8g2, 30, 90, mes3);
 8002328:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800232c:	225a      	movs	r2, #90	; 0x5a
 800232e:	211e      	movs	r1, #30
 8002330:	480c      	ldr	r0, [pc, #48]	; (8002364 <DrawStateConstatntLength+0x3fc>)
 8002332:	f002 fe37 	bl	8004fa4 <u8g2_DrawUTF8>
		u8g2_DrawUTF8(&u8g2, 30, 110, mes4);
 8002336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800233a:	226e      	movs	r2, #110	; 0x6e
 800233c:	211e      	movs	r1, #30
 800233e:	4809      	ldr	r0, [pc, #36]	; (8002364 <DrawStateConstatntLength+0x3fc>)
 8002340:	f002 fe30 	bl	8004fa4 <u8g2_DrawUTF8>
	} while (u8g2_NextPage(&u8g2));
 8002344:	4807      	ldr	r0, [pc, #28]	; (8002364 <DrawStateConstatntLength+0x3fc>)
 8002346:	f001 ffbe 	bl	80042c6 <u8g2_NextPage>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f ae1f 	bne.w	8001f90 <DrawStateConstatntLength+0x28>
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	37ac      	adds	r7, #172	; 0xac
 8002358:	46bd      	mov	sp, r7
 800235a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800235e:	bf00      	nop
 8002360:	0800f8b4 	.word	0x0800f8b4
 8002364:	20000d1c 	.word	0x20000d1c
 8002368:	0800f8a8 	.word	0x0800f8a8
 800236c:	0800f9e4 	.word	0x0800f9e4
 8002370:	0800f9f8 	.word	0x0800f9f8

08002374 <delay_us>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ALTERNATIVE SAFER DELAY FUNCTION FOR MICROSECONDS DELAY
void delay_us(uint8_t us) {
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COUNTER(&htim10, 0);  // set the counter value a 0
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <delay_us+0x30>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim10) < us);
 8002386:	bf00      	nop
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <delay_us+0x30>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	429a      	cmp	r2, r3
 8002392:	d3f9      	bcc.n	8002388 <delay_us+0x14>
	// wait for the counter to reach the us input in the parameter
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000820 	.word	0x20000820

080023a8 <u8g2_gpio_and_delay_stm32>:

// U8G2 FUNCTION TO WORK PROPERLY (DISPLAY PINS ARE ASSIGNED HERE)
uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	72fb      	strb	r3, [r7, #11]
 80023b6:	4613      	mov	r3, r2
 80023b8:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	3b28      	subs	r3, #40	; 0x28
 80023be:	2b22      	cmp	r3, #34	; 0x22
 80023c0:	f200 80c7 	bhi.w	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
 80023c4:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <u8g2_gpio_and_delay_stm32+0x24>)
 80023c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ca:	bf00      	nop
 80023cc:	08002459 	.word	0x08002459
 80023d0:	0800249f 	.word	0x0800249f
 80023d4:	0800248b 	.word	0x0800248b
 80023d8:	08002477 	.word	0x08002477
 80023dc:	080024a9 	.word	0x080024a9
 80023e0:	08002553 	.word	0x08002553
 80023e4:	08002553 	.word	0x08002553
 80023e8:	08002553 	.word	0x08002553
 80023ec:	08002553 	.word	0x08002553
 80023f0:	08002553 	.word	0x08002553
 80023f4:	08002553 	.word	0x08002553
 80023f8:	08002553 	.word	0x08002553
 80023fc:	08002553 	.word	0x08002553
 8002400:	08002553 	.word	0x08002553
 8002404:	08002553 	.word	0x08002553
 8002408:	08002553 	.word	0x08002553
 800240c:	08002553 	.word	0x08002553
 8002410:	08002553 	.word	0x08002553
 8002414:	08002553 	.word	0x08002553
 8002418:	08002553 	.word	0x08002553
 800241c:	08002553 	.word	0x08002553
 8002420:	08002553 	.word	0x08002553
 8002424:	08002553 	.word	0x08002553
 8002428:	08002553 	.word	0x08002553
 800242c:	080024c1 	.word	0x080024c1
 8002430:	080024d1 	.word	0x080024d1
 8002434:	080024e1 	.word	0x080024e1
 8002438:	080024ef 	.word	0x080024ef
 800243c:	080024fd 	.word	0x080024fd
 8002440:	0800250b 	.word	0x0800250b
 8002444:	08002519 	.word	0x08002519
 8002448:	08002527 	.word	0x08002527
 800244c:	08002545 	.word	0x08002545
 8002450:	08002553 	.word	0x08002553
 8002454:	08002535 	.word	0x08002535
		case U8X8_MSG_GPIO_AND_DELAY_INIT:
			HAL_GPIO_WritePin(WR1_GPIO_Port, WR1_Pin, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800245e:	483f      	ldr	r0, [pc, #252]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 8002460:	f004 fa78 	bl	8006954 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, 1);
 8002464:	2201      	movs	r2, #1
 8002466:	2102      	movs	r1, #2
 8002468:	483c      	ldr	r0, [pc, #240]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 800246a:	f004 fa73 	bl	8006954 <HAL_GPIO_WritePin>
			osDelay(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f006 fe3c 	bl	80090ec <osDelay>
			break;
 8002474:	e06d      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_DELAY_100NANO:		// delay arg_int * 100 nano seconds
			delay_us(arg_int / 10);
 8002476:	7abb      	ldrb	r3, [r7, #10]
 8002478:	4a39      	ldr	r2, [pc, #228]	; (8002560 <u8g2_gpio_and_delay_stm32+0x1b8>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff76 	bl	8002374 <delay_us>
			break;
 8002488:	e063      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_DELAY_10MICRO:		// delay arg_int * 10 micro seconds
			delay_us(arg_int * 10);
 800248a:	7abb      	ldrb	r3, [r7, #10]
 800248c:	461a      	mov	r2, r3
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	4413      	add	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff6c 	bl	8002374 <delay_us>
			break;
 800249c:	e059      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
			osDelay(arg_int);
 800249e:	7abb      	ldrb	r3, [r7, #10]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f006 fe23 	bl	80090ec <osDelay>
			break;
 80024a6:	e054      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_DELAY_NANO:			// delay arg_int * 1 milli second
			delay_us(arg_int / 1000);
 80024a8:	7abb      	ldrb	r3, [r7, #10]
 80024aa:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <u8g2_gpio_and_delay_stm32+0x1bc>)
 80024ac:	fb82 1203 	smull	r1, r2, r2, r3
 80024b0:	1192      	asrs	r2, r2, #6
 80024b2:	17db      	asrs	r3, r3, #31
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5b 	bl	8002374 <delay_us>
			break;
 80024be:	e048      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_D0:
			HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, arg_int);
 80024c0:	7abb      	ldrb	r3, [r7, #10]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c8:	4824      	ldr	r0, [pc, #144]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 80024ca:	f004 fa43 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 80024ce:	e040      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_D1:
			HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, arg_int);
 80024d0:	7abb      	ldrb	r3, [r7, #10]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024d8:	4820      	ldr	r0, [pc, #128]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 80024da:	f004 fa3b 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 80024de:	e038      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_D2:
			HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, arg_int);
 80024e0:	7abb      	ldrb	r3, [r7, #10]
 80024e2:	461a      	mov	r2, r3
 80024e4:	2180      	movs	r1, #128	; 0x80
 80024e6:	481d      	ldr	r0, [pc, #116]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 80024e8:	f004 fa34 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 80024ec:	e031      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_D3:
			HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, arg_int);
 80024ee:	7abb      	ldrb	r3, [r7, #10]
 80024f0:	461a      	mov	r2, r3
 80024f2:	2140      	movs	r1, #64	; 0x40
 80024f4:	4819      	ldr	r0, [pc, #100]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 80024f6:	f004 fa2d 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 80024fa:	e02a      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_D4:
			HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, arg_int);
 80024fc:	7abb      	ldrb	r3, [r7, #10]
 80024fe:	461a      	mov	r2, r3
 8002500:	2120      	movs	r1, #32
 8002502:	4816      	ldr	r0, [pc, #88]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 8002504:	f004 fa26 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 8002508:	e023      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_D5:
			HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, arg_int);
 800250a:	7abb      	ldrb	r3, [r7, #10]
 800250c:	461a      	mov	r2, r3
 800250e:	2110      	movs	r1, #16
 8002510:	4812      	ldr	r0, [pc, #72]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 8002512:	f004 fa1f 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 8002516:	e01c      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_D6:
			HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, arg_int);
 8002518:	7abb      	ldrb	r3, [r7, #10]
 800251a:	461a      	mov	r2, r3
 800251c:	2108      	movs	r1, #8
 800251e:	480f      	ldr	r0, [pc, #60]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 8002520:	f004 fa18 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 8002524:	e015      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_D7:
			HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, arg_int);
 8002526:	7abb      	ldrb	r3, [r7, #10]
 8002528:	461a      	mov	r2, r3
 800252a:	2104      	movs	r1, #4
 800252c:	480b      	ldr	r0, [pc, #44]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 800252e:	f004 fa11 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 8002532:	e00e      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_DC:
			HAL_GPIO_WritePin(CD_GPIO_Port, CD_Pin, arg_int);
 8002534:	7abb      	ldrb	r3, [r7, #10]
 8002536:	461a      	mov	r2, r3
 8002538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253c:	4807      	ldr	r0, [pc, #28]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 800253e:	f004 fa09 	bl	8006954 <HAL_GPIO_WritePin>
			break;					// used as E2 for the SED1520
 8002542:	e006      	b.n	8002552 <u8g2_gpio_and_delay_stm32+0x1aa>
		case U8X8_MSG_GPIO_E: // 72
			HAL_GPIO_WritePin(WR0_GPIO_Port, WR0_Pin, arg_int);
 8002544:	7abb      	ldrb	r3, [r7, #10]
 8002546:	461a      	mov	r2, r3
 8002548:	2102      	movs	r1, #2
 800254a:	4804      	ldr	r0, [pc, #16]	; (800255c <u8g2_gpio_and_delay_stm32+0x1b4>)
 800254c:	f004 fa02 	bl	8006954 <HAL_GPIO_WritePin>
			break;
 8002550:	bf00      	nop
	}
	return 1;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021800 	.word	0x40021800
 8002560:	cccccccd 	.word	0xcccccccd
 8002564:	10624dd3 	.word	0x10624dd3

08002568 <HAL_TIM_IC_CaptureCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// CAPTURE TIME BETWEEN TWO PULSES
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11 && valid_for_capturing == 1) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d14c      	bne.n	8002614 <HAL_TIM_IC_CaptureCallback+0xac>
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d148      	bne.n	8002614 <HAL_TIM_IC_CaptureCallback+0xac>
		Difference = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002582:	2100      	movs	r1, #0
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f005 ff6f 	bl	8008468 <HAL_TIM_ReadCapturedValue>
 800258a:	4603      	mov	r3, r0
 800258c:	2200      	movs	r2, #0
 800258e:	461c      	mov	r4, r3
 8002590:	4615      	mov	r5, r2
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002594:	e9c3 4500 	strd	r4, r5, [r3]
		add_element(round(COEFFICIENT*(double)(Difference)/TIMCLOCK));
 8002598:	a321      	add	r3, pc, #132	; (adr r3, 8002620 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fd fff3 	bl	800058c <__aeabi_ul2d>
 80025a6:	4604      	mov	r4, r0
 80025a8:	460d      	mov	r5, r1
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fd fff2 	bl	800059c <__aeabi_l2d>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4620      	mov	r0, r4
 80025be:	4629      	mov	r1, r5
 80025c0:	f7fe f81a 	bl	80005f8 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4614      	mov	r4, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	a316      	add	r3, pc, #88	; (adr r3, 8002628 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7fd ffd9 	bl	800058c <__aeabi_ul2d>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fe f933 	bl	800084c <__aeabi_ddiv>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	ec43 2b17 	vmov	d7, r2, r3
 80025ee:	eeb0 0a47 	vmov.f32	s0, s14
 80025f2:	eef0 0a67 	vmov.f32	s1, s15
 80025f6:	f009 fa95 	bl	800bb24 <round>
 80025fa:	ec53 2b10 	vmov	r2, r3, d0
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe faa9 	bl	8000b58 <__aeabi_d2iz>
 8002606:	4603      	mov	r3, r0
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f9ed 	bl	80019e8 <add_element>
		valid_for_capturing = 0;
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
	}
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bdb0      	pop	{r4, r5, r7, pc}
 800261c:	f3af 8000 	nop.w
 8002620:	3b9aca00 	.word	0x3b9aca00
 8002624:	00000000 	.word	0x00000000
 8002628:	0501bd00 	.word	0x0501bd00
 800262c:	00000000 	.word	0x00000000
 8002630:	40014800 	.word	0x40014800
 8002634:	20000000 	.word	0x20000000
 8002638:	20000948 	.word	0x20000948

0800263c <HAL_TIM_PWM_PulseFinishedCallback>:

// stop generating ultra-sound
uint8_t is_period_started = 0;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d109      	bne.n	8002662 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
		__HAL_TIM_SET_COUNTER(&htim11, 0);
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	625a      	str	r2, [r3, #36]	; 0x24
		valid_for_capturing = 1;
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
		is_period_started = 0;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_WritePin(Biased_A_PWM_GPIO_Port, Biased_A_PWM_Pin, GPIO_PIN_RESET);
	}

	if (htim->Instance == TIM13 && is_period_started) {
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d107      	bne.n	800267c <HAL_TIM_PWM_PulseFinishedCallback+0x40>
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_TIM_PWM_PulseFinishedCallback+0x40>
		HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8002674:	2100      	movs	r1, #0
 8002676:	4808      	ldr	r0, [pc, #32]	; (8002698 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8002678:	f005 f90e 	bl	8007898 <HAL_TIM_PWM_Start>
	}
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40000800 	.word	0x40000800
 8002688:	20000868 	.word	0x20000868
 800268c:	20000000 	.word	0x20000000
 8002690:	20000dc0 	.word	0x20000dc0
 8002694:	40001c00 	.word	0x40001c00
 8002698:	200008f8 	.word	0x200008f8

0800269c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026a0:	f003 fe5c 	bl	800635c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026a4:	f000 f882 	bl	80027ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a8:	f000 faf4 	bl	8002c94 <MX_GPIO_Init>
  MX_TIM10_Init();
 80026ac:	f000 f9c2 	bl	8002a34 <MX_TIM10_Init>
  MX_TIM9_Init();
 80026b0:	f000 f95c 	bl	800296c <MX_TIM9_Init>
  MX_TIM4_Init();
 80026b4:	f000 f8e4 	bl	8002880 <MX_TIM4_Init>
  MX_TIM11_Init();
 80026b8:	f000 fa0a 	bl	8002ad0 <MX_TIM11_Init>
  MX_TIM13_Init();
 80026bc:	f000 fa50 	bl	8002b60 <MX_TIM13_Init>
  MX_TIM14_Init();
 80026c0:	f000 fa9a 	bl	8002bf8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
//  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80026c4:	4b29      	ldr	r3, [pc, #164]	; (800276c <main+0xd0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	4b28      	ldr	r3, [pc, #160]	; (800276c <main+0xd0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80026d4:	2104      	movs	r1, #4
 80026d6:	4825      	ldr	r0, [pc, #148]	; (800276c <main+0xd0>)
 80026d8:	f005 f8de 	bl	8007898 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 80026dc:	2104      	movs	r1, #4
 80026de:	4823      	ldr	r0, [pc, #140]	; (800276c <main+0xd0>)
 80026e0:	f004 ff6a 	bl	80075b8 <HAL_TIM_OC_Start_IT>

  // generate 1.5 MHz PWM
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80026e4:	2100      	movs	r1, #0
 80026e6:	4822      	ldr	r0, [pc, #136]	; (8002770 <main+0xd4>)
 80026e8:	f005 f8d6 	bl	8007898 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim13, TIM_CHANNEL_1);
 80026ec:	2100      	movs	r1, #0
 80026ee:	4820      	ldr	r0, [pc, #128]	; (8002770 <main+0xd4>)
 80026f0:	f004 ff62 	bl	80075b8 <HAL_TIM_OC_Start_IT>

  HAL_TIM_OC_Start_IT(&htim14, TIM_CHANNEL_1);
 80026f4:	2100      	movs	r1, #0
 80026f6:	481f      	ldr	r0, [pc, #124]	; (8002774 <main+0xd8>)
 80026f8:	f004 ff5e 	bl	80075b8 <HAL_TIM_OC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim11, TIM_CHANNEL_1);
 80026fc:	2100      	movs	r1, #0
 80026fe:	481e      	ldr	r0, [pc, #120]	; (8002778 <main+0xdc>)
 8002700:	f005 fa5c 	bl	8007bbc <HAL_TIM_IC_Start_IT>
//	HAL_GPIO_WritePin(PWM_simulation_2_GPIO_Port, PWM_simulation_2_Pin, GPIO_PIN_SET);
//	HAL_Delay(1);
//	HAL_GPIO_WritePin(PWM_simulation_2_GPIO_Port, PWM_simulation_2_Pin, GPIO_PIN_RESET);
//	HAL_Delay(1);
//  }
  HAL_Delay(1500);
 8002704:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002708:	f003 fe6a 	bl	80063e0 <HAL_Delay>
//  for (size_t i = 0; i < array_size; ++i) {
//    sprintf(current_messages[i], " %s%d%d%d,%d%d%dмм", messages[i], data_array[i][0], data_array[i][1], data_array[i][2], data_array[i][3], data_array[i][4], data_array[i][5]);
//  }
  u8g2_Setup_uc1608_240x128_2(&u8g2, U8G2_R0, u8x8_byte_8bit_8080mode, u8g2_gpio_and_delay_stm32); //u8x8_byte_8bit_6800mode
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <main+0xe0>)
 800270e:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <main+0xe4>)
 8002710:	491c      	ldr	r1, [pc, #112]	; (8002784 <main+0xe8>)
 8002712:	481d      	ldr	r0, [pc, #116]	; (8002788 <main+0xec>)
 8002714:	f001 ff38 	bl	8004588 <u8g2_Setup_uc1608_240x128_2>
  // DISPLAY INITIALIZATION
  u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8002718:	481b      	ldr	r0, [pc, #108]	; (8002788 <main+0xec>)
 800271a:	f003 fd53 	bl	80061c4 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 800271e:	2100      	movs	r1, #0
 8002720:	4819      	ldr	r0, [pc, #100]	; (8002788 <main+0xec>)
 8002722:	f003 fd5e 	bl	80061e2 <u8x8_SetPowerSave>
  // START MENU WORK
  Menu_SetGenericWriteCallback(Generic_Write, &Menu_1);
 8002726:	4919      	ldr	r1, [pc, #100]	; (800278c <main+0xf0>)
 8002728:	4819      	ldr	r0, [pc, #100]	; (8002790 <main+0xf4>)
 800272a:	f001 f845 	bl	80037b8 <Menu_SetGenericWriteCallback>
  Menu_SetCurrentLayerTopMenu(&Menu_1);
 800272e:	4817      	ldr	r0, [pc, #92]	; (800278c <main+0xf0>)
 8002730:	f001 f806 	bl	8003740 <Menu_SetCurrentLayerTopMenu>
  Menu_Navigate(&Menu_1, Menu_GetCurrentLayerTopMenu());
 8002734:	f000 fff8 	bl	8003728 <Menu_GetCurrentLayerTopMenu>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	4813      	ldr	r0, [pc, #76]	; (800278c <main+0xf0>)
 800273e:	f001 f80f 	bl	8003760 <Menu_Navigate>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002742:	f006 fbf7 	bl	8008f34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rewriteDisplay */
  rewriteDisplayHandle = osThreadNew(rewriteDisplayFunction, NULL, &rewriteDisplay_attributes);
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <main+0xf8>)
 8002748:	2100      	movs	r1, #0
 800274a:	4813      	ldr	r0, [pc, #76]	; (8002798 <main+0xfc>)
 800274c:	f006 fc3c 	bl	8008fc8 <osThreadNew>
 8002750:	4603      	mov	r3, r0
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <main+0x100>)
 8002754:	6013      	str	r3, [r2, #0]

  /* creation of buttonListen */
  buttonListenHandle = osThreadNew(buttonListenFunction, NULL, &buttonListen_attributes);
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <main+0x104>)
 8002758:	2100      	movs	r1, #0
 800275a:	4812      	ldr	r0, [pc, #72]	; (80027a4 <main+0x108>)
 800275c:	f006 fc34 	bl	8008fc8 <osThreadNew>
 8002760:	4603      	mov	r3, r0
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <main+0x10c>)
 8002764:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002766:	f006 fc09 	bl	8008f7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800276a:	e7fe      	b.n	800276a <main+0xce>
 800276c:	20000790 	.word	0x20000790
 8002770:	200008b0 	.word	0x200008b0
 8002774:	200008f8 	.word	0x200008f8
 8002778:	20000868 	.word	0x20000868
 800277c:	080023a9 	.word	0x080023a9
 8002780:	08005bc5 	.word	0x08005bc5
 8002784:	0801424c 	.word	0x0801424c
 8002788:	20000d1c 	.word	0x20000d1c
 800278c:	0800faa4 	.word	0x0800faa4
 8002790:	08001435 	.word	0x08001435
 8002794:	0800fa5c 	.word	0x0800fa5c
 8002798:	08002f01 	.word	0x08002f01
 800279c:	20000940 	.word	0x20000940
 80027a0:	0800fa80 	.word	0x0800fa80
 80027a4:	08003589 	.word	0x08003589
 80027a8:	20000944 	.word	0x20000944

080027ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b094      	sub	sp, #80	; 0x50
 80027b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027b2:	f107 0320 	add.w	r3, r7, #32
 80027b6:	2230      	movs	r2, #48	; 0x30
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f00a fe9f 	bl	800d4fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <SystemClock_Config+0xcc>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <SystemClock_Config+0xcc>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6413      	str	r3, [r2, #64]	; 0x40
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <SystemClock_Config+0xcc>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <SystemClock_Config+0xd0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a21      	ldr	r2, [pc, #132]	; (800287c <SystemClock_Config+0xd0>)
 80027f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	4b1f      	ldr	r3, [pc, #124]	; (800287c <SystemClock_Config+0xd0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002808:	2301      	movs	r3, #1
 800280a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800280c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002812:	2302      	movs	r3, #2
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800281c:	2306      	movs	r3, #6
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002820:	23a8      	movs	r3, #168	; 0xa8
 8002822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002824:	2302      	movs	r3, #2
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002828:	2304      	movs	r3, #4
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800282c:	f107 0320 	add.w	r3, r7, #32
 8002830:	4618      	mov	r0, r3
 8002832:	f004 f8a9 	bl	8006988 <HAL_RCC_OscConfig>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800283c:	f000 ff62 	bl	8003704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002840:	230f      	movs	r3, #15
 8002842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002844:	2302      	movs	r3, #2
 8002846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800284c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002856:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	2105      	movs	r1, #5
 800285e:	4618      	mov	r0, r3
 8002860:	f004 fb0a 	bl	8006e78 <HAL_RCC_ClockConfig>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800286a:	f000 ff4b 	bl	8003704 <Error_Handler>
  }
}
 800286e:	bf00      	nop
 8002870:	3750      	adds	r7, #80	; 0x50
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40007000 	.word	0x40007000

08002880 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08e      	sub	sp, #56	; 0x38
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002894:	f107 0320 	add.w	r3, r7, #32
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
 80028ac:	615a      	str	r2, [r3, #20]
 80028ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028b0:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <MX_TIM4_Init+0xe4>)
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <MX_TIM4_Init+0xe8>)
 80028b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80028b6:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <MX_TIM4_Init+0xe4>)
 80028b8:	2253      	movs	r2, #83	; 0x53
 80028ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <MX_TIM4_Init+0xe4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <MX_TIM4_Init+0xe4>)
 80028c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <MX_TIM4_Init+0xe4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <MX_TIM4_Init+0xe4>)
 80028d2:	2280      	movs	r2, #128	; 0x80
 80028d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028d6:	4823      	ldr	r0, [pc, #140]	; (8002964 <MX_TIM4_Init+0xe4>)
 80028d8:	f004 fdae 	bl	8007438 <HAL_TIM_Base_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80028e2:	f000 ff0f 	bl	8003704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028f0:	4619      	mov	r1, r3
 80028f2:	481c      	ldr	r0, [pc, #112]	; (8002964 <MX_TIM4_Init+0xe4>)
 80028f4:	f005 fcf0 	bl	80082d8 <HAL_TIM_ConfigClockSource>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80028fe:	f000 ff01 	bl	8003704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002902:	4818      	ldr	r0, [pc, #96]	; (8002964 <MX_TIM4_Init+0xe4>)
 8002904:	f004 ff6e 	bl	80077e4 <HAL_TIM_PWM_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800290e:	f000 fef9 	bl	8003704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800291a:	f107 0320 	add.w	r3, r7, #32
 800291e:	4619      	mov	r1, r3
 8002920:	4810      	ldr	r0, [pc, #64]	; (8002964 <MX_TIM4_Init+0xe4>)
 8002922:	f006 fa33 	bl	8008d8c <HAL_TIMEx_MasterConfigSynchronization>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800292c:	f000 feea 	bl	8003704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002930:	2360      	movs	r3, #96	; 0x60
 8002932:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 9;
 8002934:	2309      	movs	r3, #9
 8002936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800293c:	2304      	movs	r3, #4
 800293e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2204      	movs	r2, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4807      	ldr	r0, [pc, #28]	; (8002964 <MX_TIM4_Init+0xe4>)
 8002948:	f005 fc04 	bl	8008154 <HAL_TIM_PWM_ConfigChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002952:	f000 fed7 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002956:	4803      	ldr	r0, [pc, #12]	; (8002964 <MX_TIM4_Init+0xe4>)
 8002958:	f001 f85e 	bl	8003a18 <HAL_TIM_MspPostInit>

}
 800295c:	bf00      	nop
 800295e:	3738      	adds	r7, #56	; 0x38
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000790 	.word	0x20000790
 8002968:	40000800 	.word	0x40000800

0800296c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002972:	f107 0320 	add.w	r3, r7, #32
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]
 800298e:	615a      	str	r2, [r3, #20]
 8002990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <MX_TIM9_Init+0xc0>)
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <MX_TIM9_Init+0xc4>)
 8002996:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <MX_TIM9_Init+0xc0>)
 800299a:	2253      	movs	r2, #83	; 0x53
 800299c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <MX_TIM9_Init+0xc0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <MX_TIM9_Init+0xc0>)
 80029a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029aa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ac:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <MX_TIM9_Init+0xc0>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <MX_TIM9_Init+0xc0>)
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80029b8:	481c      	ldr	r0, [pc, #112]	; (8002a2c <MX_TIM9_Init+0xc0>)
 80029ba:	f004 fd3d 	bl	8007438 <HAL_TIM_Base_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80029c4:	f000 fe9e 	bl	8003704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80029ce:	f107 0320 	add.w	r3, r7, #32
 80029d2:	4619      	mov	r1, r3
 80029d4:	4815      	ldr	r0, [pc, #84]	; (8002a2c <MX_TIM9_Init+0xc0>)
 80029d6:	f005 fc7f 	bl	80082d8 <HAL_TIM_ConfigClockSource>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80029e0:	f000 fe90 	bl	8003704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80029e4:	4811      	ldr	r0, [pc, #68]	; (8002a2c <MX_TIM9_Init+0xc0>)
 80029e6:	f004 fefd 	bl	80077e4 <HAL_TIM_PWM_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80029f0:	f000 fe88 	bl	8003704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f4:	2360      	movs	r3, #96	; 0x60
 80029f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80029f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002a02:	2304      	movs	r3, #4
 8002a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4807      	ldr	r0, [pc, #28]	; (8002a2c <MX_TIM9_Init+0xc0>)
 8002a0e:	f005 fba1 	bl	8008154 <HAL_TIM_PWM_ConfigChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002a18:	f000 fe74 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <MX_TIM9_Init+0xc0>)
 8002a1e:	f000 fffb 	bl	8003a18 <HAL_TIM_MspPostInit>

}
 8002a22:	bf00      	nop
 8002a24:	3730      	adds	r7, #48	; 0x30
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200007d8 	.word	0x200007d8
 8002a30:	40014000 	.word	0x40014000

08002a34 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
 8002a48:	615a      	str	r2, [r3, #20]
 8002a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <MX_TIM10_Init+0x98>)
 8002a50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002a54:	2253      	movs	r2, #83	; 0x53
 8002a56:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a64:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002a72:	4815      	ldr	r0, [pc, #84]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002a74:	f004 fce0 	bl	8007438 <HAL_TIM_Base_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002a7e:	f000 fe41 	bl	8003704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002a82:	4811      	ldr	r0, [pc, #68]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002a84:	f004 feae 	bl	80077e4 <HAL_TIM_PWM_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002a8e:	f000 fe39 	bl	8003704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a92:	2360      	movs	r3, #96	; 0x60
 8002a94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002aaa:	f005 fb53 	bl	8008154 <HAL_TIM_PWM_ConfigChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002ab4:	f000 fe26 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002ab8:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <MX_TIM10_Init+0x94>)
 8002aba:	f000 ffad 	bl	8003a18 <HAL_TIM_MspPostInit>

}
 8002abe:	bf00      	nop
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000820 	.word	0x20000820
 8002acc:	40014400 	.word	0x40014400

08002ad0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <MX_TIM11_Init+0x8c>)
 8002ae6:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002afa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b08:	4813      	ldr	r0, [pc, #76]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002b0a:	f004 fc95 	bl	8007438 <HAL_TIM_Base_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8002b14:	f000 fdf6 	bl	8003704 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8002b18:	480f      	ldr	r0, [pc, #60]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002b1a:	f004 fff5 	bl	8007b08 <HAL_TIM_IC_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8002b24:	f000 fdee 	bl	8003704 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b38:	463b      	mov	r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4806      	ldr	r0, [pc, #24]	; (8002b58 <MX_TIM11_Init+0x88>)
 8002b40:	f005 fa6c 	bl	800801c <HAL_TIM_IC_ConfigChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8002b4a:	f000 fddb 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000868 	.word	0x20000868
 8002b5c:	40014800 	.word	0x40014800

08002b60 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
 8002b74:	615a      	str	r2, [r3, #20]
 8002b76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002b7a:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <MX_TIM13_Init+0x94>)
 8002b7c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 56-1;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002b8c:	2237      	movs	r2, #55	; 0x37
 8002b8e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002b9c:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002b9e:	f004 fc4b 	bl	8007438 <HAL_TIM_Base_Init>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8002ba8:	f000 fdac 	bl	8003704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002bac:	4810      	ldr	r0, [pc, #64]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002bae:	f004 fe19 	bl	80077e4 <HAL_TIM_PWM_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8002bb8:	f000 fda4 	bl	8003704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbc:	2360      	movs	r3, #96	; 0x60
 8002bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 28;
 8002bc0:	231c      	movs	r3, #28
 8002bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002bc8:	2304      	movs	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002bd4:	f005 fabe 	bl	8008154 <HAL_TIM_PWM_ConfigChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8002bde:	f000 fd91 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002be2:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <MX_TIM13_Init+0x90>)
 8002be4:	f000 ff18 	bl	8003a18 <HAL_TIM_MspPostInit>

}
 8002be8:	bf00      	nop
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200008b0 	.word	0x200008b0
 8002bf4:	40001c00 	.word	0x40001c00

08002bf8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	615a      	str	r2, [r3, #20]
 8002c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <MX_TIM14_Init+0x98>)
 8002c14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c18:	2253      	movs	r2, #83	; 0x53
 8002c1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c28:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2a:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002c36:	4815      	ldr	r0, [pc, #84]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c38:	f004 fbfe 	bl	8007438 <HAL_TIM_Base_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002c42:	f000 fd5f 	bl	8003704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002c46:	4811      	ldr	r0, [pc, #68]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c48:	f004 fdcc 	bl	80077e4 <HAL_TIM_PWM_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002c52:	f000 fd57 	bl	8003704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c56:	2360      	movs	r3, #96	; 0x60
 8002c58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c62:	2304      	movs	r3, #4
 8002c64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4807      	ldr	r0, [pc, #28]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c6e:	f005 fa71 	bl	8008154 <HAL_TIM_PWM_ConfigChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002c78:	f000 fd44 	bl	8003704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002c7c:	4803      	ldr	r0, [pc, #12]	; (8002c8c <MX_TIM14_Init+0x94>)
 8002c7e:	f000 fecb 	bl	8003a18 <HAL_TIM_MspPostInit>

}
 8002c82:	bf00      	nop
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200008f8 	.word	0x200008f8
 8002c90:	40002000 	.word	0x40002000

08002c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	4b8c      	ldr	r3, [pc, #560]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a8b      	ldr	r2, [pc, #556]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002cb4:	f043 0310 	orr.w	r3, r3, #16
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b89      	ldr	r3, [pc, #548]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
 8002cca:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a84      	ldr	r2, [pc, #528]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	4b7e      	ldr	r3, [pc, #504]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a7d      	ldr	r2, [pc, #500]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002cec:	f043 0320 	orr.w	r3, r3, #32
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b7b      	ldr	r3, [pc, #492]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	4b77      	ldr	r3, [pc, #476]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a76      	ldr	r2, [pc, #472]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b74      	ldr	r3, [pc, #464]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a6f      	ldr	r2, [pc, #444]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a68      	ldr	r2, [pc, #416]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b62      	ldr	r3, [pc, #392]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a61      	ldr	r2, [pc, #388]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b5f      	ldr	r3, [pc, #380]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a5a      	ldr	r2, [pc, #360]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b58      	ldr	r3, [pc, #352]	; (8002ee0 <MX_GPIO_Init+0x24c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, WR0_Pin|DB7_Pin|DB6_Pin|DB5_Pin
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f249 31fe 	movw	r1, #37886	; 0x93fe
 8002d90:	4854      	ldr	r0, [pc, #336]	; (8002ee4 <MX_GPIO_Init+0x250>)
 8002d92:	f003 fddf 	bl	8006954 <HAL_GPIO_WritePin>
                          |DB4_Pin|DB3_Pin|DB2_Pin|DB1_Pin
                          |DB0_Pin|WR1_Pin|CD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Biased_A_PWM_GPIO_Port, Biased_A_PWM_Pin, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d9c:	4852      	ldr	r0, [pc, #328]	; (8002ee8 <MX_GPIO_Init+0x254>)
 8002d9e:	f003 fdd9 	bl	8006954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL4_Pin|COL3_Pin|COL2_Pin|COL1_Pin, GPIO_PIN_RESET);
 8002da2:	2200      	movs	r2, #0
 8002da4:	f44f 41aa 	mov.w	r1, #21760	; 0x5500
 8002da8:	4850      	ldr	r0, [pc, #320]	; (8002eec <MX_GPIO_Init+0x258>)
 8002daa:	f003 fdd3 	bl	8006954 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE6
                           PE7 PE8 PE10 PE11
                           PE12 PE13 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8002dae:	f64f 53df 	movw	r3, #64991	; 0xfddf
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db4:	2303      	movs	r3, #3
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4849      	ldr	r0, [pc, #292]	; (8002ee8 <MX_GPIO_Init+0x254>)
 8002dc4:	f003 fc12 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8002dc8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4844      	ldr	r0, [pc, #272]	; (8002ef0 <MX_GPIO_Init+0x25c>)
 8002dde:	f003 fc05 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002de2:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002de8:	2303      	movs	r3, #3
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df4:	4619      	mov	r1, r3
 8002df6:	483f      	ldr	r0, [pc, #252]	; (8002ef4 <MX_GPIO_Init+0x260>)
 8002df8:	f003 fbf8 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002dfc:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e02:	2303      	movs	r3, #3
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4839      	ldr	r0, [pc, #228]	; (8002ef8 <MX_GPIO_Init+0x264>)
 8002e12:	f003 fbeb 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002e16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4834      	ldr	r0, [pc, #208]	; (8002efc <MX_GPIO_Init+0x268>)
 8002e2c:	f003 fbde 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG10 PG11 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8002e30:	f646 4301 	movw	r3, #27649	; 0x6c01
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e36:	2303      	movs	r3, #3
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e42:	4619      	mov	r1, r3
 8002e44:	4827      	ldr	r0, [pc, #156]	; (8002ee4 <MX_GPIO_Init+0x250>)
 8002e46:	f003 fbd1 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : WR0_Pin DB7_Pin DB6_Pin DB5_Pin
                           DB4_Pin DB3_Pin DB2_Pin DB1_Pin
                           DB0_Pin WR1_Pin CD_Pin */
  GPIO_InitStruct.Pin = WR0_Pin|DB7_Pin|DB6_Pin|DB5_Pin
 8002e4a:	f249 33fe 	movw	r3, #37886	; 0x93fe
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DB4_Pin|DB3_Pin|DB2_Pin|DB1_Pin
                          |DB0_Pin|WR1_Pin|CD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e50:	2301      	movs	r3, #1
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e60:	4619      	mov	r1, r3
 8002e62:	4820      	ldr	r0, [pc, #128]	; (8002ee4 <MX_GPIO_Init+0x250>)
 8002e64:	f003 fbc2 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Biased_A_PWM_Pin */
  GPIO_InitStruct.Pin = Biased_A_PWM_Pin;
 8002e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Biased_A_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <MX_GPIO_Init+0x254>)
 8002e82:	f003 fbb3 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : COL4_Pin COL3_Pin COL2_Pin COL1_Pin */
  GPIO_InitStruct.Pin = COL4_Pin|COL3_Pin|COL2_Pin|COL1_Pin;
 8002e86:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2300      	movs	r3, #0
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4813      	ldr	r0, [pc, #76]	; (8002eec <MX_GPIO_Init+0x258>)
 8002ea0:	f003 fba4 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD11 PD1 PD2
                           PD3 PD5 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_1|GPIO_PIN_2
 8002ea4:	f640 23ae 	movw	r3, #2734	; 0xaae
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	480c      	ldr	r0, [pc, #48]	; (8002eec <MX_GPIO_Init+0x258>)
 8002eba:	f003 fb97 	bl	80065ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin;
 8002ebe:	f248 0351 	movw	r3, #32849	; 0x8051
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4806      	ldr	r0, [pc, #24]	; (8002eec <MX_GPIO_Init+0x258>)
 8002ed4:	f003 fb8a 	bl	80065ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ed8:	bf00      	nop
 8002eda:	3738      	adds	r7, #56	; 0x38
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	40021400 	.word	0x40021400
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40020400 	.word	0x40020400

08002f00 <rewriteDisplayFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_rewriteDisplayFunction */
void rewriteDisplayFunction(void *argument)
{
 8002f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f02:	b08f      	sub	sp, #60	; 0x3c
 8002f04:	af06      	add	r7, sp, #24
 8002f06:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
//	u8g2_ClearBuffer(&u8g2);
//	u8g2_ClearDisplay(&u8g2);
  /* Infinite loop */
	for(;;){
		  switch(ButtonState) {
 8002f08:	4ba8      	ldr	r3, [pc, #672]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	f200 8322 	bhi.w	8003556 <rewriteDisplayFunction+0x656>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <rewriteDisplayFunction+0x18>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08003541 	.word	0x08003541
 8002f1c:	08002f3d 	.word	0x08002f3d
 8002f20:	08002f5b 	.word	0x08002f5b
 8002f24:	08002f79 	.word	0x08002f79
 8002f28:	08003007 	.word	0x08003007
 8002f2c:	08003027 	.word	0x08003027
 8002f30:	08003089 	.word	0x08003089
 8002f34:	080030e5 	.word	0x080030e5
 8002f38:	08003311 	.word	0x08003311
		  	  	// MOVE FORWARD IN MENU
				case 1:
					Menu_Navigate(Menu_GetCurrentMenu()->Next, Menu_GetCurrentLayerTopMenu()); // Next, Child, Parent, Previous
 8002f3c:	f000 fbe8 	bl	8003710 <Menu_GetCurrentMenu>
 8002f40:	4603      	mov	r3, r0
 8002f42:	681c      	ldr	r4, [r3, #0]
 8002f44:	f000 fbf0 	bl	8003728 <Menu_GetCurrentLayerTopMenu>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f000 fc07 	bl	8003760 <Menu_Navigate>
					ButtonState = 0;
 8002f52:	4b96      	ldr	r3, [pc, #600]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
					break;
 8002f58:	e308      	b.n	800356c <rewriteDisplayFunction+0x66c>
				// MOVE BACKWARDS IN MENU
				case 2:
					Menu_Navigate(Menu_GetCurrentMenu()->Previous, Menu_GetCurrentLayerTopMenu()); // Next, Child, Parent, Previous
 8002f5a:	f000 fbd9 	bl	8003710 <Menu_GetCurrentMenu>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	685c      	ldr	r4, [r3, #4]
 8002f62:	f000 fbe1 	bl	8003728 <Menu_GetCurrentLayerTopMenu>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f000 fbf8 	bl	8003760 <Menu_Navigate>
					ButtonState = 0;
 8002f70:	4b8e      	ldr	r3, [pc, #568]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
					break;
 8002f76:	e2f9      	b.n	800356c <rewriteDisplayFunction+0x66c>
				// MOVE IN CHILD ELEMENT, PROGRESS (FOR GRAPHS AND 2 MENU DETERMINATION BREAK U8G2 RULES)
				case 3:
					if (Menu_GetCurrentMenu() == &Menu_3) {
 8002f78:	f000 fbca 	bl	8003710 <Menu_GetCurrentMenu>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4a8c      	ldr	r2, [pc, #560]	; (80031b0 <rewriteDisplayFunction+0x2b0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10b      	bne.n	8002f9c <rewriteDisplayFunction+0x9c>
						u8g2_FirstPage(&u8g2);
 8002f84:	488b      	ldr	r0, [pc, #556]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 8002f86:	f001 f98a 	bl	800429e <u8g2_FirstPage>
						do {
							displayGraphPoints();
 8002f8a:	f7fe fd55 	bl	8001a38 <displayGraphPoints>
						} while (u8g2_NextPage(&u8g2));
 8002f8e:	4889      	ldr	r0, [pc, #548]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 8002f90:	f001 f999 	bl	80042c6 <u8g2_NextPage>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f7      	bne.n	8002f8a <rewriteDisplayFunction+0x8a>
						break;
 8002f9a:	e2e7      	b.n	800356c <rewriteDisplayFunction+0x66c>
					} else if (Menu_GetCurrentMenu() == &Menu_2) {
 8002f9c:	f000 fbb8 	bl	8003710 <Menu_GetCurrentMenu>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4a85      	ldr	r2, [pc, #532]	; (80031b8 <rewriteDisplayFunction+0x2b8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10b      	bne.n	8002fc0 <rewriteDisplayFunction+0xc0>
						u8g2_FirstPage(&u8g2);
 8002fa8:	4882      	ldr	r0, [pc, #520]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 8002faa:	f001 f978 	bl	800429e <u8g2_FirstPage>
						do {
							DrawGraphChangingLength();
 8002fae:	f7fe f91f 	bl	80011f0 <DrawGraphChangingLength>
						} while (u8g2_NextPage(&u8g2));
 8002fb2:	4880      	ldr	r0, [pc, #512]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 8002fb4:	f001 f987 	bl	80042c6 <u8g2_NextPage>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f7      	bne.n	8002fae <rewriteDisplayFunction+0xae>
						break;
 8002fbe:	e2d5      	b.n	800356c <rewriteDisplayFunction+0x66c>
					} else if (Menu_GetCurrentMenu()->Parent == &Menu_1) {
 8002fc0:	f000 fba6 	bl	8003710 <Menu_GetCurrentMenu>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a7c      	ldr	r2, [pc, #496]	; (80031bc <rewriteDisplayFunction+0x2bc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10b      	bne.n	8002fe6 <rewriteDisplayFunction+0xe6>
						u8g2_FirstPage(&u8g2);
 8002fce:	4879      	ldr	r0, [pc, #484]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 8002fd0:	f001 f965 	bl	800429e <u8g2_FirstPage>
						do {
							DrawStateConstatntLength();
 8002fd4:	f7fe ffc8 	bl	8001f68 <DrawStateConstatntLength>
						} while (u8g2_NextPage(&u8g2));
 8002fd8:	4876      	ldr	r0, [pc, #472]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 8002fda:	f001 f974 	bl	80042c6 <u8g2_NextPage>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f7      	bne.n	8002fd4 <rewriteDisplayFunction+0xd4>
						break;
 8002fe4:	e2c2      	b.n	800356c <rewriteDisplayFunction+0x66c>
					} else {
						Menu_Navigate(Menu_GetCurrentMenu()->Child, Menu_GetCurrentLayerTopMenu()->Child); // Next, Child, Parent, Previous
 8002fe6:	f000 fb93 	bl	8003710 <Menu_GetCurrentMenu>
 8002fea:	4603      	mov	r3, r0
 8002fec:	68dc      	ldr	r4, [r3, #12]
 8002fee:	f000 fb9b 	bl	8003728 <Menu_GetCurrentLayerTopMenu>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f000 fbb1 	bl	8003760 <Menu_Navigate>
					}
					ButtonState = 0;
 8002ffe:	4b6b      	ldr	r3, [pc, #428]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
					break;
 8003004:	e2b2      	b.n	800356c <rewriteDisplayFunction+0x66c>
				// MOVE INTO PARENT ELEMENT, GET BACK IN PROGRESSION
				case 4:
					Menu_Navigate(Menu_GetCurrentMenu()->Parent, Menu_GetCurrentLayerTopMenu()->Parent); // Next, Child, Parent, Previous
 8003006:	f000 fb83 	bl	8003710 <Menu_GetCurrentMenu>
 800300a:	4603      	mov	r3, r0
 800300c:	689c      	ldr	r4, [r3, #8]
 800300e:	f000 fb8b 	bl	8003728 <Menu_GetCurrentLayerTopMenu>
 8003012:	4603      	mov	r3, r0
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4619      	mov	r1, r3
 8003018:	4620      	mov	r0, r4
 800301a:	f000 fba1 	bl	8003760 <Menu_Navigate>
					ButtonState = 0;
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
					break;
 8003024:	e2a2      	b.n	800356c <rewriteDisplayFunction+0x66c>
				// IF GRAPH - MAKE SHARPER, ELSE IF FIRST MENU - MOVE CHANGEBLE POSITION TO LOWER
				case 5:
					if (Menu_GetCurrentMenu() == &Menu_3) {
 8003026:	f000 fb73 	bl	8003710 <Menu_GetCurrentMenu>
 800302a:	4603      	mov	r3, r0
 800302c:	4a60      	ldr	r2, [pc, #384]	; (80031b0 <rewriteDisplayFunction+0x2b0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d113      	bne.n	800305a <rewriteDisplayFunction+0x15a>
						if(current_multiplier_index < max_multiplier_index) {
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <rewriteDisplayFunction+0x2c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2208      	movs	r2, #8
 8003038:	4293      	cmp	r3, r2
 800303a:	da0a      	bge.n	8003052 <rewriteDisplayFunction+0x152>
							current_multiplier_index++;
 800303c:	4b60      	ldr	r3, [pc, #384]	; (80031c0 <rewriteDisplayFunction+0x2c0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	4a5f      	ldr	r2, [pc, #380]	; (80031c0 <rewriteDisplayFunction+0x2c0>)
 8003044:	6013      	str	r3, [r2, #0]
							u8g2_ClearBuffer(&u8g2);
 8003046:	485b      	ldr	r0, [pc, #364]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 8003048:	f001 f890 	bl	800416c <u8g2_ClearBuffer>
							u8g2_SendBuffer(&u8g2);
 800304c:	4859      	ldr	r0, [pc, #356]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 800304e:	f001 f900 	bl	8004252 <u8g2_SendBuffer>
						}
						ButtonState = 3;
 8003052:	4b56      	ldr	r3, [pc, #344]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 8003054:	2203      	movs	r2, #3
 8003056:	701a      	strb	r2, [r3, #0]
						if (menu1position < max_menu_position) {
							menu1position += 1;
						}
						ButtonState = 0;
					}
					break;
 8003058:	e281      	b.n	800355e <rewriteDisplayFunction+0x65e>
					} else if (Menu_GetCurrentMenu()->Parent == &Menu_1) {
 800305a:	f000 fb59 	bl	8003710 <Menu_GetCurrentMenu>
 800305e:	4603      	mov	r3, r0
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4a56      	ldr	r2, [pc, #344]	; (80031bc <rewriteDisplayFunction+0x2bc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	f040 827a 	bne.w	800355e <rewriteDisplayFunction+0x65e>
						if (menu1position < max_menu_position) {
 800306a:	2305      	movs	r3, #5
 800306c:	461a      	mov	r2, r3
 800306e:	4b55      	ldr	r3, [pc, #340]	; (80031c4 <rewriteDisplayFunction+0x2c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	dd04      	ble.n	8003080 <rewriteDisplayFunction+0x180>
							menu1position += 1;
 8003076:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <rewriteDisplayFunction+0x2c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <rewriteDisplayFunction+0x2c4>)
 800307e:	6013      	str	r3, [r2, #0]
						ButtonState = 0;
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
					break;
 8003086:	e26a      	b.n	800355e <rewriteDisplayFunction+0x65e>
				// IF GRAPH - MAKE SMOOTHER, IF FIRST MENU - MOVE TO HIGHER POSITION
				case 6:
					if (Menu_GetCurrentMenu() == &Menu_3) {
 8003088:	f000 fb42 	bl	8003710 <Menu_GetCurrentMenu>
 800308c:	4603      	mov	r3, r0
 800308e:	4a48      	ldr	r2, [pc, #288]	; (80031b0 <rewriteDisplayFunction+0x2b0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d112      	bne.n	80030ba <rewriteDisplayFunction+0x1ba>
						if (current_multiplier_index > 0) { // check if this is not equal to zero
 8003094:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <rewriteDisplayFunction+0x2c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	dd0a      	ble.n	80030b2 <rewriteDisplayFunction+0x1b2>
							current_multiplier_index--;
 800309c:	4b48      	ldr	r3, [pc, #288]	; (80031c0 <rewriteDisplayFunction+0x2c0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	4a47      	ldr	r2, [pc, #284]	; (80031c0 <rewriteDisplayFunction+0x2c0>)
 80030a4:	6013      	str	r3, [r2, #0]
							u8g2_ClearBuffer(&u8g2);
 80030a6:	4843      	ldr	r0, [pc, #268]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 80030a8:	f001 f860 	bl	800416c <u8g2_ClearBuffer>
							u8g2_SendBuffer(&u8g2);
 80030ac:	4841      	ldr	r0, [pc, #260]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 80030ae:	f001 f8d0 	bl	8004252 <u8g2_SendBuffer>
						}
						ButtonState = 3;
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 80030b4:	2203      	movs	r2, #3
 80030b6:	701a      	strb	r2, [r3, #0]
						if (menu1position > 0) {
							menu1position -= 1;
						}
						ButtonState = 0;
					}
					break;
 80030b8:	e253      	b.n	8003562 <rewriteDisplayFunction+0x662>
					} else if (Menu_GetCurrentMenu()->Parent == &Menu_1) {
 80030ba:	f000 fb29 	bl	8003710 <Menu_GetCurrentMenu>
 80030be:	4603      	mov	r3, r0
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4a3e      	ldr	r2, [pc, #248]	; (80031bc <rewriteDisplayFunction+0x2bc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	f040 824c 	bne.w	8003562 <rewriteDisplayFunction+0x662>
						if (menu1position > 0) {
 80030ca:	4b3e      	ldr	r3, [pc, #248]	; (80031c4 <rewriteDisplayFunction+0x2c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	dd04      	ble.n	80030dc <rewriteDisplayFunction+0x1dc>
							menu1position -= 1;
 80030d2:	4b3c      	ldr	r3, [pc, #240]	; (80031c4 <rewriteDisplayFunction+0x2c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <rewriteDisplayFunction+0x2c4>)
 80030da:	6013      	str	r3, [r2, #0]
						ButtonState = 0;
 80030dc:	4b33      	ldr	r3, [pc, #204]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
					break;
 80030e2:	e23e      	b.n	8003562 <rewriteDisplayFunction+0x662>
				// IF GRAPH - MOVE UP, THEN REDRAW
				case 7:
					if (Menu_GetCurrentMenu() == &Menu_3) {
 80030e4:	f000 fb14 	bl	8003710 <Menu_GetCurrentMenu>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4a31      	ldr	r2, [pc, #196]	; (80031b0 <rewriteDisplayFunction+0x2b0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d114      	bne.n	800311a <rewriteDisplayFunction+0x21a>
						if (current_bias_index < max_bias_index) {
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <rewriteDisplayFunction+0x2c8>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b35      	ldr	r3, [pc, #212]	; (80031cc <rewriteDisplayFunction+0x2cc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	da0a      	bge.n	8003112 <rewriteDisplayFunction+0x212>
							current_bias_index++;
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <rewriteDisplayFunction+0x2c8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3301      	adds	r3, #1
 8003102:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <rewriteDisplayFunction+0x2c8>)
 8003104:	6013      	str	r3, [r2, #0]
							u8g2_ClearBuffer(&u8g2);
 8003106:	482b      	ldr	r0, [pc, #172]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 8003108:	f001 f830 	bl	800416c <u8g2_ClearBuffer>
							u8g2_SendBuffer(&u8g2);
 800310c:	4829      	ldr	r0, [pc, #164]	; (80031b4 <rewriteDisplayFunction+0x2b4>)
 800310e:	f001 f8a0 	bl	8004252 <u8g2_SendBuffer>
						}
						ButtonState = 3;
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <rewriteDisplayFunction+0x2ac>)
 8003114:	2203      	movs	r2, #3
 8003116:	701a      	strb	r2, [r3, #0]
						for (size_t i = 0; i < array_size; ++i) {
							sprintf(current_messages[i], " %s%d%d%d,%d%d%dмм", messages[i], data_array[i][0], data_array[i][1], data_array[i][2], data_array[i][3], data_array[i][4], data_array[i][5]);
						}
						ButtonState = 0;
					}
					break;
 8003118:	e225      	b.n	8003566 <rewriteDisplayFunction+0x666>
					} else if (Menu_GetCurrentMenu()->Parent == &Menu_1) {
 800311a:	f000 faf9 	bl	8003710 <Menu_GetCurrentMenu>
 800311e:	4603      	mov	r3, r0
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	4a26      	ldr	r2, [pc, #152]	; (80031bc <rewriteDisplayFunction+0x2bc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	f040 821e 	bne.w	8003566 <rewriteDisplayFunction+0x666>
						int index_ = 9;
 800312a:	2309      	movs	r3, #9
 800312c:	61fb      	str	r3, [r7, #28]
						if (Menu_GetCurrentMenu() == &Menu_1_1) {
 800312e:	f000 faef 	bl	8003710 <Menu_GetCurrentMenu>
 8003132:	4603      	mov	r3, r0
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <rewriteDisplayFunction+0x2d0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d102      	bne.n	8003140 <rewriteDisplayFunction+0x240>
							index_ = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e05d      	b.n	80031fc <rewriteDisplayFunction+0x2fc>
						} else if (Menu_GetCurrentMenu() == &Menu_1_2) {
 8003140:	f000 fae6 	bl	8003710 <Menu_GetCurrentMenu>
 8003144:	4603      	mov	r3, r0
 8003146:	4a23      	ldr	r2, [pc, #140]	; (80031d4 <rewriteDisplayFunction+0x2d4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d102      	bne.n	8003152 <rewriteDisplayFunction+0x252>
							index_ = 1;
 800314c:	2301      	movs	r3, #1
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	e054      	b.n	80031fc <rewriteDisplayFunction+0x2fc>
						} else if (Menu_GetCurrentMenu() == &Menu_1_3) {
 8003152:	f000 fadd 	bl	8003710 <Menu_GetCurrentMenu>
 8003156:	4603      	mov	r3, r0
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <rewriteDisplayFunction+0x2d8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d102      	bne.n	8003164 <rewriteDisplayFunction+0x264>
							index_ = 2;
 800315e:	2302      	movs	r3, #2
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e04b      	b.n	80031fc <rewriteDisplayFunction+0x2fc>
						} else if (Menu_GetCurrentMenu() == &Menu_1_4) {
 8003164:	f000 fad4 	bl	8003710 <Menu_GetCurrentMenu>
 8003168:	4603      	mov	r3, r0
 800316a:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <rewriteDisplayFunction+0x2dc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d102      	bne.n	8003176 <rewriteDisplayFunction+0x276>
							index_ = 3;
 8003170:	2303      	movs	r3, #3
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	e042      	b.n	80031fc <rewriteDisplayFunction+0x2fc>
						} else if (Menu_GetCurrentMenu() == &Menu_1_5) {
 8003176:	f000 facb 	bl	8003710 <Menu_GetCurrentMenu>
 800317a:	4603      	mov	r3, r0
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <rewriteDisplayFunction+0x2e0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d102      	bne.n	8003188 <rewriteDisplayFunction+0x288>
							index_ = 4;
 8003182:	2304      	movs	r3, #4
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e039      	b.n	80031fc <rewriteDisplayFunction+0x2fc>
						} else if (Menu_GetCurrentMenu() == &Menu_1_6) {
 8003188:	f000 fac2 	bl	8003710 <Menu_GetCurrentMenu>
 800318c:	4603      	mov	r3, r0
 800318e:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <rewriteDisplayFunction+0x2e4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d102      	bne.n	800319a <rewriteDisplayFunction+0x29a>
							index_ = 5;
 8003194:	2305      	movs	r3, #5
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	e030      	b.n	80031fc <rewriteDisplayFunction+0x2fc>
						} else if (Menu_GetCurrentMenu() == &Menu_1_7) {
 800319a:	f000 fab9 	bl	8003710 <Menu_GetCurrentMenu>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <rewriteDisplayFunction+0x2e8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d122      	bne.n	80031ec <rewriteDisplayFunction+0x2ec>
							index_ = 6;
 80031a6:	2306      	movs	r3, #6
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e027      	b.n	80031fc <rewriteDisplayFunction+0x2fc>
 80031ac:	2000078c 	.word	0x2000078c
 80031b0:	0800faec 	.word	0x0800faec
 80031b4:	20000d1c 	.word	0x20000d1c
 80031b8:	0800fac8 	.word	0x0800fac8
 80031bc:	0800faa4 	.word	0x0800faa4
 80031c0:	20000254 	.word	0x20000254
 80031c4:	20000950 	.word	0x20000950
 80031c8:	20000384 	.word	0x20000384
 80031cc:	20000388 	.word	0x20000388
 80031d0:	0800fb10 	.word	0x0800fb10
 80031d4:	0800fb34 	.word	0x0800fb34
 80031d8:	0800fb58 	.word	0x0800fb58
 80031dc:	0800fb7c 	.word	0x0800fb7c
 80031e0:	0800fba0 	.word	0x0800fba0
 80031e4:	0800fbc4 	.word	0x0800fbc4
 80031e8:	0800fbe8 	.word	0x0800fbe8
						} else if (Menu_GetCurrentMenu() == &Menu_1_8) {
 80031ec:	f000 fa90 	bl	8003710 <Menu_GetCurrentMenu>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4a91      	ldr	r2, [pc, #580]	; (8003438 <rewriteDisplayFunction+0x538>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <rewriteDisplayFunction+0x2fc>
							index_ = 7;
 80031f8:	2307      	movs	r3, #7
 80031fa:	61fb      	str	r3, [r7, #28]
						if (index_ != 9) {
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b09      	cmp	r3, #9
 8003200:	d023      	beq.n	800324a <rewriteDisplayFunction+0x34a>
							if (data_array[index_][menu1position] > 0) {
 8003202:	4b8e      	ldr	r3, [pc, #568]	; (800343c <rewriteDisplayFunction+0x53c>)
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	488e      	ldr	r0, [pc, #568]	; (8003440 <rewriteDisplayFunction+0x540>)
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003218:	2b00      	cmp	r3, #0
 800321a:	dd16      	ble.n	800324a <rewriteDisplayFunction+0x34a>
								data_array[index_][menu1position] -= 1;
 800321c:	4b87      	ldr	r3, [pc, #540]	; (800343c <rewriteDisplayFunction+0x53c>)
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	4887      	ldr	r0, [pc, #540]	; (8003440 <rewriteDisplayFunction+0x540>)
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	440b      	add	r3, r1
 800322e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003232:	4a82      	ldr	r2, [pc, #520]	; (800343c <rewriteDisplayFunction+0x53c>)
 8003234:	6810      	ldr	r0, [r2, #0]
 8003236:	1e59      	subs	r1, r3, #1
 8003238:	4c81      	ldr	r4, [pc, #516]	; (8003440 <rewriteDisplayFunction+0x540>)
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4403      	add	r3, r0
 8003246:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
						for (size_t i = 0; i < array_size; ++i) {
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	e056      	b.n	80032fe <rewriteDisplayFunction+0x3fe>
							sprintf(current_messages[i], " %s%d%d%d,%d%d%dмм", messages[i], data_array[i][0], data_array[i][1], data_array[i][2], data_array[i][3], data_array[i][4], data_array[i][5]);
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	009a      	lsls	r2, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	4a79      	ldr	r2, [pc, #484]	; (8003444 <rewriteDisplayFunction+0x544>)
 800325e:	189e      	adds	r6, r3, r2
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	4a76      	ldr	r2, [pc, #472]	; (8003448 <rewriteDisplayFunction+0x548>)
 800326e:	eb03 0c02 	add.w	ip, r3, r2
 8003272:	4973      	ldr	r1, [pc, #460]	; (8003440 <rewriteDisplayFunction+0x540>)
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	496e      	ldr	r1, [pc, #440]	; (8003440 <rewriteDisplayFunction+0x540>)
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	3304      	adds	r3, #4
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	486a      	ldr	r0, [pc, #424]	; (8003440 <rewriteDisplayFunction+0x540>)
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4403      	add	r3, r0
 80032a4:	3308      	adds	r3, #8
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	4c65      	ldr	r4, [pc, #404]	; (8003440 <rewriteDisplayFunction+0x540>)
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4423      	add	r3, r4
 80032b6:	330c      	adds	r3, #12
 80032b8:	681c      	ldr	r4, [r3, #0]
 80032ba:	4d61      	ldr	r5, [pc, #388]	; (8003440 <rewriteDisplayFunction+0x540>)
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	442b      	add	r3, r5
 80032c8:	3310      	adds	r3, #16
 80032ca:	681d      	ldr	r5, [r3, #0]
 80032cc:	4a5c      	ldr	r2, [pc, #368]	; (8003440 <rewriteDisplayFunction+0x540>)
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3314      	adds	r3, #20
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	9304      	str	r3, [sp, #16]
 80032e4:	9503      	str	r5, [sp, #12]
 80032e6:	9402      	str	r4, [sp, #8]
 80032e8:	9001      	str	r0, [sp, #4]
 80032ea:	9100      	str	r1, [sp, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4662      	mov	r2, ip
 80032f0:	4956      	ldr	r1, [pc, #344]	; (800344c <rewriteDisplayFunction+0x54c>)
 80032f2:	4630      	mov	r0, r6
 80032f4:	f00a f8a0 	bl	800d438 <siprintf>
						for (size_t i = 0; i < array_size; ++i) {
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	2308      	movs	r3, #8
 8003300:	461a      	mov	r2, r3
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4293      	cmp	r3, r2
 8003306:	d3a3      	bcc.n	8003250 <rewriteDisplayFunction+0x350>
						ButtonState = 0;
 8003308:	4b51      	ldr	r3, [pc, #324]	; (8003450 <rewriteDisplayFunction+0x550>)
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
					break;
 800330e:	e12a      	b.n	8003566 <rewriteDisplayFunction+0x666>
				// IF GRAPH - MOVE DOWN, THEN REDRAW
				case 8:
					if (Menu_GetCurrentMenu() == &Menu_3) {
 8003310:	f000 f9fe 	bl	8003710 <Menu_GetCurrentMenu>
 8003314:	4603      	mov	r3, r0
 8003316:	4a4f      	ldr	r2, [pc, #316]	; (8003454 <rewriteDisplayFunction+0x554>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d112      	bne.n	8003342 <rewriteDisplayFunction+0x442>
						if (current_bias_index > 0) { // check if this is not equal to zero
 800331c:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <rewriteDisplayFunction+0x558>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	dd0a      	ble.n	800333a <rewriteDisplayFunction+0x43a>
							current_bias_index--;
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <rewriteDisplayFunction+0x558>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3b01      	subs	r3, #1
 800332a:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <rewriteDisplayFunction+0x558>)
 800332c:	6013      	str	r3, [r2, #0]
							u8g2_ClearBuffer(&u8g2);
 800332e:	484b      	ldr	r0, [pc, #300]	; (800345c <rewriteDisplayFunction+0x55c>)
 8003330:	f000 ff1c 	bl	800416c <u8g2_ClearBuffer>
							u8g2_SendBuffer(&u8g2);
 8003334:	4849      	ldr	r0, [pc, #292]	; (800345c <rewriteDisplayFunction+0x55c>)
 8003336:	f000 ff8c 	bl	8004252 <u8g2_SendBuffer>
						}
						ButtonState = 3;
 800333a:	4b45      	ldr	r3, [pc, #276]	; (8003450 <rewriteDisplayFunction+0x550>)
 800333c:	2203      	movs	r2, #3
 800333e:	701a      	strb	r2, [r3, #0]
						for (size_t i = 0; i < array_size; ++i) {
						    sprintf(current_messages[i], " %s%d%d%d,%d%d%dмм", messages[i], data_array[i][0], data_array[i][1], data_array[i][2], data_array[i][3], data_array[i][4], data_array[i][5]);
					    }
						ButtonState = 0;
					}
					break;
 8003340:	e113      	b.n	800356a <rewriteDisplayFunction+0x66a>
					} else if (Menu_GetCurrentMenu()->Parent == &Menu_1) {
 8003342:	f000 f9e5 	bl	8003710 <Menu_GetCurrentMenu>
 8003346:	4603      	mov	r3, r0
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4a45      	ldr	r2, [pc, #276]	; (8003460 <rewriteDisplayFunction+0x560>)
 800334c:	4293      	cmp	r3, r2
 800334e:	f040 810c 	bne.w	800356a <rewriteDisplayFunction+0x66a>
						int index_ = 9;
 8003352:	2309      	movs	r3, #9
 8003354:	617b      	str	r3, [r7, #20]
						if (Menu_GetCurrentMenu() == &Menu_1_1) {
 8003356:	f000 f9db 	bl	8003710 <Menu_GetCurrentMenu>
 800335a:	4603      	mov	r3, r0
 800335c:	4a41      	ldr	r2, [pc, #260]	; (8003464 <rewriteDisplayFunction+0x564>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d102      	bne.n	8003368 <rewriteDisplayFunction+0x468>
							index_ = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e03d      	b.n	80033e4 <rewriteDisplayFunction+0x4e4>
						} else if (Menu_GetCurrentMenu() == &Menu_1_2) {
 8003368:	f000 f9d2 	bl	8003710 <Menu_GetCurrentMenu>
 800336c:	4603      	mov	r3, r0
 800336e:	4a3e      	ldr	r2, [pc, #248]	; (8003468 <rewriteDisplayFunction+0x568>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d102      	bne.n	800337a <rewriteDisplayFunction+0x47a>
							index_ = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e034      	b.n	80033e4 <rewriteDisplayFunction+0x4e4>
						} else if (Menu_GetCurrentMenu() == &Menu_1_3) {
 800337a:	f000 f9c9 	bl	8003710 <Menu_GetCurrentMenu>
 800337e:	4603      	mov	r3, r0
 8003380:	4a3a      	ldr	r2, [pc, #232]	; (800346c <rewriteDisplayFunction+0x56c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d102      	bne.n	800338c <rewriteDisplayFunction+0x48c>
							index_ = 2;
 8003386:	2302      	movs	r3, #2
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e02b      	b.n	80033e4 <rewriteDisplayFunction+0x4e4>
						} else if (Menu_GetCurrentMenu() == &Menu_1_4) {
 800338c:	f000 f9c0 	bl	8003710 <Menu_GetCurrentMenu>
 8003390:	4603      	mov	r3, r0
 8003392:	4a37      	ldr	r2, [pc, #220]	; (8003470 <rewriteDisplayFunction+0x570>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d102      	bne.n	800339e <rewriteDisplayFunction+0x49e>
							index_ = 3;
 8003398:	2303      	movs	r3, #3
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e022      	b.n	80033e4 <rewriteDisplayFunction+0x4e4>
						} else if (Menu_GetCurrentMenu() == &Menu_1_5) {
 800339e:	f000 f9b7 	bl	8003710 <Menu_GetCurrentMenu>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4a33      	ldr	r2, [pc, #204]	; (8003474 <rewriteDisplayFunction+0x574>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d102      	bne.n	80033b0 <rewriteDisplayFunction+0x4b0>
							index_ = 4;
 80033aa:	2304      	movs	r3, #4
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e019      	b.n	80033e4 <rewriteDisplayFunction+0x4e4>
						} else if (Menu_GetCurrentMenu() == &Menu_1_6) {
 80033b0:	f000 f9ae 	bl	8003710 <Menu_GetCurrentMenu>
 80033b4:	4603      	mov	r3, r0
 80033b6:	4a30      	ldr	r2, [pc, #192]	; (8003478 <rewriteDisplayFunction+0x578>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d102      	bne.n	80033c2 <rewriteDisplayFunction+0x4c2>
							index_ = 5;
 80033bc:	2305      	movs	r3, #5
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	e010      	b.n	80033e4 <rewriteDisplayFunction+0x4e4>
						} else if (Menu_GetCurrentMenu() == &Menu_1_7) {
 80033c2:	f000 f9a5 	bl	8003710 <Menu_GetCurrentMenu>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a2c      	ldr	r2, [pc, #176]	; (800347c <rewriteDisplayFunction+0x57c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d102      	bne.n	80033d4 <rewriteDisplayFunction+0x4d4>
							index_ = 6;
 80033ce:	2306      	movs	r3, #6
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e007      	b.n	80033e4 <rewriteDisplayFunction+0x4e4>
						} else if (Menu_GetCurrentMenu() == &Menu_1_8) {
 80033d4:	f000 f99c 	bl	8003710 <Menu_GetCurrentMenu>
 80033d8:	4603      	mov	r3, r0
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <rewriteDisplayFunction+0x538>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <rewriteDisplayFunction+0x4e4>
							index_ = 7;
 80033e0:	2307      	movs	r3, #7
 80033e2:	617b      	str	r3, [r7, #20]
						if (index_ != 9) {
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	d023      	beq.n	8003432 <rewriteDisplayFunction+0x532>
							if (data_array[index_][menu1position] < 9) {
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <rewriteDisplayFunction+0x53c>)
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	4814      	ldr	r0, [pc, #80]	; (8003440 <rewriteDisplayFunction+0x540>)
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	440b      	add	r3, r1
 80033fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003400:	2b08      	cmp	r3, #8
 8003402:	dc16      	bgt.n	8003432 <rewriteDisplayFunction+0x532>
								data_array[index_][menu1position] += 1;
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <rewriteDisplayFunction+0x53c>)
 8003406:	6819      	ldr	r1, [r3, #0]
 8003408:	480d      	ldr	r0, [pc, #52]	; (8003440 <rewriteDisplayFunction+0x540>)
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	440b      	add	r3, r1
 8003416:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <rewriteDisplayFunction+0x53c>)
 800341c:	6810      	ldr	r0, [r2, #0]
 800341e:	1c59      	adds	r1, r3, #1
 8003420:	4c07      	ldr	r4, [pc, #28]	; (8003440 <rewriteDisplayFunction+0x540>)
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4403      	add	r3, r0
 800342e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
						for (size_t i = 0; i < array_size; ++i) {
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	e07a      	b.n	800352e <rewriteDisplayFunction+0x62e>
 8003438:	0800fc0c 	.word	0x0800fc0c
 800343c:	20000950 	.word	0x20000950
 8003440:	20000004 	.word	0x20000004
 8003444:	2000018c 	.word	0x2000018c
 8003448:	200000c4 	.word	0x200000c4
 800344c:	0800fa0c 	.word	0x0800fa0c
 8003450:	2000078c 	.word	0x2000078c
 8003454:	0800faec 	.word	0x0800faec
 8003458:	20000384 	.word	0x20000384
 800345c:	20000d1c 	.word	0x20000d1c
 8003460:	0800faa4 	.word	0x0800faa4
 8003464:	0800fb10 	.word	0x0800fb10
 8003468:	0800fb34 	.word	0x0800fb34
 800346c:	0800fb58 	.word	0x0800fb58
 8003470:	0800fb7c 	.word	0x0800fb7c
 8003474:	0800fba0 	.word	0x0800fba0
 8003478:	0800fbc4 	.word	0x0800fbc4
 800347c:	0800fbe8 	.word	0x0800fbe8
						    sprintf(current_messages[i], " %s%d%d%d,%d%d%dмм", messages[i], data_array[i][0], data_array[i][1], data_array[i][2], data_array[i][3], data_array[i][4], data_array[i][5]);
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	4a39      	ldr	r2, [pc, #228]	; (8003574 <rewriteDisplayFunction+0x674>)
 800348e:	189e      	adds	r6, r3, r2
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009a      	lsls	r2, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	4a36      	ldr	r2, [pc, #216]	; (8003578 <rewriteDisplayFunction+0x678>)
 800349e:	eb03 0c02 	add.w	ip, r3, r2
 80034a2:	4936      	ldr	r1, [pc, #216]	; (800357c <rewriteDisplayFunction+0x67c>)
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	4931      	ldr	r1, [pc, #196]	; (800357c <rewriteDisplayFunction+0x67c>)
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3304      	adds	r3, #4
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	482d      	ldr	r0, [pc, #180]	; (800357c <rewriteDisplayFunction+0x67c>)
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4403      	add	r3, r0
 80034d4:	3308      	adds	r3, #8
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	4c28      	ldr	r4, [pc, #160]	; (800357c <rewriteDisplayFunction+0x67c>)
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4423      	add	r3, r4
 80034e6:	330c      	adds	r3, #12
 80034e8:	681c      	ldr	r4, [r3, #0]
 80034ea:	4d24      	ldr	r5, [pc, #144]	; (800357c <rewriteDisplayFunction+0x67c>)
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	442b      	add	r3, r5
 80034f8:	3310      	adds	r3, #16
 80034fa:	681d      	ldr	r5, [r3, #0]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <rewriteDisplayFunction+0x67c>)
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	3314      	adds	r3, #20
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	9304      	str	r3, [sp, #16]
 8003514:	9503      	str	r5, [sp, #12]
 8003516:	9402      	str	r4, [sp, #8]
 8003518:	9001      	str	r0, [sp, #4]
 800351a:	9100      	str	r1, [sp, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4662      	mov	r2, ip
 8003520:	4917      	ldr	r1, [pc, #92]	; (8003580 <rewriteDisplayFunction+0x680>)
 8003522:	4630      	mov	r0, r6
 8003524:	f009 ff88 	bl	800d438 <siprintf>
						for (size_t i = 0; i < array_size; ++i) {
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	3301      	adds	r3, #1
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	2308      	movs	r3, #8
 8003530:	461a      	mov	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4293      	cmp	r3, r2
 8003536:	d3a3      	bcc.n	8003480 <rewriteDisplayFunction+0x580>
						ButtonState = 0;
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <rewriteDisplayFunction+0x684>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
					break;
 800353e:	e014      	b.n	800356a <rewriteDisplayFunction+0x66a>
				// REDRAW
				case 0:
					Menu_Navigate(Menu_GetCurrentMenu(), Menu_GetCurrentLayerTopMenu());
 8003540:	f000 f8e6 	bl	8003710 <Menu_GetCurrentMenu>
 8003544:	4604      	mov	r4, r0
 8003546:	f000 f8ef 	bl	8003728 <Menu_GetCurrentLayerTopMenu>
 800354a:	4603      	mov	r3, r0
 800354c:	4619      	mov	r1, r3
 800354e:	4620      	mov	r0, r4
 8003550:	f000 f906 	bl	8003760 <Menu_Navigate>
					break;
 8003554:	e00a      	b.n	800356c <rewriteDisplayFunction+0x66c>
				default:
					ButtonState = 0;
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <rewriteDisplayFunction+0x684>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e006      	b.n	800356c <rewriteDisplayFunction+0x66c>
					break;
 800355e:	bf00      	nop
 8003560:	e004      	b.n	800356c <rewriteDisplayFunction+0x66c>
					break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <rewriteDisplayFunction+0x66c>
					break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <rewriteDisplayFunction+0x66c>
					break;
 800356a:	bf00      	nop
			}
			osDelay(10);
 800356c:	200a      	movs	r0, #10
 800356e:	f005 fdbd 	bl	80090ec <osDelay>
		  switch(ButtonState) {
 8003572:	e4c9      	b.n	8002f08 <rewriteDisplayFunction+0x8>
 8003574:	2000018c 	.word	0x2000018c
 8003578:	200000c4 	.word	0x200000c4
 800357c:	20000004 	.word	0x20000004
 8003580:	0800fa0c 	.word	0x0800fa0c
 8003584:	2000078c 	.word	0x2000078c

08003588 <buttonListenFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_buttonListenFunction */
void buttonListenFunction(void *argument)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b095      	sub	sp, #84	; 0x54
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
		//0  1  2  3  {+1}
		//4  5  6  7  {+1}
		//8  9  10 11 {+1}
		//12 13 14 15 {+1}
		const int rows_count = 4;
 8003590:	2304      	movs	r3, #4
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
		const int columns_count = 4;
 8003594:	2304      	movs	r3, #4
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_TypeDef* row_ports[] = {ROW1_GPIO_Port, ROW2_GPIO_Port, ROW3_GPIO_Port, ROW4_GPIO_Port};
 8003598:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <buttonListenFunction+0x12c>)
 800359a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800359e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint16_t row_pins[] = {ROW1_Pin, ROW2_Pin, ROW3_Pin, ROW4_Pin};
 80035a4:	4a44      	ldr	r2, [pc, #272]	; (80036b8 <buttonListenFunction+0x130>)
 80035a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ae:	e883 0003 	stmia.w	r3, {r0, r1}
		GPIO_TypeDef* column_ports[] = {COL1_GPIO_Port, COL2_GPIO_Port, COL3_GPIO_Port, COL4_GPIO_Port};
 80035b2:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <buttonListenFunction+0x12c>)
 80035b4:	f107 0414 	add.w	r4, r7, #20
 80035b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint16_t column_pins[] = {COL1_Pin, COL2_Pin, COL3_Pin, COL4_Pin};
 80035be:	4a3f      	ldr	r2, [pc, #252]	; (80036bc <buttonListenFunction+0x134>)
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c8:	e883 0003 	stmia.w	r3, {r0, r1}
		for(;;){
			for (int i = 0; i < columns_count; i++) {
 80035cc:	2300      	movs	r3, #0
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d0:	e06a      	b.n	80036a8 <buttonListenFunction+0x120>
				for (int j = 0; j < columns_count; j++) {
 80035d2:	2300      	movs	r3, #0
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d6:	e018      	b.n	800360a <buttonListenFunction+0x82>
					HAL_GPIO_WritePin(column_ports[j], column_pins[j], (i==j) ? GPIO_PIN_RESET : GPIO_PIN_SET);  //Pull low
 80035d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	3350      	adds	r3, #80	; 0x50
 80035de:	443b      	add	r3, r7
 80035e0:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 80035e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	3350      	adds	r3, #80	; 0x50
 80035ea:	443b      	add	r3, r7
 80035ec:	f833 1c44 	ldrh.w	r1, [r3, #-68]
 80035f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f4:	429a      	cmp	r2, r3
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	f003 f9a8 	bl	8006954 <HAL_GPIO_WritePin>
				for (int j = 0; j < columns_count; j++) {
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	3301      	adds	r3, #1
 8003608:	64bb      	str	r3, [r7, #72]	; 0x48
 800360a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800360c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360e:	429a      	cmp	r2, r3
 8003610:	dbe2      	blt.n	80035d8 <buttonListenFunction+0x50>
				}
				for (int j = 0; j < rows_count; j++) {
 8003612:	2300      	movs	r3, #0
 8003614:	647b      	str	r3, [r7, #68]	; 0x44
 8003616:	e040      	b.n	800369a <buttonListenFunction+0x112>
					if (HAL_GPIO_ReadPin(row_ports[j], row_pins[j]) == GPIO_PIN_RESET) {  // if the Col j is high
 8003618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	3350      	adds	r3, #80	; 0x50
 800361e:	443b      	add	r3, r7
 8003620:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	3350      	adds	r3, #80	; 0x50
 800362a:	443b      	add	r3, r7
 800362c:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f003 f976 	bl	8006924 <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d12a      	bne.n	8003694 <buttonListenFunction+0x10c>
//						TIM9->CCR2 = 500;
						HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800363e:	2100      	movs	r1, #0
 8003640:	481f      	ldr	r0, [pc, #124]	; (80036c0 <buttonListenFunction+0x138>)
 8003642:	f004 f929 	bl	8007898 <HAL_TIM_PWM_Start>
						while (HAL_GPIO_ReadPin(row_ports[j], row_pins[j]) == GPIO_PIN_RESET);
 8003646:	bf00      	nop
 8003648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	3350      	adds	r3, #80	; 0x50
 800364e:	443b      	add	r3, r7
 8003650:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8003654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	3350      	adds	r3, #80	; 0x50
 800365a:	443b      	add	r3, r7
 800365c:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f003 f95e 	bl	8006924 <HAL_GPIO_ReadPin>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ec      	beq.n	8003648 <buttonListenFunction+0xc0>
						ButtonState = j * rows_count + i + 1;
 800366e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003670:	b2da      	uxtb	r2, r3
 8003672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003674:	b2db      	uxtb	r3, r3
 8003676:	fb12 f303 	smulbb	r3, r2, r3
 800367a:	b2da      	uxtb	r2, r3
 800367c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4413      	add	r3, r2
 8003682:	b2db      	uxtb	r3, r3
 8003684:	3301      	adds	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <buttonListenFunction+0x13c>)
 800368a:	701a      	strb	r2, [r3, #0]
						HAL_TIM_PWM_Stop(&htim9, TIM_CHANNEL_1);
 800368c:	2100      	movs	r1, #0
 800368e:	480c      	ldr	r0, [pc, #48]	; (80036c0 <buttonListenFunction+0x138>)
 8003690:	f004 f9ca 	bl	8007a28 <HAL_TIM_PWM_Stop>
				for (int j = 0; j < rows_count; j++) {
 8003694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003696:	3301      	adds	r3, #1
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
 800369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800369c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbba      	blt.n	8003618 <buttonListenFunction+0x90>
			for (int i = 0; i < columns_count; i++) {
 80036a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a4:	3301      	adds	r3, #1
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	429a      	cmp	r2, r3
 80036ae:	db90      	blt.n	80035d2 <buttonListenFunction+0x4a>
 80036b0:	e78c      	b.n	80035cc <buttonListenFunction+0x44>
 80036b2:	bf00      	nop
 80036b4:	0800fa24 	.word	0x0800fa24
 80036b8:	0800fa34 	.word	0x0800fa34
 80036bc:	0800fa3c 	.word	0x0800fa3c
 80036c0:	200007d8 	.word	0x200007d8
 80036c4:	2000078c 	.word	0x2000078c

080036c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
//	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
//	//delay_us(1);
//	//HAL_GPIO_WritePin(Biased_A_PWM_GPIO_Port, Biased_A_PWM_Pin, GPIO_PIN_SET);
//  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036da:	f002 fe61 	bl	80063a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a06      	ldr	r2, [pc, #24]	; (80036fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d102      	bne.n	80036ee <HAL_TIM_PeriodElapsedCallback+0x26>
	  is_period_started = 1;
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000800 	.word	0x40000800
 8003700:	20000dc0 	.word	0x20000dc0

08003704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003708:	b672      	cpsid	i
}
 800370a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800370c:	e7fe      	b.n	800370c <Error_Handler+0x8>
	...

08003710 <Menu_GetCurrentMenu>:

static Menu_Item_t* CurrentMenuItem = &NULL_MENU;
static Menu_Item_t* CurrentMenuLayerTopItem = &NULL_MENU;

Menu_Item_t* Menu_GetCurrentMenu(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <Menu_GetCurrentMenu+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000580 	.word	0x20000580

08003728 <Menu_GetCurrentLayerTopMenu>:

Menu_Item_t* Menu_GetCurrentLayerTopMenu(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
	return CurrentMenuLayerTopItem;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <Menu_GetCurrentLayerTopMenu+0x14>)
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000584 	.word	0x20000584

08003740 <Menu_SetCurrentLayerTopMenu>:

void Menu_SetCurrentLayerTopMenu(Menu_Item_t* currentMenuLayerTopItem)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	CurrentMenuLayerTopItem = currentMenuLayerTopItem;
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <Menu_SetCurrentLayerTopMenu+0x1c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000584 	.word	0x20000584

08003760 <Menu_Navigate>:

void Menu_Navigate(Menu_Item_t* const NewMenu, Menu_Item_t* const NewCurrentMenuLayerTopItem)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL)) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <Menu_Navigate+0x48>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d015      	beq.n	800379e <Menu_Navigate+0x3e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d012      	beq.n	800379e <Menu_Navigate+0x3e>
		return;
	}
	CurrentMenuItem = NewMenu;
 8003778:	4a0c      	ldr	r2, [pc, #48]	; (80037ac <Menu_Navigate+0x4c>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
	CurrentMenuLayerTopItem = NewCurrentMenuLayerTopItem;
 800377e:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <Menu_Navigate+0x50>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6013      	str	r3, [r2, #0]
	if (MenuWriteFunc) {
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <Menu_Navigate+0x54>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <Menu_Navigate+0x40>
		MenuWriteFunc(CurrentMenuItem, CurrentMenuLayerTopItem);
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <Menu_Navigate+0x54>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a06      	ldr	r2, [pc, #24]	; (80037ac <Menu_Navigate+0x4c>)
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4906      	ldr	r1, [pc, #24]	; (80037b0 <Menu_Navigate+0x50>)
 8003796:	6809      	ldr	r1, [r1, #0]
 8003798:	4610      	mov	r0, r2
 800379a:	4798      	blx	r3
 800379c:	e000      	b.n	80037a0 <Menu_Navigate+0x40>
		return;
 800379e:	bf00      	nop
	}
}
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	0800fc30 	.word	0x0800fc30
 80037ac:	20000580 	.word	0x20000580
 80037b0:	20000584 	.word	0x20000584
 80037b4:	20000dc4 	.word	0x20000dc4

080037b8 <Menu_SetGenericWriteCallback>:

void Menu_SetGenericWriteCallback(void (*WriteFunc)(Menu_Item_t* currentMenuItem, Menu_Item_t* currentMenuLayerTopItem), Menu_Item_t* const NewCurrentMenuLayerTopItem)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	MenuWriteFunc = WriteFunc;
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <Menu_SetGenericWriteCallback+0x1c>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	20000dc4 	.word	0x20000dc4

080037d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_MspInit+0x54>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4a11      	ldr	r2, [pc, #68]	; (800382c <HAL_MspInit+0x54>)
 80037e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ec:	6453      	str	r3, [r2, #68]	; 0x44
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <HAL_MspInit+0x54>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_MspInit+0x54>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <HAL_MspInit+0x54>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_MspInit+0x54>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003816:	2200      	movs	r2, #0
 8003818:	210f      	movs	r1, #15
 800381a:	f06f 0001 	mvn.w	r0, #1
 800381e:	f002 febb 	bl	8006598 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b092      	sub	sp, #72	; 0x48
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a67      	ldr	r2, [pc, #412]	; (80039f8 <HAL_TIM_Base_MspInit+0x1c8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d116      	bne.n	800388e <HAL_TIM_Base_MspInit+0x5e>
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003860:	2300      	movs	r3, #0
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	4b65      	ldr	r3, [pc, #404]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	4a64      	ldr	r2, [pc, #400]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 800386a:	f043 0304 	orr.w	r3, r3, #4
 800386e:	6413      	str	r3, [r2, #64]	; 0x40
 8003870:	4b62      	ldr	r3, [pc, #392]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	6a3b      	ldr	r3, [r7, #32]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 800387c:	2200      	movs	r2, #0
 800387e:	210f      	movs	r1, #15
 8003880:	201e      	movs	r0, #30
 8003882:	f002 fe89 	bl	8006598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003886:	201e      	movs	r0, #30
 8003888:	f002 fea2 	bl	80065d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800388c:	e0af      	b.n	80039ee <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM9)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5b      	ldr	r2, [pc, #364]	; (8003a00 <HAL_TIM_Base_MspInit+0x1d0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10e      	bne.n	80038b6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	4b57      	ldr	r3, [pc, #348]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	4a56      	ldr	r2, [pc, #344]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	6453      	str	r3, [r2, #68]	; 0x44
 80038a8:	4b54      	ldr	r3, [pc, #336]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	69fb      	ldr	r3, [r7, #28]
}
 80038b4:	e09b      	b.n	80039ee <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM10)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a52      	ldr	r2, [pc, #328]	; (8003a04 <HAL_TIM_Base_MspInit+0x1d4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d116      	bne.n	80038ee <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 80038ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ce:	6453      	str	r3, [r2, #68]	; 0x44
 80038d0:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80038dc:	2200      	movs	r2, #0
 80038de:	210f      	movs	r1, #15
 80038e0:	2019      	movs	r0, #25
 80038e2:	f002 fe59 	bl	8006598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80038e6:	2019      	movs	r0, #25
 80038e8:	f002 fe72 	bl	80065d0 <HAL_NVIC_EnableIRQ>
}
 80038ec:	e07f      	b.n	80039ee <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM11)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a45      	ldr	r2, [pc, #276]	; (8003a08 <HAL_TIM_Base_MspInit+0x1d8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d143      	bne.n	8003980 <HAL_TIM_Base_MspInit+0x150>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038f8:	2302      	movs	r3, #2
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003906:	4618      	mov	r0, r3
 8003908:	f003 fcb4 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_TIM_Base_MspInit+0xe6>
      Error_Handler();
 8003912:	f7ff fef7 	bl	8003704 <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4a37      	ldr	r2, [pc, #220]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 8003920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003924:	6453      	str	r3, [r2, #68]	; 0x44
 8003926:	4b35      	ldr	r3, [pc, #212]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	4b31      	ldr	r3, [pc, #196]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a30      	ldr	r2, [pc, #192]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 800393c:	f043 0320 	orr.w	r3, r3, #32
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = InputCapture_Pin;
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2300      	movs	r3, #0
 800395c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800395e:	2303      	movs	r3, #3
 8003960:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(InputCapture_GPIO_Port, &GPIO_InitStruct);
 8003962:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003966:	4619      	mov	r1, r3
 8003968:	4828      	ldr	r0, [pc, #160]	; (8003a0c <HAL_TIM_Base_MspInit+0x1dc>)
 800396a:	f002 fe3f 	bl	80065ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	210f      	movs	r1, #15
 8003972:	201a      	movs	r0, #26
 8003974:	f002 fe10 	bl	8006598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003978:	201a      	movs	r0, #26
 800397a:	f002 fe29 	bl	80065d0 <HAL_NVIC_EnableIRQ>
}
 800397e:	e036      	b.n	80039ee <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM13)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <HAL_TIM_Base_MspInit+0x1e0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d116      	bne.n	80039b8 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 8003994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003998:	6413      	str	r3, [r2, #64]	; 0x40
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2105      	movs	r1, #5
 80039aa:	202c      	movs	r0, #44	; 0x2c
 80039ac:	f002 fdf4 	bl	8006598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80039b0:	202c      	movs	r0, #44	; 0x2c
 80039b2:	f002 fe0d 	bl	80065d0 <HAL_NVIC_EnableIRQ>
}
 80039b6:	e01a      	b.n	80039ee <HAL_TIM_Base_MspInit+0x1be>
  else if(htim_base->Instance==TIM14)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <HAL_TIM_Base_MspInit+0x1e4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d115      	bne.n	80039ee <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	4a0c      	ldr	r2, [pc, #48]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 80039cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d0:	6413      	str	r3, [r2, #64]	; 0x40
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_TIM_Base_MspInit+0x1cc>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2105      	movs	r1, #5
 80039e2:	202d      	movs	r0, #45	; 0x2d
 80039e4:	f002 fdd8 	bl	8006598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80039e8:	202d      	movs	r0, #45	; 0x2d
 80039ea:	f002 fdf1 	bl	80065d0 <HAL_NVIC_EnableIRQ>
}
 80039ee:	bf00      	nop
 80039f0:	3748      	adds	r7, #72	; 0x48
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800
 8003a0c:	40021400 	.word	0x40021400
 8003a10:	40001c00 	.word	0x40001c00
 8003a14:	40002000 	.word	0x40002000

08003a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08c      	sub	sp, #48	; 0x30
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5b      	ldr	r2, [pc, #364]	; (8003ba4 <HAL_TIM_MspPostInit+0x18c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d11f      	bne.n	8003a7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a59      	ldr	r2, [pc, #356]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	69bb      	ldr	r3, [r7, #24]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = PWM_Generation_Pin;
 8003a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a60:	2302      	movs	r3, #2
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a64:	2302      	movs	r3, #2
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_Generation_GPIO_Port, &GPIO_InitStruct);
 8003a6c:	f107 031c 	add.w	r3, r7, #28
 8003a70:	4619      	mov	r1, r3
 8003a72:	484e      	ldr	r0, [pc, #312]	; (8003bac <HAL_TIM_MspPostInit+0x194>)
 8003a74:	f002 fdba 	bl	80065ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003a78:	e090      	b.n	8003b9c <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM9)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a4c      	ldr	r2, [pc, #304]	; (8003bb0 <HAL_TIM_MspPostInit+0x198>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d11e      	bne.n	8003ac2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	4a46      	ldr	r2, [pc, #280]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003a8e:	f043 0310 	orr.w	r3, r3, #16
 8003a92:	6313      	str	r3, [r2, #48]	; 0x30
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Dimmer_Pin;
 8003aa0:	2320      	movs	r3, #32
 8003aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Dimmer_GPIO_Port, &GPIO_InitStruct);
 8003ab4:	f107 031c 	add.w	r3, r7, #28
 8003ab8:	4619      	mov	r1, r3
 8003aba:	483e      	ldr	r0, [pc, #248]	; (8003bb4 <HAL_TIM_MspPostInit+0x19c>)
 8003abc:	f002 fd96 	bl	80065ec <HAL_GPIO_Init>
}
 8003ac0:	e06c      	b.n	8003b9c <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM10)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <HAL_TIM_MspPostInit+0x1a0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d11e      	bne.n	8003b0a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	4a34      	ldr	r2, [pc, #208]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003ad6:	f043 0320 	orr.w	r3, r3, #32
 8003ada:	6313      	str	r3, [r2, #48]	; 0x30
 8003adc:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ae8:	2340      	movs	r3, #64	; 0x40
 8003aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003af8:	2303      	movs	r3, #3
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003afc:	f107 031c 	add.w	r3, r7, #28
 8003b00:	4619      	mov	r1, r3
 8003b02:	482e      	ldr	r0, [pc, #184]	; (8003bbc <HAL_TIM_MspPostInit+0x1a4>)
 8003b04:	f002 fd72 	bl	80065ec <HAL_GPIO_Init>
}
 8003b08:	e048      	b.n	8003b9c <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM13)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2c      	ldr	r2, [pc, #176]	; (8003bc0 <HAL_TIM_MspPostInit+0x1a8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d11f      	bne.n	8003b54 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003b1e:	f043 0320 	orr.w	r3, r3, #32
 8003b22:	6313      	str	r3, [r2, #48]	; 0x30
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003b42:	2309      	movs	r3, #9
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	481b      	ldr	r0, [pc, #108]	; (8003bbc <HAL_TIM_MspPostInit+0x1a4>)
 8003b4e:	f002 fd4d 	bl	80065ec <HAL_GPIO_Init>
}
 8003b52:	e023      	b.n	8003b9c <HAL_TIM_MspPostInit+0x184>
  else if(htim->Instance==TIM14)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1a      	ldr	r2, [pc, #104]	; (8003bc4 <HAL_TIM_MspPostInit+0x1ac>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d11e      	bne.n	8003b9c <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003b68:	f043 0320 	orr.w	r3, r3, #32
 8003b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_TIM_MspPostInit+0x190>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Biased_entrance_Pin;
 8003b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003b8c:	2309      	movs	r3, #9
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Biased_entrance_GPIO_Port, &GPIO_InitStruct);
 8003b90:	f107 031c 	add.w	r3, r7, #28
 8003b94:	4619      	mov	r1, r3
 8003b96:	4809      	ldr	r0, [pc, #36]	; (8003bbc <HAL_TIM_MspPostInit+0x1a4>)
 8003b98:	f002 fd28 	bl	80065ec <HAL_GPIO_Init>
}
 8003b9c:	bf00      	nop
 8003b9e:	3730      	adds	r7, #48	; 0x30
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40020c00 	.word	0x40020c00
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40021400 	.word	0x40021400
 8003bc0:	40001c00 	.word	0x40001c00
 8003bc4:	40002000 	.word	0x40002000

08003bc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <HAL_InitTick+0xd4>)
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <HAL_InitTick+0xd4>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	6453      	str	r3, [r2, #68]	; 0x44
 8003be8:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_InitTick+0xd4>)
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003bf4:	f107 020c 	add.w	r2, r7, #12
 8003bf8:	f107 0310 	add.w	r3, r7, #16
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fb06 	bl	8007210 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003c04:	f003 faf0 	bl	80071e8 <HAL_RCC_GetPCLK2Freq>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <HAL_InitTick+0xd8>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0c9b      	lsrs	r3, r3, #18
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_InitTick+0xdc>)
 8003c1e:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <HAL_InitTick+0xe0>)
 8003c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_InitTick+0xdc>)
 8003c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_InitTick+0xdc>)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003c30:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <HAL_InitTick+0xdc>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <HAL_InitTick+0xdc>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_InitTick+0xdc>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003c42:	4818      	ldr	r0, [pc, #96]	; (8003ca4 <HAL_InitTick+0xdc>)
 8003c44:	f003 fbf8 	bl	8007438 <HAL_TIM_Base_Init>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11b      	bne.n	8003c8e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003c56:	4813      	ldr	r0, [pc, #76]	; (8003ca4 <HAL_InitTick+0xdc>)
 8003c58:	f003 fc3e 	bl	80074d8 <HAL_TIM_Base_Start_IT>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d111      	bne.n	8003c8e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c6a:	2019      	movs	r0, #25
 8003c6c:	f002 fcb0 	bl	80065d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b0f      	cmp	r3, #15
 8003c74:	d808      	bhi.n	8003c88 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003c76:	2200      	movs	r2, #0
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	2019      	movs	r0, #25
 8003c7c:	f002 fc8c 	bl	8006598 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <HAL_InitTick+0xe4>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e002      	b.n	8003c8e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3730      	adds	r7, #48	; 0x30
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	431bde83 	.word	0x431bde83
 8003ca4:	20000dc8 	.word	0x20000dc8
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	2000058c 	.word	0x2000058c

08003cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <NMI_Handler+0x4>

08003cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cba:	e7fe      	b.n	8003cba <HardFault_Handler+0x4>

08003cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cc0:	e7fe      	b.n	8003cc0 <MemManage_Handler+0x4>

08003cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cc6:	e7fe      	b.n	8003cc6 <BusFault_Handler+0x4>

08003cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ccc:	e7fe      	b.n	8003ccc <UsageFault_Handler+0x4>

08003cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ce0:	4803      	ldr	r0, [pc, #12]	; (8003cf0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003ce2:	f004 f893 	bl	8007e0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003ce6:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003ce8:	f004 f890 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000dc8 	.word	0x20000dc8
 8003cf4:	20000820 	.word	0x20000820

08003cf8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003cfc:	4802      	ldr	r0, [pc, #8]	; (8003d08 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003cfe:	f004 f885 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000868 	.word	0x20000868

08003d0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003d10:	4802      	ldr	r0, [pc, #8]	; (8003d1c <TIM4_IRQHandler+0x10>)
 8003d12:	f004 f87b 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000790 	.word	0x20000790

08003d20 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003d24:	4802      	ldr	r0, [pc, #8]	; (8003d30 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003d26:	f004 f871 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200008b0 	.word	0x200008b0

08003d34 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003d38:	4802      	ldr	r0, [pc, #8]	; (8003d44 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003d3a:	f004 f867 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200008f8 	.word	0x200008f8

08003d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
	return 1;
 8003d4c:	2301      	movs	r3, #1
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <_kill>:

int _kill(int pid, int sig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d62:	f009 fcd1 	bl	800d708 <__errno>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2216      	movs	r2, #22
 8003d6a:	601a      	str	r2, [r3, #0]
	return -1;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_exit>:

void _exit (int status)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d80:	f04f 31ff 	mov.w	r1, #4294967295
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ffe7 	bl	8003d58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d8a:	e7fe      	b.n	8003d8a <_exit+0x12>

08003d8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e00a      	b.n	8003db4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d9e:	f3af 8000 	nop.w
 8003da2:	4601      	mov	r1, r0
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	60ba      	str	r2, [r7, #8]
 8003daa:	b2ca      	uxtb	r2, r1
 8003dac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	3301      	adds	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	dbf0      	blt.n	8003d9e <_read+0x12>
	}

return len;
 8003dbc:	687b      	ldr	r3, [r7, #4]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e009      	b.n	8003dec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	60ba      	str	r2, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	3301      	adds	r3, #1
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	dbf1      	blt.n	8003dd8 <_write+0x12>
	}
	return len;
 8003df4:	687b      	ldr	r3, [r7, #4]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_close>:

int _close(int file)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
	return -1;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e26:	605a      	str	r2, [r3, #4]
	return 0;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <_isatty>:

int _isatty(int file)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e3e:	2301      	movs	r3, #1
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
	return 0;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e70:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <_sbrk+0x5c>)
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <_sbrk+0x60>)
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <_sbrk+0x64>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d102      	bne.n	8003e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <_sbrk+0x64>)
 8003e86:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <_sbrk+0x68>)
 8003e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <_sbrk+0x64>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d207      	bcs.n	8003ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e98:	f009 fc36 	bl	800d708 <__errno>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	220c      	movs	r2, #12
 8003ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	e009      	b.n	8003ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <_sbrk+0x64>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <_sbrk+0x64>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <_sbrk+0x64>)
 8003eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20020000 	.word	0x20020000
 8003ec8:	00004000 	.word	0x00004000
 8003ecc:	20000e10 	.word	0x20000e10
 8003ed0:	20011b48 	.word	0x20011b48

08003ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <SystemInit+0x20>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <SystemInit+0x20>)
 8003ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	70fb      	strb	r3, [r7, #3]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	70bb      	strb	r3, [r7, #2]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	787b      	ldrb	r3, [r7, #1]
 8003f16:	4413      	add	r3, r2
 8003f18:	b2d8      	uxtb	r0, r3
 8003f1a:	78ba      	ldrb	r2, [r7, #2]
 8003f1c:	7c3b      	ldrb	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	78ba      	ldrb	r2, [r7, #2]
 8003f24:	78f9      	ldrb	r1, [r7, #3]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	4603      	mov	r3, r0
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f001 fa97 	bl	800545e <u8g2_IsIntersection>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d012      	beq.n	8003f5c <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8003f36:	e00d      	b.n	8003f54 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003f38:	787b      	ldrb	r3, [r7, #1]
 8003f3a:	78ba      	ldrb	r2, [r7, #2]
 8003f3c:	78f9      	ldrb	r1, [r7, #3]
 8003f3e:	2000      	movs	r0, #0
 8003f40:	9000      	str	r0, [sp, #0]
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f001 f959 	bl	80051fa <u8g2_DrawHVLine>
    y++;    
 8003f48:	78bb      	ldrb	r3, [r7, #2]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	70bb      	strb	r3, [r7, #2]
    h--;
 8003f4e:	7c3b      	ldrb	r3, [r7, #16]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8003f54:	7c3b      	ldrb	r3, [r7, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ee      	bne.n	8003f38 <u8g2_DrawBox+0x40>
 8003f5a:	e000      	b.n	8003f5e <u8g2_DrawBox+0x66>
    return;
 8003f5c:	bf00      	nop
  }
}
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	461a      	mov	r2, r3
 8003f72:	4603      	mov	r3, r0
 8003f74:	70fb      	strb	r3, [r7, #3]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70bb      	strb	r3, [r7, #2]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	4413      	add	r3, r2
 8003f88:	b2d8      	uxtb	r0, r3
 8003f8a:	78ba      	ldrb	r2, [r7, #2]
 8003f8c:	7e3b      	ldrb	r3, [r7, #24]
 8003f8e:	4413      	add	r3, r2
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	78ba      	ldrb	r2, [r7, #2]
 8003f94:	78f9      	ldrb	r1, [r7, #3]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4603      	mov	r3, r0
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f001 fa5f 	bl	800545e <u8g2_IsIntersection>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02e      	beq.n	8004004 <u8g2_DrawFrame+0xa0>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003fa6:	787b      	ldrb	r3, [r7, #1]
 8003fa8:	78ba      	ldrb	r2, [r7, #2]
 8003faa:	78f9      	ldrb	r1, [r7, #3]
 8003fac:	2000      	movs	r0, #0
 8003fae:	9000      	str	r0, [sp, #0]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f001 f922 	bl	80051fa <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8003fb6:	7e3b      	ldrb	r3, [r7, #24]
 8003fb8:	78ba      	ldrb	r2, [r7, #2]
 8003fba:	78f9      	ldrb	r1, [r7, #3]
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	9000      	str	r0, [sp, #0]
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f001 f91a 	bl	80051fa <u8g2_DrawHVLine>
  x+=w;
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	787b      	ldrb	r3, [r7, #1]
 8003fca:	4413      	add	r3, r2
 8003fcc:	70fb      	strb	r3, [r7, #3]
  x--;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8003fd4:	7e3b      	ldrb	r3, [r7, #24]
 8003fd6:	78ba      	ldrb	r2, [r7, #2]
 8003fd8:	78f9      	ldrb	r1, [r7, #3]
 8003fda:	2001      	movs	r0, #1
 8003fdc:	9000      	str	r0, [sp, #0]
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f001 f90b 	bl	80051fa <u8g2_DrawHVLine>
  y+=h;
 8003fe4:	78ba      	ldrb	r2, [r7, #2]
 8003fe6:	7e3b      	ldrb	r3, [r7, #24]
 8003fe8:	4413      	add	r3, r2
 8003fea:	70bb      	strb	r3, [r7, #2]
  y--;
 8003fec:	78bb      	ldrb	r3, [r7, #2]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8003ff2:	787b      	ldrb	r3, [r7, #1]
 8003ff4:	78ba      	ldrb	r2, [r7, #2]
 8003ff6:	7bf9      	ldrb	r1, [r7, #15]
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	9000      	str	r0, [sp, #0]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 f8fc 	bl	80051fa <u8g2_DrawHVLine>
 8004002:	e000      	b.n	8004006 <u8g2_DrawFrame+0xa2>
    return;
 8004004:	bf00      	nop
}
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	70fb      	strb	r3, [r7, #3]
 800401e:	460b      	mov	r3, r1
 8004020:	70bb      	strb	r3, [r7, #2]
 8004022:	4613      	mov	r3, r2
 8004024:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	787b      	ldrb	r3, [r7, #1]
 800402a:	4413      	add	r3, r2
 800402c:	b2d8      	uxtb	r0, r3
 800402e:	78ba      	ldrb	r2, [r7, #2]
 8004030:	7e3b      	ldrb	r3, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	b2db      	uxtb	r3, r3
 8004036:	78ba      	ldrb	r2, [r7, #2]
 8004038:	78f9      	ldrb	r1, [r7, #3]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	4603      	mov	r3, r0
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f001 fa0d 	bl	800545e <u8g2_IsIntersection>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 808c 	beq.w	8004164 <u8g2_DrawRBox+0x158>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	7f3b      	ldrb	r3, [r7, #28]
 8004054:	4413      	add	r3, r2
 8004056:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8004058:	78bb      	ldrb	r3, [r7, #2]
 800405a:	73bb      	strb	r3, [r7, #14]
  yu += r;
 800405c:	7bba      	ldrb	r2, [r7, #14]
 800405e:	7f3b      	ldrb	r3, [r7, #28]
 8004060:	4413      	add	r3, r2
 8004062:	73bb      	strb	r3, [r7, #14]
 
  xr = x;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	737b      	strb	r3, [r7, #13]
  xr += w;
 8004068:	7b7a      	ldrb	r2, [r7, #13]
 800406a:	787b      	ldrb	r3, [r7, #1]
 800406c:	4413      	add	r3, r2
 800406e:	737b      	strb	r3, [r7, #13]
  xr -= r;
 8004070:	7b7a      	ldrb	r2, [r7, #13]
 8004072:	7f3b      	ldrb	r3, [r7, #28]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	737b      	strb	r3, [r7, #13]
  xr -= 1;
 8004078:	7b7b      	ldrb	r3, [r7, #13]
 800407a:	3b01      	subs	r3, #1
 800407c:	737b      	strb	r3, [r7, #13]
  
  yl = y;
 800407e:	78bb      	ldrb	r3, [r7, #2]
 8004080:	733b      	strb	r3, [r7, #12]
  yl += h;
 8004082:	7b3a      	ldrb	r2, [r7, #12]
 8004084:	7e3b      	ldrb	r3, [r7, #24]
 8004086:	4413      	add	r3, r2
 8004088:	733b      	strb	r3, [r7, #12]
  yl -= r; 
 800408a:	7b3a      	ldrb	r2, [r7, #12]
 800408c:	7f3b      	ldrb	r3, [r7, #28]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	733b      	strb	r3, [r7, #12]
  yl -= 1;
 8004092:	7b3b      	ldrb	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	733b      	strb	r3, [r7, #12]

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8004098:	7f3b      	ldrb	r3, [r7, #28]
 800409a:	7bba      	ldrb	r2, [r7, #14]
 800409c:	7bf9      	ldrb	r1, [r7, #15]
 800409e:	2002      	movs	r0, #2
 80040a0:	9000      	str	r0, [sp, #0]
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa27 	bl	80044f6 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 80040a8:	7f3b      	ldrb	r3, [r7, #28]
 80040aa:	7bba      	ldrb	r2, [r7, #14]
 80040ac:	7b79      	ldrb	r1, [r7, #13]
 80040ae:	2001      	movs	r0, #1
 80040b0:	9000      	str	r0, [sp, #0]
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fa1f 	bl	80044f6 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 80040b8:	7f3b      	ldrb	r3, [r7, #28]
 80040ba:	7b3a      	ldrb	r2, [r7, #12]
 80040bc:	7bf9      	ldrb	r1, [r7, #15]
 80040be:	2004      	movs	r0, #4
 80040c0:	9000      	str	r0, [sp, #0]
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa17 	bl	80044f6 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 80040c8:	7f3b      	ldrb	r3, [r7, #28]
 80040ca:	7b3a      	ldrb	r2, [r7, #12]
 80040cc:	7b79      	ldrb	r1, [r7, #13]
 80040ce:	2008      	movs	r0, #8
 80040d0:	9000      	str	r0, [sp, #0]
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa0f 	bl	80044f6 <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
 80040d8:	787b      	ldrb	r3, [r7, #1]
 80040da:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80040dc:	7afa      	ldrb	r2, [r7, #11]
 80040de:	7f3b      	ldrb	r3, [r7, #28]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 80040e4:	7afa      	ldrb	r2, [r7, #11]
 80040e6:	7f3b      	ldrb	r3, [r7, #28]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	72fb      	strb	r3, [r7, #11]
    xl++;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	3301      	adds	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
    yu++;
 80040f2:	7bbb      	ldrb	r3, [r7, #14]
 80040f4:	3301      	adds	r3, #1
 80040f6:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 80040f8:	7afb      	ldrb	r3, [r7, #11]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d918      	bls.n	8004130 <u8g2_DrawRBox+0x124>
    {
      ww -= 2;
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	3b02      	subs	r3, #2
 8004102:	72fb      	strb	r3, [r7, #11]
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8004104:	7f3b      	ldrb	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	b2db      	uxtb	r3, r3
 800410a:	7af8      	ldrb	r0, [r7, #11]
 800410c:	78ba      	ldrb	r2, [r7, #2]
 800410e:	7bf9      	ldrb	r1, [r7, #15]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4603      	mov	r3, r0
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff feef 	bl	8003ef8 <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 800411a:	7f3b      	ldrb	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	7af8      	ldrb	r0, [r7, #11]
 8004122:	7b3a      	ldrb	r2, [r7, #12]
 8004124:	7bf9      	ldrb	r1, [r7, #15]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	4603      	mov	r3, r0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fee4 	bl	8003ef8 <u8g2_DrawBox>
    }
    
    hh = h;
 8004130:	7e3b      	ldrb	r3, [r7, #24]
 8004132:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8004134:	7aba      	ldrb	r2, [r7, #10]
 8004136:	7f3b      	ldrb	r3, [r7, #28]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 800413c:	7aba      	ldrb	r2, [r7, #10]
 800413e:	7f3b      	ldrb	r3, [r7, #28]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	72bb      	strb	r3, [r7, #10]
    //h--;
    if ( hh >= 3 )
 8004144:	7abb      	ldrb	r3, [r7, #10]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d90d      	bls.n	8004166 <u8g2_DrawRBox+0x15a>
    {
      hh -= 2;
 800414a:	7abb      	ldrb	r3, [r7, #10]
 800414c:	3b02      	subs	r3, #2
 800414e:	72bb      	strb	r3, [r7, #10]
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8004150:	7878      	ldrb	r0, [r7, #1]
 8004152:	7bba      	ldrb	r2, [r7, #14]
 8004154:	78f9      	ldrb	r1, [r7, #3]
 8004156:	7abb      	ldrb	r3, [r7, #10]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4603      	mov	r3, r0
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fecb 	bl	8003ef8 <u8g2_DrawBox>
 8004162:	e000      	b.n	8004166 <u8g2_DrawRBox+0x15a>
    return;
 8004164:	bf00      	nop
    }
  }
}
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	7c1b      	ldrb	r3, [r3, #16]
 800417a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f009 f9af 	bl	800d4fe <memset>
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
 80041b4:	4613      	mov	r3, r2
 80041b6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	7c1b      	ldrb	r3, [r3, #16]
 80041be:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	89ba      	ldrh	r2, [r7, #12]
 80041d0:	fb12 f303 	smulbb	r3, r2, r3
 80041d4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80041d6:	89bb      	ldrh	r3, [r7, #12]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80041dc:	89bb      	ldrh	r3, [r7, #12]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	4413      	add	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80041e4:	7bf9      	ldrb	r1, [r7, #15]
 80041e6:	78ba      	ldrb	r2, [r7, #2]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	460b      	mov	r3, r1
 80041ee:	2100      	movs	r1, #0
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f001 ffb6 	bl	8006162 <u8x8_DrawTile>
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004210:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	7c5b      	ldrb	r3, [r3, #17]
 8004220:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8004222:	7bba      	ldrb	r2, [r7, #14]
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ffbd 	bl	80041a8 <u8g2_send_tile_row>
    src_row++;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	3301      	adds	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	3301      	adds	r3, #1
 8004238:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	7b7b      	ldrb	r3, [r7, #13]
 800423e:	429a      	cmp	r2, r3
 8004240:	d203      	bcs.n	800424a <u8g2_send_buffer+0x4c>
 8004242:	7bba      	ldrb	r2, [r7, #14]
 8004244:	7b3b      	ldrb	r3, [r7, #12]
 8004246:	429a      	cmp	r2, r3
 8004248:	d3eb      	bcc.n	8004222 <u8g2_send_buffer+0x24>
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ffcf 	bl	80041fe <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f001 ffcf 	bl	8006204 <u8x8_RefreshDisplay>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	460b      	mov	r3, r1
 8004278:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff ff5b 	bl	800416c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80042b6:	2100      	movs	r1, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ffd8 	bl	800426e <u8g2_SetBufferCurrTileRow>
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ff95 	bl	80041fe <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042da:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	4413      	add	r3, r2
 80042e6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	7c5b      	ldrb	r3, [r3, #17]
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d304      	bcc.n	80042fe <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f001 ff85 	bl	8006204 <u8x8_RefreshDisplay>
    return 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e00d      	b.n	800431a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff2f 	bl	800416c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff ffab 	bl	800426e <u8g2_SetBufferCurrTileRow>
  return 1;
 8004318:	2301      	movs	r3, #1
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	4608      	mov	r0, r1
 800432c:	4611      	mov	r1, r2
 800432e:	461a      	mov	r2, r3
 8004330:	4603      	mov	r3, r0
 8004332:	70fb      	strb	r3, [r7, #3]
 8004334:	460b      	mov	r3, r1
 8004336:	70bb      	strb	r3, [r7, #2]
 8004338:	4613      	mov	r3, r2
 800433a:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800433c:	7d3b      	ldrb	r3, [r7, #20]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01b      	beq.n	800437e <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8004346:	787a      	ldrb	r2, [r7, #1]
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	4413      	add	r3, r2
 800434c:	b2d9      	uxtb	r1, r3
 800434e:	7c3a      	ldrb	r2, [r7, #16]
 8004350:	78bb      	ldrb	r3, [r7, #2]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	b2da      	uxtb	r2, r3
 8004356:	78bb      	ldrb	r3, [r7, #2]
 8004358:	3301      	adds	r3, #1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 ffe8 	bl	8005332 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 8004362:	787a      	ldrb	r2, [r7, #1]
 8004364:	78bb      	ldrb	r3, [r7, #2]
 8004366:	4413      	add	r3, r2
 8004368:	b2d9      	uxtb	r1, r3
 800436a:	7c3a      	ldrb	r2, [r7, #16]
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	b2da      	uxtb	r2, r3
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	3301      	adds	r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 ffda 	bl	8005332 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800437e:	7d3b      	ldrb	r3, [r7, #20]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01b      	beq.n	80043c0 <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8004388:	787a      	ldrb	r2, [r7, #1]
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	b2d9      	uxtb	r1, r3
 8004390:	7c3a      	ldrb	r2, [r7, #16]
 8004392:	78bb      	ldrb	r3, [r7, #2]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	b2da      	uxtb	r2, r3
 8004398:	78bb      	ldrb	r3, [r7, #2]
 800439a:	3301      	adds	r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 ffc7 	bl	8005332 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 80043a4:	787a      	ldrb	r2, [r7, #1]
 80043a6:	78bb      	ldrb	r3, [r7, #2]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	b2d9      	uxtb	r1, r3
 80043ac:	7c3a      	ldrb	r2, [r7, #16]
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	3301      	adds	r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 ffb9 	bl	8005332 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80043c0:	7d3b      	ldrb	r3, [r7, #20]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d015      	beq.n	80043f6 <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 80043ca:	787a      	ldrb	r2, [r7, #1]
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	4413      	add	r3, r2
 80043d0:	b2d9      	uxtb	r1, r3
 80043d2:	78bb      	ldrb	r3, [r7, #2]
 80043d4:	3301      	adds	r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	7c3a      	ldrb	r2, [r7, #16]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 ffa9 	bl	8005332 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 80043e0:	787a      	ldrb	r2, [r7, #1]
 80043e2:	78bb      	ldrb	r3, [r7, #2]
 80043e4:	4413      	add	r3, r2
 80043e6:	b2d9      	uxtb	r1, r3
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	3301      	adds	r3, #1
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	7c3a      	ldrb	r2, [r7, #16]
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 ff9e 	bl	8005332 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80043f6:	7d3b      	ldrb	r3, [r7, #20]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8004400:	787a      	ldrb	r2, [r7, #1]
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	b2d9      	uxtb	r1, r3
 8004408:	78bb      	ldrb	r3, [r7, #2]
 800440a:	3301      	adds	r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	7c3a      	ldrb	r2, [r7, #16]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 ff8e 	bl	8005332 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 8004416:	787a      	ldrb	r2, [r7, #1]
 8004418:	78bb      	ldrb	r3, [r7, #2]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	b2d9      	uxtb	r1, r3
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	3301      	adds	r3, #1
 8004422:	b2db      	uxtb	r3, r3
 8004424:	7c3a      	ldrb	r2, [r7, #16]
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 ff83 	bl	8005332 <u8g2_DrawVLine>
    }
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	4603      	mov	r3, r0
 8004444:	70fb      	strb	r3, [r7, #3]
 8004446:	460b      	mov	r3, r1
 8004448:	70bb      	strb	r3, [r7, #2]
 800444a:	4613      	mov	r3, r2
 800444c:	707b      	strb	r3, [r7, #1]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
  f -= rad;
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	787b      	ldrb	r3, [r7, #1]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	b2db      	uxtb	r3, r3
 800445a:	73fb      	strb	r3, [r7, #15]
  ddF_x = 1;
 800445c:	2301      	movs	r3, #1
 800445e:	73bb      	strb	r3, [r7, #14]
  ddF_y = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	737b      	strb	r3, [r7, #13]
  ddF_y -= rad;
 8004464:	7b7a      	ldrb	r2, [r7, #13]
 8004466:	787b      	ldrb	r3, [r7, #1]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	737b      	strb	r3, [r7, #13]
  ddF_y *= 2;
 800446e:	7b7b      	ldrb	r3, [r7, #13]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	737b      	strb	r3, [r7, #13]
  x = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	733b      	strb	r3, [r7, #12]
  y = rad;
 800447a:	787b      	ldrb	r3, [r7, #1]
 800447c:	72fb      	strb	r3, [r7, #11]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 800447e:	78f8      	ldrb	r0, [r7, #3]
 8004480:	7afa      	ldrb	r2, [r7, #11]
 8004482:	7b39      	ldrb	r1, [r7, #12]
 8004484:	7e3b      	ldrb	r3, [r7, #24]
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	78bb      	ldrb	r3, [r7, #2]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4603      	mov	r3, r0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ff47 	bl	8004322 <u8g2_draw_disc_section>
  
  while ( x < y )
 8004494:	e026      	b.n	80044e4 <u8g2_draw_disc+0xb0>
  {
    if (f >= 0) 
 8004496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	db0b      	blt.n	80044b6 <u8g2_draw_disc+0x82>
    {
      y--;
 800449e:	7afb      	ldrb	r3, [r7, #11]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	72fb      	strb	r3, [r7, #11]
      ddF_y += 2;
 80044a4:	7b7b      	ldrb	r3, [r7, #13]
 80044a6:	3302      	adds	r3, #2
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	737b      	strb	r3, [r7, #13]
      f += ddF_y;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	7b7b      	ldrb	r3, [r7, #13]
 80044b0:	4413      	add	r3, r2
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	73fb      	strb	r3, [r7, #15]
    }
    x++;
 80044b6:	7b3b      	ldrb	r3, [r7, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	733b      	strb	r3, [r7, #12]
    ddF_x += 2;
 80044bc:	7bbb      	ldrb	r3, [r7, #14]
 80044be:	3302      	adds	r3, #2
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	73bb      	strb	r3, [r7, #14]
    f += ddF_x;
 80044c4:	7bfa      	ldrb	r2, [r7, #15]
 80044c6:	7bbb      	ldrb	r3, [r7, #14]
 80044c8:	4413      	add	r3, r2
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	73fb      	strb	r3, [r7, #15]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80044ce:	78f8      	ldrb	r0, [r7, #3]
 80044d0:	7afa      	ldrb	r2, [r7, #11]
 80044d2:	7b39      	ldrb	r1, [r7, #12]
 80044d4:	7e3b      	ldrb	r3, [r7, #24]
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	78bb      	ldrb	r3, [r7, #2]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	4603      	mov	r3, r0
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ff1f 	bl	8004322 <u8g2_draw_disc_section>
  while ( x < y )
 80044e4:	7b3a      	ldrb	r2, [r7, #12]
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d3d4      	bcc.n	8004496 <u8g2_draw_disc+0x62>
  }
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80044f6:	b590      	push	{r4, r7, lr}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af02      	add	r7, sp, #8
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	4608      	mov	r0, r1
 8004500:	4611      	mov	r1, r2
 8004502:	461a      	mov	r2, r3
 8004504:	4603      	mov	r3, r0
 8004506:	70fb      	strb	r3, [r7, #3]
 8004508:	460b      	mov	r3, r1
 800450a:	70bb      	strb	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	787b      	ldrb	r3, [r7, #1]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	b2d9      	uxtb	r1, r3
 8004518:	78ba      	ldrb	r2, [r7, #2]
 800451a:	787b      	ldrb	r3, [r7, #1]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	b2d8      	uxtb	r0, r3
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	787b      	ldrb	r3, [r7, #1]
 8004524:	4413      	add	r3, r2
 8004526:	b2db      	uxtb	r3, r3
 8004528:	3301      	adds	r3, #1
 800452a:	b2dc      	uxtb	r4, r3
 800452c:	78ba      	ldrb	r2, [r7, #2]
 800452e:	787b      	ldrb	r3, [r7, #1]
 8004530:	4413      	add	r3, r2
 8004532:	b2db      	uxtb	r3, r3
 8004534:	3301      	adds	r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4623      	mov	r3, r4
 800453c:	4602      	mov	r2, r0
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 ff8d 	bl	800545e <u8g2_IsIntersection>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <u8g2_DrawDisc+0x68>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 800454a:	7878      	ldrb	r0, [r7, #1]
 800454c:	78ba      	ldrb	r2, [r7, #2]
 800454e:	78f9      	ldrb	r1, [r7, #3]
 8004550:	7e3b      	ldrb	r3, [r7, #24]
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	4603      	mov	r3, r0
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ff6c 	bl	8004434 <u8g2_draw_disc>
 800455c:	e000      	b.n	8004560 <u8g2_DrawDisc+0x6a>
      return;
 800455e:	bf00      	nop
}
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bd90      	pop	{r4, r7, pc}
	...

08004568 <u8g2_m_30_16_2>:
  static uint8_t buf[240];
  *page_cnt = 1;
  return buf;
}
uint8_t *u8g2_m_30_16_2(uint8_t *page_cnt)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  static uint8_t buf[480];
  *page_cnt = 2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	701a      	strb	r2, [r3, #0]
  return buf;
 8004576:	4b03      	ldr	r3, [pc, #12]	; (8004584 <u8g2_m_30_16_2+0x1c>)
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	20000e14 	.word	0x20000e14

08004588 <u8g2_Setup_uc1608_240x128_2>:
  buf = u8g2_m_30_16_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1608 2 */
void u8g2_Setup_uc1608_240x128_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1608_240x128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a0b      	ldr	r2, [pc, #44]	; (80045cc <u8g2_Setup_uc1608_240x128_2+0x44>)
 800459e:	490c      	ldr	r1, [pc, #48]	; (80045d0 <u8g2_Setup_uc1608_240x128_2+0x48>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f001 fe93 	bl	80062cc <u8x8_Setup>
  buf = u8g2_m_30_16_2(&tile_buf_height);
 80045a6:	f107 0313 	add.w	r3, r7, #19
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ffdc 	bl	8004568 <u8g2_m_30_16_2>
 80045b0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80045b2:	7cfa      	ldrb	r2, [r7, #19]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <u8g2_Setup_uc1608_240x128_2+0x4c>)
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f001 f8ce 	bl	800575e <u8g2_SetupBuffer>
}
 80045c2:	bf00      	nop
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	08005e81 	.word	0x08005e81
 80045d0:	08006061 	.word	0x08006061
 80045d4:	080055e3 	.word	0x080055e3

080045d8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	781b      	ldrb	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	81fb      	strh	r3, [r7, #14]
    font++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3301      	adds	r3, #1
 800461a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800461c:	89fb      	ldrh	r3, [r7, #14]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b29a      	uxth	r2, r3
 8004628:	89fb      	ldrh	r3, [r7, #14]
 800462a:	4413      	add	r3, r2
 800462c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800462e:	89fb      	ldrh	r3, [r7, #14]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8004646:	2100      	movs	r1, #0
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	f7ff ffc5 	bl	80045d8 <u8g2_font_get_byte>
 800464e:	4603      	mov	r3, r0
 8004650:	461a      	mov	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8004656:	2101      	movs	r1, #1
 8004658:	6838      	ldr	r0, [r7, #0]
 800465a:	f7ff ffbd 	bl	80045d8 <u8g2_font_get_byte>
 800465e:	4603      	mov	r3, r0
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8004666:	2102      	movs	r1, #2
 8004668:	6838      	ldr	r0, [r7, #0]
 800466a:	f7ff ffb5 	bl	80045d8 <u8g2_font_get_byte>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8004676:	2103      	movs	r1, #3
 8004678:	6838      	ldr	r0, [r7, #0]
 800467a:	f7ff ffad 	bl	80045d8 <u8g2_font_get_byte>
 800467e:	4603      	mov	r3, r0
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8004686:	2104      	movs	r1, #4
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	f7ff ffa5 	bl	80045d8 <u8g2_font_get_byte>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8004696:	2105      	movs	r1, #5
 8004698:	6838      	ldr	r0, [r7, #0]
 800469a:	f7ff ff9d 	bl	80045d8 <u8g2_font_get_byte>
 800469e:	4603      	mov	r3, r0
 80046a0:	461a      	mov	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80046a6:	2106      	movs	r1, #6
 80046a8:	6838      	ldr	r0, [r7, #0]
 80046aa:	f7ff ff95 	bl	80045d8 <u8g2_font_get_byte>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80046b6:	2107      	movs	r1, #7
 80046b8:	6838      	ldr	r0, [r7, #0]
 80046ba:	f7ff ff8d 	bl	80045d8 <u8g2_font_get_byte>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80046c6:	2108      	movs	r1, #8
 80046c8:	6838      	ldr	r0, [r7, #0]
 80046ca:	f7ff ff85 	bl	80045d8 <u8g2_font_get_byte>
 80046ce:	4603      	mov	r3, r0
 80046d0:	461a      	mov	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80046d6:	2109      	movs	r1, #9
 80046d8:	6838      	ldr	r0, [r7, #0]
 80046da:	f7ff ff7d 	bl	80045d8 <u8g2_font_get_byte>
 80046de:	4603      	mov	r3, r0
 80046e0:	b25a      	sxtb	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80046e6:	210a      	movs	r1, #10
 80046e8:	6838      	ldr	r0, [r7, #0]
 80046ea:	f7ff ff75 	bl	80045d8 <u8g2_font_get_byte>
 80046ee:	4603      	mov	r3, r0
 80046f0:	b25a      	sxtb	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80046f6:	210b      	movs	r1, #11
 80046f8:	6838      	ldr	r0, [r7, #0]
 80046fa:	f7ff ff6d 	bl	80045d8 <u8g2_font_get_byte>
 80046fe:	4603      	mov	r3, r0
 8004700:	b25a      	sxtb	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8004706:	210c      	movs	r1, #12
 8004708:	6838      	ldr	r0, [r7, #0]
 800470a:	f7ff ff65 	bl	80045d8 <u8g2_font_get_byte>
 800470e:	4603      	mov	r3, r0
 8004710:	b25a      	sxtb	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8004716:	210d      	movs	r1, #13
 8004718:	6838      	ldr	r0, [r7, #0]
 800471a:	f7ff ff5d 	bl	80045d8 <u8g2_font_get_byte>
 800471e:	4603      	mov	r3, r0
 8004720:	b25a      	sxtb	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8004726:	210e      	movs	r1, #14
 8004728:	6838      	ldr	r0, [r7, #0]
 800472a:	f7ff ff55 	bl	80045d8 <u8g2_font_get_byte>
 800472e:	4603      	mov	r3, r0
 8004730:	b25a      	sxtb	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8004736:	210f      	movs	r1, #15
 8004738:	6838      	ldr	r0, [r7, #0]
 800473a:	f7ff ff4d 	bl	80045d8 <u8g2_font_get_byte>
 800473e:	4603      	mov	r3, r0
 8004740:	b25a      	sxtb	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8004746:	2110      	movs	r1, #16
 8004748:	6838      	ldr	r0, [r7, #0]
 800474a:	f7ff ff45 	bl	80045d8 <u8g2_font_get_byte>
 800474e:	4603      	mov	r3, r0
 8004750:	b25a      	sxtb	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004756:	2111      	movs	r1, #17
 8004758:	6838      	ldr	r0, [r7, #0]
 800475a:	f7ff ff4f 	bl	80045fc <u8g2_font_get_word>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004766:	2113      	movs	r1, #19
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	f7ff ff47 	bl	80045fc <u8g2_font_get_word>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004776:	2115      	movs	r1, #21
 8004778:	6838      	ldr	r0, [r7, #0]
 800477a:	f7ff ff3f 	bl	80045fc <u8g2_font_get_word>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	82da      	strh	r2, [r3, #22]
#endif
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7a9b      	ldrb	r3, [r3, #10]
 800479e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80047a8:	7bfa      	ldrb	r2, [r7, #15]
 80047aa:	7b7b      	ldrb	r3, [r7, #13]
 80047ac:	fa42 f303 	asr.w	r3, r2, r3
 80047b0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80047b2:	7b7b      	ldrb	r3, [r7, #13]
 80047b4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80047b6:	7bba      	ldrb	r2, [r7, #14]
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	4413      	add	r3, r2
 80047bc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80047be:	7bbb      	ldrb	r3, [r7, #14]
 80047c0:	2b07      	cmp	r3, #7
 80047c2:	d91a      	bls.n	80047fa <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80047c4:	2308      	movs	r3, #8
 80047c6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80047c8:	7b3a      	ldrb	r2, [r7, #12]
 80047ca:	7b7b      	ldrb	r3, [r7, #13]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	7b3b      	ldrb	r3, [r7, #12]
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	b25a      	sxtb	r2, r3
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b25b      	sxtb	r3, r3
 80047f2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80047f4:	7bbb      	ldrb	r3, [r7, #14]
 80047f6:	3b08      	subs	r3, #8
 80047f8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	43db      	mvns	r3, r3
 8004808:	b2da      	uxtb	r2, r3
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	4013      	ands	r3, r2
 800480e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	7bba      	ldrb	r2, [r7, #14]
 8004814:	729a      	strb	r2, [r3, #10]
  return val;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff ffaa 	bl	800478e <u8g2_font_decode_get_unsigned_bits>
 800483a:	4603      	mov	r3, r0
 800483c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800483e:	2301      	movs	r3, #1
 8004840:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	3b01      	subs	r3, #1
 8004846:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8004848:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	b2db      	uxtb	r3, r3
 800485c:	73fb      	strb	r3, [r7, #15]
  return v;
 800485e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800486a:	b490      	push	{r4, r7}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	4604      	mov	r4, r0
 8004872:	4608      	mov	r0, r1
 8004874:	4611      	mov	r1, r2
 8004876:	461a      	mov	r2, r3
 8004878:	4623      	mov	r3, r4
 800487a:	71fb      	strb	r3, [r7, #7]
 800487c:	4603      	mov	r3, r0
 800487e:	71bb      	strb	r3, [r7, #6]
 8004880:	460b      	mov	r3, r1
 8004882:	717b      	strb	r3, [r7, #5]
 8004884:	4613      	mov	r3, r2
 8004886:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8004888:	793b      	ldrb	r3, [r7, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d010      	beq.n	80048b0 <u8g2_add_vector_y+0x46>
 800488e:	2b02      	cmp	r3, #2
 8004890:	dc13      	bgt.n	80048ba <u8g2_add_vector_y+0x50>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <u8g2_add_vector_y+0x32>
 8004896:	2b01      	cmp	r3, #1
 8004898:	d005      	beq.n	80048a6 <u8g2_add_vector_y+0x3c>
 800489a:	e00e      	b.n	80048ba <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 800489c:	797a      	ldrb	r2, [r7, #5]
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	4413      	add	r3, r2
 80048a2:	71fb      	strb	r3, [r7, #7]
      break;
 80048a4:	e00e      	b.n	80048c4 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80048a6:	79ba      	ldrb	r2, [r7, #6]
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	4413      	add	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]
      break;
 80048ae:	e009      	b.n	80048c4 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80048b0:	797b      	ldrb	r3, [r7, #5]
 80048b2:	79fa      	ldrb	r2, [r7, #7]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	71fb      	strb	r3, [r7, #7]
      break;
 80048b8:	e004      	b.n	80048c4 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80048ba:	79bb      	ldrb	r3, [r7, #6]
 80048bc:	79fa      	ldrb	r2, [r7, #7]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	71fb      	strb	r3, [r7, #7]
      break;      
 80048c2:	bf00      	nop
  }
  return dy;
 80048c4:	79fb      	ldrb	r3, [r7, #7]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc90      	pop	{r4, r7}
 80048ce:	4770      	bx	lr

080048d0 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80048d0:	b490      	push	{r4, r7}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	4623      	mov	r3, r4
 80048e0:	71fb      	strb	r3, [r7, #7]
 80048e2:	4603      	mov	r3, r0
 80048e4:	71bb      	strb	r3, [r7, #6]
 80048e6:	460b      	mov	r3, r1
 80048e8:	717b      	strb	r3, [r7, #5]
 80048ea:	4613      	mov	r3, r2
 80048ec:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80048ee:	793b      	ldrb	r3, [r7, #4]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d010      	beq.n	8004916 <u8g2_add_vector_x+0x46>
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	dc13      	bgt.n	8004920 <u8g2_add_vector_x+0x50>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <u8g2_add_vector_x+0x32>
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d005      	beq.n	800490c <u8g2_add_vector_x+0x3c>
 8004900:	e00e      	b.n	8004920 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8004902:	79ba      	ldrb	r2, [r7, #6]
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	4413      	add	r3, r2
 8004908:	71fb      	strb	r3, [r7, #7]
      break;
 800490a:	e00e      	b.n	800492a <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 800490c:	797b      	ldrb	r3, [r7, #5]
 800490e:	79fa      	ldrb	r2, [r7, #7]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	71fb      	strb	r3, [r7, #7]
      break;
 8004914:	e009      	b.n	800492a <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8004916:	79bb      	ldrb	r3, [r7, #6]
 8004918:	79fa      	ldrb	r2, [r7, #7]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	71fb      	strb	r3, [r7, #7]
      break;
 800491e:	e004      	b.n	800492a <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8004920:	797a      	ldrb	r2, [r7, #5]
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	4413      	add	r3, r2
 8004926:	71fb      	strb	r3, [r7, #7]
      break;      
 8004928:	bf00      	nop
  }
  return dx;
 800492a:	79fb      	ldrb	r3, [r7, #7]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bc90      	pop	{r4, r7}
 8004934:	4770      	bx	lr

08004936 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b088      	sub	sp, #32
 800493a:	af02      	add	r7, sp, #8
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	70fb      	strb	r3, [r7, #3]
 8004942:	4613      	mov	r3, r2
 8004944:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3358      	adds	r3, #88	; 0x58
 800494a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004956:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800495e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004966:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8004968:	7bfa      	ldrb	r2, [r7, #15]
 800496a:	7d7b      	ldrb	r3, [r7, #21]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004974:	7dfa      	ldrb	r2, [r7, #23]
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	429a      	cmp	r2, r3
 800497a:	d201      	bcs.n	8004980 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	791b      	ldrb	r3, [r3, #4]
 8004984:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	795b      	ldrb	r3, [r3, #5]
 800498a:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800498c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004990:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	7b9b      	ldrb	r3, [r3, #14]
 8004998:	7bb8      	ldrb	r0, [r7, #14]
 800499a:	f7ff ff99 	bl	80048d0 <u8g2_add_vector_x>
 800499e:	4603      	mov	r3, r0
 80049a0:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80049a2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80049a6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	7b9b      	ldrb	r3, [r3, #14]
 80049ae:	7b78      	ldrb	r0, [r7, #13]
 80049b0:	f7ff ff5b 	bl	800486a <u8g2_add_vector_y>
 80049b4:	4603      	mov	r3, r0
 80049b6:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80049b8:	78bb      	ldrb	r3, [r7, #2]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00f      	beq.n	80049de <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	7b1a      	ldrb	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	7b9b      	ldrb	r3, [r3, #14]
 80049cc:	7db8      	ldrb	r0, [r7, #22]
 80049ce:	7b7a      	ldrb	r2, [r7, #13]
 80049d0:	7bb9      	ldrb	r1, [r7, #14]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	4603      	mov	r3, r0
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fc0f 	bl	80051fa <u8g2_DrawHVLine>
 80049dc:	e012      	b.n	8004a04 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	7adb      	ldrb	r3, [r3, #11]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10e      	bne.n	8004a04 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	7b5a      	ldrb	r2, [r3, #13]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	7b9b      	ldrb	r3, [r3, #14]
 80049f4:	7db8      	ldrb	r0, [r7, #22]
 80049f6:	7b7a      	ldrb	r2, [r7, #13]
 80049f8:	7bb9      	ldrb	r1, [r7, #14]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	4603      	mov	r3, r0
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fbfb 	bl	80051fa <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004a04:	7dfa      	ldrb	r2, [r7, #23]
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d309      	bcc.n	8004a20 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8004a0c:	7dfa      	ldrb	r2, [r7, #23]
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	757b      	strb	r3, [r7, #21]
    ly++;
 8004a18:	7d3b      	ldrb	r3, [r7, #20]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004a1e:	e79f      	b.n	8004960 <u8g2_font_decode_len+0x2a>
      break;
 8004a20:	bf00      	nop
  }
  lx += cnt;
 8004a22:	7d7a      	ldrb	r2, [r7, #21]
 8004a24:	7dfb      	ldrb	r3, [r7, #23]
 8004a26:	4413      	add	r3, r2
 8004a28:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004a2a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8004a32:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	71da      	strb	r2, [r3, #7]
  
}
 8004a3a:	bf00      	nop
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3358      	adds	r3, #88	; 0x58
 8004a50:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004a64:	4619      	mov	r1, r3
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff fe91 	bl	800478e <u8g2_font_decode_get_unsigned_bits>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	b25a      	sxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff fe86 	bl	800478e <u8g2_font_decode_get_unsigned_bits>
 8004a82:	4603      	mov	r3, r0
 8004a84:	b25a      	sxtb	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	7b1b      	ldrb	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	735a      	strb	r2, [r3, #13]
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3358      	adds	r3, #88	; 0x58
 8004abe:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ffbd 	bl	8004a42 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004ace:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6938      	ldr	r0, [r7, #16]
 8004ada:	f7ff fea3 	bl	8004824 <u8g2_font_decode_get_signed_bits>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6938      	ldr	r0, [r7, #16]
 8004aec:	f7ff fe9a 	bl	8004824 <u8g2_font_decode_get_signed_bits>
 8004af0:	4603      	mov	r3, r0
 8004af2:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004afa:	4619      	mov	r1, r3
 8004afc:	6938      	ldr	r0, [r7, #16]
 8004afe:	f7ff fe91 	bl	8004824 <u8g2_font_decode_get_signed_bits>
 8004b02:	4603      	mov	r3, r0
 8004b04:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f340 80cf 	ble.w	8004cb0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	7918      	ldrb	r0, [r3, #4]
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	7b7b      	ldrb	r3, [r7, #13]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	425b      	negs	r3, r3
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	b25a      	sxtb	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	7b9b      	ldrb	r3, [r3, #14]
 8004b28:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004b2c:	f7ff fed0 	bl	80048d0 <u8g2_add_vector_x>
 8004b30:	4603      	mov	r3, r0
 8004b32:	461a      	mov	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	7958      	ldrb	r0, [r3, #5]
 8004b3c:	7bfa      	ldrb	r2, [r7, #15]
 8004b3e:	7b7b      	ldrb	r3, [r7, #13]
 8004b40:	4413      	add	r3, r2
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	425b      	negs	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	b25a      	sxtb	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	7b9b      	ldrb	r3, [r3, #14]
 8004b4e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004b52:	f7ff fe8a 	bl	800486a <u8g2_add_vector_y>
 8004b56:	4603      	mov	r3, r0
 8004b58:	461a      	mov	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	791b      	ldrb	r3, [r3, #4]
 8004b62:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	795b      	ldrb	r3, [r3, #5]
 8004b68:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
 8004b6c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8004b6e:	7d7b      	ldrb	r3, [r7, #21]
 8004b70:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	7b9b      	ldrb	r3, [r3, #14]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d852      	bhi.n	8004c20 <u8g2_font_decode_glyph+0x170>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <u8g2_font_decode_glyph+0xd0>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bcd 	.word	0x08004bcd
 8004b8c:	08004bfd 	.word	0x08004bfd
      {
	case 0:
	    x1 += decode->glyph_width;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	7dbb      	ldrb	r3, [r7, #22]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8004b9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ba0:	7d3b      	ldrb	r3, [r7, #20]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	753b      	strb	r3, [r7, #20]
	    break;
 8004ba6:	e03b      	b.n	8004c20 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	7dfa      	ldrb	r2, [r7, #23]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004bb6:	7dbb      	ldrb	r3, [r7, #22]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	7d3b      	ldrb	r3, [r7, #20]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	753b      	strb	r3, [r7, #20]
	    break;
 8004bca:	e029      	b.n	8004c20 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	7dfa      	ldrb	r2, [r7, #23]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004be0:	7dbb      	ldrb	r3, [r7, #22]
 8004be2:	3301      	adds	r3, #1
 8004be4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	7d7a      	ldrb	r2, [r7, #21]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004bee:	7d7b      	ldrb	r3, [r7, #21]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004bf4:	7d3b      	ldrb	r3, [r7, #20]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004bfa:	e011      	b.n	8004c20 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	7dbb      	ldrb	r3, [r7, #22]
 8004c00:	4413      	add	r3, r2
 8004c02:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	7d7a      	ldrb	r2, [r7, #21]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004c12:	7d7b      	ldrb	r3, [r7, #21]
 8004c14:	3301      	adds	r3, #1
 8004c16:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004c18:	7d3b      	ldrb	r3, [r7, #20]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004c1e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004c20:	7db8      	ldrb	r0, [r7, #22]
 8004c22:	7d7a      	ldrb	r2, [r7, #21]
 8004c24:	7df9      	ldrb	r1, [r7, #23]
 8004c26:	7d3b      	ldrb	r3, [r7, #20]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fc16 	bl	800545e <u8g2_IsIntersection>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <u8g2_font_decode_glyph+0x18e>
	return d;
 8004c38:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004c3c:	e03a      	b.n	8004cb4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2200      	movs	r2, #0
 8004c42:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2200      	movs	r2, #0
 8004c48:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004c50:	4619      	mov	r1, r3
 8004c52:	6938      	ldr	r0, [r7, #16]
 8004c54:	f7ff fd9b 	bl	800478e <u8g2_font_decode_get_unsigned_bits>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004c62:	4619      	mov	r1, r3
 8004c64:	6938      	ldr	r0, [r7, #16]
 8004c66:	f7ff fd92 	bl	800478e <u8g2_font_decode_get_unsigned_bits>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8004c6e:	7afb      	ldrb	r3, [r7, #11]
 8004c70:	2200      	movs	r2, #0
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fe5e 	bl	8004936 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004c7a:	7abb      	ldrb	r3, [r7, #10]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff fe58 	bl	8004936 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004c86:	2101      	movs	r1, #1
 8004c88:	6938      	ldr	r0, [r7, #16]
 8004c8a:	f7ff fd80 	bl	800478e <u8g2_font_decode_get_unsigned_bits>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1ec      	bne.n	8004c6e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004c9a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	dd00      	ble.n	8004ca4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004ca2:	e7d2      	b.n	8004c4a <u8g2_font_decode_glyph+0x19a>
	break;
 8004ca4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	7b1a      	ldrb	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8004cb0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3317      	adds	r3, #23
 8004cd2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004cd4:	887b      	ldrh	r3, [r7, #2]
 8004cd6:	2bff      	cmp	r3, #255	; 0xff
 8004cd8:	d82a      	bhi.n	8004d30 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8004cda:	887b      	ldrh	r3, [r7, #2]
 8004cdc:	2b60      	cmp	r3, #96	; 0x60
 8004cde:	d907      	bls.n	8004cf0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e009      	b.n	8004d04 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d906      	bls.n	8004d04 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	4413      	add	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3301      	adds	r3, #1
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04e      	beq.n	8004dac <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	887a      	ldrh	r2, [r7, #2]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d102      	bne.n	8004d20 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	e049      	b.n	8004db4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3301      	adds	r3, #1
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004d2e:	e7e9      	b.n	8004d04 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004d36:	461a      	mov	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004d42:	2100      	movs	r1, #0
 8004d44:	6938      	ldr	r0, [r7, #16]
 8004d46:	f7ff fc59 	bl	80045fc <u8g2_font_get_word>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	4413      	add	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004d54:	2102      	movs	r1, #2
 8004d56:	6938      	ldr	r0, [r7, #16]
 8004d58:	f7ff fc50 	bl	80045fc <u8g2_font_get_word>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	3304      	adds	r3, #4
 8004d64:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8004d66:	89fa      	ldrh	r2, [r7, #14]
 8004d68:	887b      	ldrh	r3, [r7, #2]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d3e9      	bcc.n	8004d42 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8004d74:	89fb      	ldrh	r3, [r7, #14]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	89fb      	ldrh	r3, [r7, #14]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8004d88:	89fb      	ldrh	r3, [r7, #14]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d010      	beq.n	8004db0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8004d8e:	89fa      	ldrh	r2, [r7, #14]
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d102      	bne.n	8004d9c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	3303      	adds	r3, #3
 8004d9a:	e00b      	b.n	8004db4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3302      	adds	r3, #2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4413      	add	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8004daa:	e7e0      	b.n	8004d6e <u8g2_font_get_glyph_data+0xb2>
	break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <u8g2_font_get_glyph_data+0xf6>
	break;
 8004db0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	70fb      	strb	r3, [r7, #3]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	70bb      	strb	r3, [r7, #2]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	78ba      	ldrb	r2, [r7, #2]
 8004de6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004dea:	883b      	ldrh	r3, [r7, #0]
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff ff64 	bl	8004cbc <u8g2_font_get_glyph_data>
 8004df4:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fe56 	bl	8004ab0 <u8g2_font_decode_glyph>
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	461a      	mov	r2, r3
 8004e22:	4603      	mov	r3, r0
 8004e24:	70fb      	strb	r3, [r7, #3]
 8004e26:	460b      	mov	r3, r1
 8004e28:	70bb      	strb	r3, [r7, #2]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d833      	bhi.n	8004ea0 <u8g2_DrawGlyph+0x8c>
 8004e38:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <u8g2_DrawGlyph+0x2c>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e51 	.word	0x08004e51
 8004e44:	08004e65 	.word	0x08004e65
 8004e48:	08004e79 	.word	0x08004e79
 8004e4c:	08004e8d 	.word	0x08004e8d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	78bb      	ldrb	r3, [r7, #2]
 8004e5e:	4413      	add	r3, r2
 8004e60:	70bb      	strb	r3, [r7, #2]
      break;
 8004e62:	e01d      	b.n	8004ea0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4798      	blx	r3
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	70fb      	strb	r3, [r7, #3]
      break;
 8004e76:	e013      	b.n	8004ea0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	78bb      	ldrb	r3, [r7, #2]
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	70bb      	strb	r3, [r7, #2]
      break;
 8004e8a:	e009      	b.n	8004ea0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
 8004e94:	4603      	mov	r3, r0
 8004e96:	461a      	mov	r2, r3
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	70fb      	strb	r3, [r7, #3]
      break;
 8004e9e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004ea0:	883b      	ldrh	r3, [r7, #0]
 8004ea2:	78ba      	ldrb	r2, [r7, #2]
 8004ea4:	78f9      	ldrb	r1, [r7, #3]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff ff88 	bl	8004dbc <u8g2_font_draw_glyph>
 8004eac:	4603      	mov	r3, r0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop

08004eb8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	72fb      	strb	r3, [r7, #11]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fd9b 	bl	8005a06 <u8x8_utf8_init>
  sum = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	7812      	ldrb	r2, [r2, #0]
 8004edc:	4611      	mov	r1, r2
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	4798      	blx	r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004ee6:	8abb      	ldrh	r3, [r7, #20]
 8004ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d038      	beq.n	8004f62 <u8g2_draw_string+0xaa>
      break;
    str++;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004ef6:	8abb      	ldrh	r3, [r7, #20]
 8004ef8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d0e9      	beq.n	8004ed4 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004f00:	8abb      	ldrh	r3, [r7, #20]
 8004f02:	7aba      	ldrb	r2, [r7, #10]
 8004f04:	7af9      	ldrb	r1, [r7, #11]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ff84 	bl	8004e14 <u8g2_DrawGlyph>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d81e      	bhi.n	8004f58 <u8g2_draw_string+0xa0>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <u8g2_draw_string+0x68>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f31 	.word	0x08004f31
 8004f24:	08004f3b 	.word	0x08004f3b
 8004f28:	08004f45 	.word	0x08004f45
 8004f2c:	08004f4f 	.word	0x08004f4f
      {
	case 0:
	  x += delta;
 8004f30:	7afa      	ldrb	r2, [r7, #11]
 8004f32:	7cfb      	ldrb	r3, [r7, #19]
 8004f34:	4413      	add	r3, r2
 8004f36:	72fb      	strb	r3, [r7, #11]
	  break;
 8004f38:	e00e      	b.n	8004f58 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004f3a:	7aba      	ldrb	r2, [r7, #10]
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	4413      	add	r3, r2
 8004f40:	72bb      	strb	r3, [r7, #10]
	  break;
 8004f42:	e009      	b.n	8004f58 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004f44:	7afa      	ldrb	r2, [r7, #11]
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	72fb      	strb	r3, [r7, #11]
	  break;
 8004f4c:	e004      	b.n	8004f58 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004f4e:	7aba      	ldrb	r2, [r7, #10]
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	72bb      	strb	r3, [r7, #10]
	  break;
 8004f56:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8004f58:	7dfa      	ldrb	r2, [r7, #23]
 8004f5a:	7cfb      	ldrb	r3, [r7, #19]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004f60:	e7b8      	b.n	8004ed4 <u8g2_draw_string+0x1c>
      break;
 8004f62:	bf00      	nop
    }
  }
  return sum;
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop

08004f70 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	72fb      	strb	r3, [r7, #11]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4a06      	ldr	r2, [pc, #24]	; (8004fa0 <u8g2_DrawStr+0x30>)
 8004f86:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004f88:	7aba      	ldrb	r2, [r7, #10]
 8004f8a:	7af9      	ldrb	r1, [r7, #11]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff ff92 	bl	8004eb8 <u8g2_draw_string>
 8004f94:	4603      	mov	r3, r0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	08005a23 	.word	0x08005a23

08004fa4 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	72fb      	strb	r3, [r7, #11]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a06      	ldr	r2, [pc, #24]	; (8004fd4 <u8g2_DrawUTF8+0x30>)
 8004fba:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004fbc:	7aba      	ldrb	r2, [r7, #10]
 8004fbe:	7af9      	ldrb	r1, [r7, #11]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff ff78 	bl	8004eb8 <u8g2_draw_string>
 8004fc8:	4603      	mov	r3, r0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	08005a51 	.word	0x08005a51

08004fd8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d05d      	beq.n	80050a4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04d      	beq.n	80050a6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005010:	2b01      	cmp	r3, #1
 8005012:	d11c      	bne.n	800504e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8005020:	429a      	cmp	r2, r3
 8005022:	da05      	bge.n	8005030 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 800503c:	429a      	cmp	r2, r3
 800503e:	dd32      	ble.n	80050a6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800504c:	e02b      	b.n	80050a6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800505c:	4619      	mov	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8005064:	440b      	add	r3, r1
 8005066:	429a      	cmp	r2, r3
 8005068:	da0d      	bge.n	8005086 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8005070:	b2da      	uxtb	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8005078:	b2db      	uxtb	r3, r3
 800507a:	4413      	add	r3, r2
 800507c:	b2db      	uxtb	r3, r3
 800507e:	b25a      	sxtb	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8005092:	429a      	cmp	r2, r3
 8005094:	dd07      	ble.n	80050a6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80050a2:	e000      	b.n	80050a6 <u8g2_UpdateRefHeight+0xce>
    return;
 80050a4:	bf00      	nop
  }  
}
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  return 0;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <u8g2_SetFontPosBaseline+0x1c>)
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	080050b1 	.word	0x080050b1

080050e8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d00b      	beq.n	8005114 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3368      	adds	r3, #104	; 0x68
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fa97 	bl	800463c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff ff62 	bl	8004fd8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4611      	mov	r1, r2
 8005128:	461a      	mov	r2, r3
 800512a:	460b      	mov	r3, r1
 800512c:	71fb      	strb	r3, [r7, #7]
 800512e:	4613      	mov	r3, r2
 8005130:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	7dbb      	ldrb	r3, [r7, #22]
 8005142:	4413      	add	r3, r2
 8005144:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8005146:	7dfa      	ldrb	r2, [r7, #23]
 8005148:	7dbb      	ldrb	r3, [r7, #22]
 800514a:	429a      	cmp	r2, r3
 800514c:	d90b      	bls.n	8005166 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800514e:	7dfa      	ldrb	r2, [r7, #23]
 8005150:	79bb      	ldrb	r3, [r7, #6]
 8005152:	429a      	cmp	r2, r3
 8005154:	d205      	bcs.n	8005162 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8005156:	79bb      	ldrb	r3, [r7, #6]
 8005158:	75bb      	strb	r3, [r7, #22]
      b--;
 800515a:	7dbb      	ldrb	r3, [r7, #22]
 800515c:	3b01      	subs	r3, #1
 800515e:	75bb      	strb	r3, [r7, #22]
 8005160:	e001      	b.n	8005166 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8005166:	7dfa      	ldrb	r2, [r7, #23]
 8005168:	79bb      	ldrb	r3, [r7, #6]
 800516a:	429a      	cmp	r2, r3
 800516c:	d301      	bcc.n	8005172 <u8g2_clip_intersection2+0x56>
    return 0;
 800516e:	2300      	movs	r3, #0
 8005170:	e01c      	b.n	80051ac <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8005172:	7dba      	ldrb	r2, [r7, #22]
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	429a      	cmp	r2, r3
 8005178:	d801      	bhi.n	800517e <u8g2_clip_intersection2+0x62>
    return 0;
 800517a:	2300      	movs	r3, #0
 800517c:	e016      	b.n	80051ac <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800517e:	7dfa      	ldrb	r2, [r7, #23]
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	d201      	bcs.n	800518a <u8g2_clip_intersection2+0x6e>
    a = c;
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800518a:	7dba      	ldrb	r2, [r7, #22]
 800518c:	79bb      	ldrb	r3, [r7, #6]
 800518e:	429a      	cmp	r2, r3
 8005190:	d901      	bls.n	8005196 <u8g2_clip_intersection2+0x7a>
    b = d;
 8005192:	79bb      	ldrb	r3, [r7, #6]
 8005194:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	7dfa      	ldrb	r2, [r7, #23]
 800519a:	701a      	strb	r2, [r3, #0]
  b -= a;
 800519c:	7dba      	ldrb	r2, [r7, #22]
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	75bb      	strb	r3, [r7, #22]
  *len = b;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	7dba      	ldrb	r2, [r7, #22]
 80051a8:	701a      	strb	r2, [r3, #0]
  return 1;
 80051aa:	2301      	movs	r3, #1
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af02      	add	r7, sp, #8
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	4608      	mov	r0, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	461a      	mov	r2, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	70fb      	strb	r3, [r7, #3]
 80051ca:	460b      	mov	r3, r1
 80051cc:	70bb      	strb	r3, [r7, #2]
 80051ce:	4613      	mov	r3, r2
 80051d0:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051d8:	78ba      	ldrb	r2, [r7, #2]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80051e2:	7878      	ldrb	r0, [r7, #1]
 80051e4:	78ba      	ldrb	r2, [r7, #2]
 80051e6:	78f9      	ldrb	r1, [r7, #3]
 80051e8:	7e3b      	ldrb	r3, [r7, #24]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	47a0      	blx	r4
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd90      	pop	{r4, r7, pc}

080051fa <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80051fa:	b590      	push	{r4, r7, lr}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af02      	add	r7, sp, #8
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	4608      	mov	r0, r1
 8005204:	4611      	mov	r1, r2
 8005206:	461a      	mov	r2, r3
 8005208:	4603      	mov	r3, r0
 800520a:	70fb      	strb	r3, [r7, #3]
 800520c:	460b      	mov	r3, r1
 800520e:	70bb      	strb	r3, [r7, #2]
 8005210:	4613      	mov	r3, r2
 8005212:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d06d      	beq.n	80052fa <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800521e:	787b      	ldrb	r3, [r7, #1]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d06a      	beq.n	80052fa <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005224:	787b      	ldrb	r3, [r7, #1]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d918      	bls.n	800525c <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800522a:	7e3b      	ldrb	r3, [r7, #24]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d109      	bne.n	8005244 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	787b      	ldrb	r3, [r7, #1]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	70fb      	strb	r3, [r7, #3]
	  x++;
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	3301      	adds	r3, #1
 800523e:	b2db      	uxtb	r3, r3
 8005240:	70fb      	strb	r3, [r7, #3]
 8005242:	e00b      	b.n	800525c <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8005244:	7e3b      	ldrb	r3, [r7, #24]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d108      	bne.n	800525c <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800524a:	78ba      	ldrb	r2, [r7, #2]
 800524c:	787b      	ldrb	r3, [r7, #1]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	b2db      	uxtb	r3, r3
 8005252:	70bb      	strb	r3, [r7, #2]
	  y++;
 8005254:	78bb      	ldrb	r3, [r7, #2]
 8005256:	3301      	adds	r3, #1
 8005258:	b2db      	uxtb	r3, r3
 800525a:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800525c:	7e3b      	ldrb	r3, [r7, #24]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8005264:	7e3b      	ldrb	r3, [r7, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d119      	bne.n	800529e <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8005270:	78bb      	ldrb	r3, [r7, #2]
 8005272:	429a      	cmp	r2, r3
 8005274:	d838      	bhi.n	80052e8 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800527c:	78bb      	ldrb	r3, [r7, #2]
 800527e:	429a      	cmp	r2, r3
 8005280:	d934      	bls.n	80052ec <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800528e:	1c79      	adds	r1, r7, #1
 8005290:	1cf8      	adds	r0, r7, #3
 8005292:	f7ff ff43 	bl	800511c <u8g2_clip_intersection2>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d119      	bne.n	80052d0 <u8g2_DrawHVLine+0xd6>
	  return;
 800529c:	e02d      	b.n	80052fa <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d822      	bhi.n	80052f0 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d91e      	bls.n	80052f4 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80052c2:	1c79      	adds	r1, r7, #1
 80052c4:	1cb8      	adds	r0, r7, #2
 80052c6:	f7ff ff29 	bl	800511c <u8g2_clip_intersection2>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d4:	689c      	ldr	r4, [r3, #8]
 80052d6:	78f9      	ldrb	r1, [r7, #3]
 80052d8:	78ba      	ldrb	r2, [r7, #2]
 80052da:	7878      	ldrb	r0, [r7, #1]
 80052dc:	7e3b      	ldrb	r3, [r7, #24]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	4603      	mov	r3, r0
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	47a0      	blx	r4
 80052e6:	e008      	b.n	80052fa <u8g2_DrawHVLine+0x100>
	  return;
 80052e8:	bf00      	nop
 80052ea:	e006      	b.n	80052fa <u8g2_DrawHVLine+0x100>
	  return;
 80052ec:	bf00      	nop
 80052ee:	e004      	b.n	80052fa <u8g2_DrawHVLine+0x100>
	  return;
 80052f0:	bf00      	nop
 80052f2:	e002      	b.n	80052fa <u8g2_DrawHVLine+0x100>
	  return;
 80052f4:	bf00      	nop
 80052f6:	e000      	b.n	80052fa <u8g2_DrawHVLine+0x100>
	  return;
 80052f8:	bf00      	nop
    }
}
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd90      	pop	{r4, r7, pc}

08005300 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	461a      	mov	r2, r3
 800530e:	4603      	mov	r3, r0
 8005310:	70fb      	strb	r3, [r7, #3]
 8005312:	460b      	mov	r3, r1
 8005314:	70bb      	strb	r3, [r7, #2]
 8005316:	4613      	mov	r3, r2
 8005318:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800531a:	787b      	ldrb	r3, [r7, #1]
 800531c:	78ba      	ldrb	r2, [r7, #2]
 800531e:	78f9      	ldrb	r1, [r7, #3]
 8005320:	2000      	movs	r0, #0
 8005322:	9000      	str	r0, [sp, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ff68 	bl	80051fa <u8g2_DrawHVLine>
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af02      	add	r7, sp, #8
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	4608      	mov	r0, r1
 800533c:	4611      	mov	r1, r2
 800533e:	461a      	mov	r2, r3
 8005340:	4603      	mov	r3, r0
 8005342:	70fb      	strb	r3, [r7, #3]
 8005344:	460b      	mov	r3, r1
 8005346:	70bb      	strb	r3, [r7, #2]
 8005348:	4613      	mov	r3, r2
 800534a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800534c:	787b      	ldrb	r3, [r7, #1]
 800534e:	78ba      	ldrb	r2, [r7, #2]
 8005350:	78f9      	ldrb	r1, [r7, #3]
 8005352:	2001      	movs	r0, #1
 8005354:	9000      	str	r0, [sp, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ff4f 	bl	80051fa <u8g2_DrawHVLine>
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
 8005370:	4613      	mov	r3, r2
 8005372:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800537a:	78ba      	ldrb	r2, [r7, #2]
 800537c:	429a      	cmp	r2, r3
 800537e:	d31a      	bcc.n	80053b6 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005386:	78ba      	ldrb	r2, [r7, #2]
 8005388:	429a      	cmp	r2, r3
 800538a:	d216      	bcs.n	80053ba <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	429a      	cmp	r2, r3
 8005396:	d312      	bcc.n	80053be <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d20e      	bcs.n	80053c2 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80053a4:	78ba      	ldrb	r2, [r7, #2]
 80053a6:	78f9      	ldrb	r1, [r7, #3]
 80053a8:	2300      	movs	r3, #0
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	2301      	movs	r3, #1
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff ff23 	bl	80051fa <u8g2_DrawHVLine>
 80053b4:	e006      	b.n	80053c4 <u8g2_DrawPixel+0x60>
    return;
 80053b6:	bf00      	nop
 80053b8:	e004      	b.n	80053c4 <u8g2_DrawPixel+0x60>
    return;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <u8g2_DrawPixel+0x60>
    return;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <u8g2_DrawPixel+0x60>
    return;
 80053c2:	bf00      	nop
}
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d903      	bls.n	80053ec <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80053f8:	b490      	push	{r4, r7}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4604      	mov	r4, r0
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	461a      	mov	r2, r3
 8005406:	4623      	mov	r3, r4
 8005408:	71fb      	strb	r3, [r7, #7]
 800540a:	4603      	mov	r3, r0
 800540c:	71bb      	strb	r3, [r7, #6]
 800540e:	460b      	mov	r3, r1
 8005410:	717b      	strb	r3, [r7, #5]
 8005412:	4613      	mov	r3, r2
 8005414:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8005416:	797a      	ldrb	r2, [r7, #5]
 8005418:	79bb      	ldrb	r3, [r7, #6]
 800541a:	429a      	cmp	r2, r3
 800541c:	d20d      	bcs.n	800543a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800541e:	793a      	ldrb	r2, [r7, #4]
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	429a      	cmp	r2, r3
 8005424:	d901      	bls.n	800542a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005426:	2301      	movs	r3, #1
 8005428:	e014      	b.n	8005454 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800542a:	797a      	ldrb	r2, [r7, #5]
 800542c:	793b      	ldrb	r3, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d901      	bls.n	8005436 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8005432:	2301      	movs	r3, #1
 8005434:	e00e      	b.n	8005454 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005436:	2300      	movs	r3, #0
 8005438:	e00c      	b.n	8005454 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800543a:	793a      	ldrb	r2, [r7, #4]
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	429a      	cmp	r2, r3
 8005440:	d907      	bls.n	8005452 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8005442:	797a      	ldrb	r2, [r7, #5]
 8005444:	793b      	ldrb	r3, [r7, #4]
 8005446:	429a      	cmp	r2, r3
 8005448:	d901      	bls.n	800544e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800544a:	2301      	movs	r3, #1
 800544c:	e002      	b.n	8005454 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800544e:	2300      	movs	r3, #0
 8005450:	e000      	b.n	8005454 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8005452:	2300      	movs	r3, #0
    }
  }
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bc90      	pop	{r4, r7}
 800545c:	4770      	bx	lr

0800545e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	461a      	mov	r2, r3
 800546c:	4603      	mov	r3, r0
 800546e:	70fb      	strb	r3, [r7, #3]
 8005470:	460b      	mov	r3, r1
 8005472:	70bb      	strb	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8005484:	7c3b      	ldrb	r3, [r7, #16]
 8005486:	78ba      	ldrb	r2, [r7, #2]
 8005488:	f7ff ffb6 	bl	80053f8 <u8g2_is_intersection_decision_tree>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <u8g2_IsIntersection+0x38>
    return 0; 
 8005492:	2300      	movs	r3, #0
 8005494:	e00a      	b.n	80054ac <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 80054a2:	787b      	ldrb	r3, [r7, #1]
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	f7ff ffa7 	bl	80053f8 <u8g2_is_intersection_decision_tree>
 80054aa:	4603      	mov	r3, r0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	4608      	mov	r0, r1
 80054be:	4611      	mov	r1, r2
 80054c0:	461a      	mov	r2, r3
 80054c2:	4603      	mov	r3, r0
 80054c4:	70fb      	strb	r3, [r7, #3]
 80054c6:	460b      	mov	r3, r1
 80054c8:	70bb      	strb	r3, [r7, #2]
 80054ca:	4613      	mov	r3, r2
 80054cc:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	787b      	ldrb	r3, [r7, #1]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d904      	bls.n	80054e4 <u8g2_DrawLine+0x30>
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	787b      	ldrb	r3, [r7, #1]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	737b      	strb	r3, [r7, #13]
 80054e2:	e003      	b.n	80054ec <u8g2_DrawLine+0x38>
 80054e4:	787a      	ldrb	r2, [r7, #1]
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80054ec:	78ba      	ldrb	r2, [r7, #2]
 80054ee:	7e3b      	ldrb	r3, [r7, #24]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d904      	bls.n	80054fe <u8g2_DrawLine+0x4a>
 80054f4:	78ba      	ldrb	r2, [r7, #2]
 80054f6:	7e3b      	ldrb	r3, [r7, #24]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	733b      	strb	r3, [r7, #12]
 80054fc:	e003      	b.n	8005506 <u8g2_DrawLine+0x52>
 80054fe:	7e3a      	ldrb	r2, [r7, #24]
 8005500:	78bb      	ldrb	r3, [r7, #2]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 8005506:	7b3a      	ldrb	r2, [r7, #12]
 8005508:	7b7b      	ldrb	r3, [r7, #13]
 800550a:	429a      	cmp	r2, r3
 800550c:	d913      	bls.n	8005536 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 800550e:	2301      	movs	r3, #1
 8005510:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 8005512:	7b7b      	ldrb	r3, [r7, #13]
 8005514:	723b      	strb	r3, [r7, #8]
 8005516:	7b3b      	ldrb	r3, [r7, #12]
 8005518:	737b      	strb	r3, [r7, #13]
 800551a:	7a3b      	ldrb	r3, [r7, #8]
 800551c:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	723b      	strb	r3, [r7, #8]
 8005522:	78bb      	ldrb	r3, [r7, #2]
 8005524:	70fb      	strb	r3, [r7, #3]
 8005526:	7a3b      	ldrb	r3, [r7, #8]
 8005528:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 800552a:	787b      	ldrb	r3, [r7, #1]
 800552c:	723b      	strb	r3, [r7, #8]
 800552e:	7e3b      	ldrb	r3, [r7, #24]
 8005530:	707b      	strb	r3, [r7, #1]
 8005532:	7a3b      	ldrb	r3, [r7, #8]
 8005534:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	787b      	ldrb	r3, [r7, #1]
 800553a:	429a      	cmp	r2, r3
 800553c:	d90b      	bls.n	8005556 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	723b      	strb	r3, [r7, #8]
 8005542:	787b      	ldrb	r3, [r7, #1]
 8005544:	70fb      	strb	r3, [r7, #3]
 8005546:	7a3b      	ldrb	r3, [r7, #8]
 8005548:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 800554a:	78bb      	ldrb	r3, [r7, #2]
 800554c:	723b      	strb	r3, [r7, #8]
 800554e:	7e3b      	ldrb	r3, [r7, #24]
 8005550:	70bb      	strb	r3, [r7, #2]
 8005552:	7a3b      	ldrb	r3, [r7, #8]
 8005554:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 8005556:	7b7b      	ldrb	r3, [r7, #13]
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	b2db      	uxtb	r3, r3
 800555c:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800555e:	7e3a      	ldrb	r2, [r7, #24]
 8005560:	78bb      	ldrb	r3, [r7, #2]
 8005562:	429a      	cmp	r2, r3
 8005564:	d902      	bls.n	800556c <u8g2_DrawLine+0xb8>
 8005566:	2301      	movs	r3, #1
 8005568:	72bb      	strb	r3, [r7, #10]
 800556a:	e001      	b.n	8005570 <u8g2_DrawLine+0xbc>
 800556c:	23ff      	movs	r3, #255	; 0xff
 800556e:	72bb      	strb	r3, [r7, #10]
  y = y1;
 8005570:	78bb      	ldrb	r3, [r7, #2]
 8005572:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 8005574:	787b      	ldrb	r3, [r7, #1]
 8005576:	2bff      	cmp	r3, #255	; 0xff
 8005578:	d102      	bne.n	8005580 <u8g2_DrawLine+0xcc>
    x2--;
 800557a:	787b      	ldrb	r3, [r7, #1]
 800557c:	3b01      	subs	r3, #1
 800557e:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	73fb      	strb	r3, [r7, #15]
 8005584:	e024      	b.n	80055d0 <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 8005586:	7a7b      	ldrb	r3, [r7, #9]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 800558c:	7bba      	ldrb	r2, [r7, #14]
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff fee6 	bl	8005364 <u8g2_DrawPixel>
 8005598:	e005      	b.n	80055a6 <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800559a:	7bfa      	ldrb	r2, [r7, #15]
 800559c:	7bbb      	ldrb	r3, [r7, #14]
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff fedf 	bl	8005364 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 80055a6:	7afa      	ldrb	r2, [r7, #11]
 80055a8:	7b3b      	ldrb	r3, [r7, #12]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 80055b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da08      	bge.n	80055ca <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 80055b8:	7aba      	ldrb	r2, [r7, #10]
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	4413      	add	r3, r2
 80055be:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 80055c0:	7afa      	ldrb	r2, [r7, #11]
 80055c2:	7b7b      	ldrb	r3, [r7, #13]
 80055c4:	4413      	add	r3, r2
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	3301      	adds	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
 80055d0:	7bfa      	ldrb	r2, [r7, #15]
 80055d2:	787b      	ldrb	r3, [r7, #1]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d9d6      	bls.n	8005586 <u8g2_DrawLine+0xd2>
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	4608      	mov	r0, r1
 80055ec:	4611      	mov	r1, r2
 80055ee:	461a      	mov	r2, r3
 80055f0:	4603      	mov	r3, r0
 80055f2:	70fb      	strb	r3, [r7, #3]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70bb      	strb	r3, [r7, #2]
 80055f8:	4613      	mov	r3, r2
 80055fa:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80055fc:	78bb      	ldrb	r3, [r7, #2]
 80055fe:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8005608:	2301      	movs	r3, #1
 800560a:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800560c:	7c3a      	ldrb	r2, [r7, #16]
 800560e:	7cfb      	ldrb	r3, [r7, #19]
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005624:	2b01      	cmp	r3, #1
 8005626:	d801      	bhi.n	800562c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8005628:	7c3b      	ldrb	r3, [r7, #16]
 800562a:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005632:	2b01      	cmp	r3, #1
 8005634:	d001      	beq.n	800563a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8005636:	7c3b      	ldrb	r3, [r7, #16]
 8005638:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800563a:	78bb      	ldrb	r3, [r7, #2]
 800563c:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 800563e:	89fb      	ldrh	r3, [r7, #14]
 8005640:	f023 0307 	bic.w	r3, r3, #7
 8005644:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	7c1b      	ldrb	r3, [r3, #16]
 800564c:	b29b      	uxth	r3, r3
 800564e:	89fa      	ldrh	r2, [r7, #14]
 8005650:	fb12 f303 	smulbb	r3, r2, r3
 8005654:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800565c:	89fb      	ldrh	r3, [r7, #14]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4413      	add	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
  ptr += x;
 8005664:	78fb      	ldrb	r3, [r7, #3]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4413      	add	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800566c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d117      	bne.n	80056a4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	781a      	ldrb	r2, [r3, #0]
 8005678:	7cbb      	ldrb	r3, [r7, #18]
 800567a:	4313      	orrs	r3, r2
 800567c:	b2da      	uxtb	r2, r3
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	7c7b      	ldrb	r3, [r7, #17]
 8005688:	4053      	eors	r3, r2
 800568a:	b2da      	uxtb	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	3301      	adds	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
	len--;
 8005696:	787b      	ldrb	r3, [r7, #1]
 8005698:	3b01      	subs	r3, #1
 800569a:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800569c:	787b      	ldrb	r3, [r7, #1]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e8      	bne.n	8005674 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80056a2:	e039      	b.n	8005718 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	781a      	ldrb	r2, [r3, #0]
 80056a8:	7cbb      	ldrb	r3, [r7, #18]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	7c7b      	ldrb	r3, [r7, #17]
 80056b8:	4053      	eors	r3, r2
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	3301      	adds	r3, #1
 80056c4:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	74fb      	strb	r3, [r7, #19]
      len--;
 80056ce:	787b      	ldrb	r3, [r7, #1]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d115      	bne.n	8005706 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e0:	461a      	mov	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d801      	bhi.n	80056f6 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d008      	beq.n	8005712 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8005700:	2301      	movs	r3, #1
 8005702:	747b      	strb	r3, [r7, #17]
 8005704:	e005      	b.n	8005712 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8005706:	7cbb      	ldrb	r3, [r7, #18]
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800570c:	7c7b      	ldrb	r3, [r7, #17]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8005712:	787b      	ldrb	r3, [r7, #1]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1c5      	bne.n	80056a4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	22ff      	movs	r2, #255	; 0xff
 8005740:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	22ff      	movs	r2, #255	; 0xff
 8005748:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	79fa      	ldrb	r2, [r7, #7]
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7ff ffaf 	bl	8005724 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f7ff fc7e 	bl	80050c8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	7bfa      	ldrb	r2, [r7, #15]
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	7c1b      	ldrb	r3, [r3, #16]
 8005804:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b1f      	cmp	r3, #31
 800580a:	d901      	bls.n	8005810 <u8g2_update_dimension_common+0x34>
    t = 31;
 800580c:	231f      	movs	r3, #31
 800580e:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	7bfa      	ldrb	r2, [r7, #15]
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	7bfa      	ldrb	r2, [r7, #15]
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583a:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8005844:	4413      	add	r3, r2
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	7c52      	ldrb	r2, [r2, #17]
 800584a:	4293      	cmp	r3, r2
 800584c:	dd06      	ble.n	800585c <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	7c5a      	ldrb	r2, [r3, #17]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	4413      	add	r3, r2
 8005884:	b2da      	uxtb	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	22f0      	movs	r2, #240	; 0xf0
 8005890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	8a9b      	ldrh	r3, [r3, #20]
 8005898:	2bf0      	cmp	r3, #240	; 0xf0
 800589a:	d805      	bhi.n	80058a8 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	8a9b      	ldrh	r3, [r3, #20]
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	8adb      	ldrh	r3, [r3, #22]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4603      	mov	r3, r0
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff fdba 	bl	800545e <u8g2_IsIntersection>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80058f8:	e03b      	b.n	8005972 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800590e:	429a      	cmp	r2, r3
 8005910:	d205      	bcs.n	800591e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800592a:	429a      	cmp	r2, r3
 800592c:	d905      	bls.n	800593a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005946:	429a      	cmp	r2, r3
 8005948:	d205      	bcs.n	8005956 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005962:	429a      	cmp	r2, r3
 8005964:	d905      	bls.n	8005972 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ff2a 	bl	80057dc <u8g2_update_dimension_common>
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ff7b 	bl	80058c0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af02      	add	r7, sp, #8
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	4608      	mov	r0, r1
 80059dc:	4611      	mov	r1, r2
 80059de:	461a      	mov	r2, r3
 80059e0:	4603      	mov	r3, r0
 80059e2:	70fb      	strb	r3, [r7, #3]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70bb      	strb	r3, [r7, #2]
 80059e8:	4613      	mov	r3, r2
 80059ea:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80059ec:	7878      	ldrb	r0, [r7, #1]
 80059ee:	78ba      	ldrb	r2, [r7, #2]
 80059f0:	78f9      	ldrb	r1, [r7, #3]
 80059f2:	7c3b      	ldrb	r3, [r7, #16]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4603      	mov	r3, r0
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff fbdd 	bl	80051b8 <u8g2_draw_hv_line_2dir>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <u8x8_ascii_next+0x18>
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	2b0a      	cmp	r3, #10
 8005a38:	d102      	bne.n	8005a40 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a3e:	e001      	b.n	8005a44 <u8x8_ascii_next+0x22>
  return b;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	b29b      	uxth	r3, r3
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <u8x8_utf8_next+0x18>
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	2b0a      	cmp	r3, #10
 8005a66:	d102      	bne.n	8005a6e <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8005a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a6c:	e06e      	b.n	8005b4c <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d145      	bne.n	8005b04 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2bfb      	cmp	r3, #251	; 0xfb
 8005a7c:	d908      	bls.n	8005a90 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2205      	movs	r2, #5
 8005a82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	70fb      	strb	r3, [r7, #3]
 8005a8e:	e032      	b.n	8005af6 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	2bf7      	cmp	r3, #247	; 0xf7
 8005a94:	d908      	bls.n	8005aa8 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	70fb      	strb	r3, [r7, #3]
 8005aa6:	e026      	b.n	8005af6 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	2bef      	cmp	r3, #239	; 0xef
 8005aac:	d908      	bls.n	8005ac0 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	70fb      	strb	r3, [r7, #3]
 8005abe:	e01a      	b.n	8005af6 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	2bdf      	cmp	r3, #223	; 0xdf
 8005ac4:	d908      	bls.n	8005ad8 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	70fb      	strb	r3, [r7, #3]
 8005ad6:	e00e      	b.n	8005af6 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	2bbf      	cmp	r3, #191	; 0xbf
 8005adc:	d908      	bls.n	8005af0 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	70fb      	strb	r3, [r7, #3]
 8005aee:	e002      	b.n	8005af6 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	e02a      	b.n	8005b4c <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8005afe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b02:	e023      	b.n	8005b4c <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8c1b      	ldrh	r3, [r3, #32]
 8005b18:	019b      	lsls	r3, r3, #6
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b26:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8c1a      	ldrh	r2, [r3, #32]
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	4313      	orrs	r3, r2
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8005b42:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005b46:	e001      	b.n	8005b4c <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8c1b      	ldrh	r3, [r3, #32]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691c      	ldr	r4, [r3, #16]
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2120      	movs	r1, #32
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	47a0      	blx	r4
 8005b72:	4603      	mov	r3, r0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd90      	pop	{r4, r7, pc}

08005b7c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005b7c:	b590      	push	{r4, r7, lr}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	460b      	mov	r3, r1
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691c      	ldr	r4, [r3, #16]
 8005b8e:	7afa      	ldrb	r2, [r7, #11]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2117      	movs	r1, #23
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	47a0      	blx	r4
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd90      	pop	{r4, r7, pc}

08005ba2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005bae:	1cfb      	adds	r3, r7, #3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ffe1 	bl	8005b7c <u8x8_byte_SendBytes>
 8005bba:	4603      	mov	r3, r0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <u8x8_byte_8bit_8080mode>:
  }
  return 1;
}

uint8_t u8x8_byte_8bit_8080mode(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	72fb      	strb	r3, [r7, #11]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	72bb      	strb	r3, [r7, #10]
  uint8_t i, b;
  uint8_t *data;
 
  switch(msg)
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	3b14      	subs	r3, #20
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	f200 809e 	bhi.w	8005d1c <u8x8_byte_8bit_8080mode+0x158>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <u8x8_byte_8bit_8080mode+0x24>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005cab 	.word	0x08005cab
 8005bec:	08005d1d 	.word	0x08005d1d
 8005bf0:	08005d1d 	.word	0x08005d1d
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005cd5 	.word	0x08005cd5
 8005bfc:	08005cf9 	.word	0x08005cf9
 8005c00:	08005d1d 	.word	0x08005d1d
 8005c04:	08005d1d 	.word	0x08005d1d
 8005c08:	08005d1d 	.word	0x08005d1d
 8005c0c:	08005d1d 	.word	0x08005d1d
 8005c10:	08005d1d 	.word	0x08005d1d
 8005c14:	08005d1d 	.word	0x08005d1d
 8005c18:	08005cc7 	.word	0x08005cc7
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	613b      	str	r3, [r7, #16]
      while( arg_int > 0 )
 8005c20:	e03f      	b.n	8005ca2 <u8x8_byte_8bit_8080mode+0xde>
      {
    	  b = *data;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	75bb      	strb	r3, [r7, #22]
    	  data++;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	613b      	str	r3, [r7, #16]
    	  arg_int--;
 8005c2e:	7abb      	ldrb	r3, [r7, #10]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	72bb      	strb	r3, [r7, #10]
    	  for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ ) {
 8005c34:	2340      	movs	r3, #64	; 0x40
 8005c36:	75fb      	strb	r3, [r7, #23]
 8005c38:	e00e      	b.n	8005c58 <u8x8_byte_8bit_8080mode+0x94>
    		  u8x8_gpio_call(u8x8, i, b&1);
 8005c3a:	7dbb      	ldrb	r3, [r7, #22]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	4619      	mov	r1, r3
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 faeb 	bl	8006222 <u8x8_gpio_call>
    		  b >>= 1;
 8005c4c:	7dbb      	ldrb	r3, [r7, #22]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	75bb      	strb	r3, [r7, #22]
    	  for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ ) {
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	3301      	adds	r3, #1
 8005c56:	75fb      	strb	r3, [r7, #23]
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	2b47      	cmp	r3, #71	; 0x47
 8005c5c:	d9ed      	bls.n	8005c3a <u8x8_byte_8bit_8080mode+0x76>
    	  }
    	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	7b9b      	ldrb	r3, [r3, #14]
 8005c64:	461a      	mov	r2, r3
 8005c66:	212c      	movs	r1, #44	; 0x2c
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fada 	bl	8006222 <u8x8_gpio_call>
    	  u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2148      	movs	r1, #72	; 0x48
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fad5 	bl	8006222 <u8x8_gpio_call>
    	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	7bdb      	ldrb	r3, [r3, #15]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	212c      	movs	r1, #44	; 0x2c
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 facd 	bl	8006222 <u8x8_gpio_call>
    	  u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 8005c88:	2201      	movs	r2, #1
 8005c8a:	2148      	movs	r1, #72	; 0x48
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fac8 	bl	8006222 <u8x8_gpio_call>
    	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	7b9b      	ldrb	r3, [r3, #14]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	212c      	movs	r1, #44	; 0x2c
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fac0 	bl	8006222 <u8x8_gpio_call>
      while( arg_int > 0 )
 8005ca2:	7abb      	ldrb	r3, [r7, #10]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1bc      	bne.n	8005c22 <u8x8_byte_8bit_8080mode+0x5e>
      }
      break;
 8005ca8:	e03a      	b.n	8005d20 <u8x8_byte_8bit_8080mode+0x15c>
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2149      	movs	r1, #73	; 0x49
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fab4 	bl	8006222 <u8x8_gpio_call>
      /* ensure that the enable signal is high */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1); // WR0 = 1
 8005cba:	2201      	movs	r2, #1
 8005cbc:	2148      	movs	r1, #72	; 0x48
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 faaf 	bl	8006222 <u8x8_gpio_call>
      break;
 8005cc4:	e02c      	b.n	8005d20 <u8x8_byte_8bit_8080mode+0x15c>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
 8005cc6:	7abb      	ldrb	r3, [r7, #10]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	214a      	movs	r1, #74	; 0x4a
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 faa8 	bl	8006222 <u8x8_gpio_call>
      break;
 8005cd2:	e025      	b.n	8005d20 <u8x8_byte_8bit_8080mode+0x15c>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2149      	movs	r1, #73	; 0x49
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fa9f 	bl	8006222 <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	695c      	ldr	r4, [r3, #20]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	789a      	ldrb	r2, [r3, #2]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	212c      	movs	r1, #44	; 0x2c
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	47a0      	blx	r4
      break;
 8005cf6:	e013      	b.n	8005d20 <u8x8_byte_8bit_8080mode+0x15c>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	695c      	ldr	r4, [r3, #20]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	78da      	ldrb	r2, [r3, #3]
 8005d02:	2300      	movs	r3, #0
 8005d04:	212c      	movs	r1, #44	; 0x2c
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	47a0      	blx	r4
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	461a      	mov	r2, r3
 8005d12:	2149      	movs	r1, #73	; 0x49
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fa84 	bl	8006222 <u8x8_gpio_call>
      break;
 8005d1a:	e001      	b.n	8005d20 <u8x8_byte_8bit_8080mode+0x15c>
    default:
      return 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e000      	b.n	8005d22 <u8x8_byte_8bit_8080mode+0x15e>
  }
  return 1;
 8005d20:	2301      	movs	r3, #1
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd90      	pop	{r4, r7, pc}
 8005d2a:	bf00      	nop

08005d2c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68dc      	ldr	r4, [r3, #12]
 8005d3c:	78fa      	ldrb	r2, [r7, #3]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2115      	movs	r1, #21
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	47a0      	blx	r4
 8005d46:	4603      	mov	r3, r0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd90      	pop	{r4, r7, pc}

08005d50 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68dc      	ldr	r4, [r3, #12]
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	2300      	movs	r3, #0
 8005d64:	2116      	movs	r1, #22
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	47a0      	blx	r4
 8005d6a:	4603      	mov	r3, r0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd90      	pop	{r4, r7, pc}

08005d74 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	68dc      	ldr	r4, [r3, #12]
 8005d86:	7afa      	ldrb	r2, [r7, #11]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2117      	movs	r1, #23
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	47a0      	blx	r4
 8005d90:	4603      	mov	r3, r0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd90      	pop	{r4, r7, pc}

08005d9a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005d9a:	b590      	push	{r4, r7, lr}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68dc      	ldr	r4, [r3, #12]
 8005da6:	2300      	movs	r3, #0
 8005da8:	2200      	movs	r2, #0
 8005daa:	2118      	movs	r1, #24
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	47a0      	blx	r4
 8005db0:	4603      	mov	r3, r0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd90      	pop	{r4, r7, pc}

08005dba <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005dba:	b590      	push	{r4, r7, lr}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68dc      	ldr	r4, [r3, #12]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2119      	movs	r1, #25
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	47a0      	blx	r4
 8005dd0:	4603      	mov	r3, r0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd90      	pop	{r4, r7, pc}

08005dda <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005dda:	b590      	push	{r4, r7, lr}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	73fb      	strb	r3, [r7, #15]
    data++;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2bfe      	cmp	r3, #254	; 0xfe
 8005df4:	d031      	beq.n	8005e5a <u8x8_cad_SendSequence+0x80>
 8005df6:	2bfe      	cmp	r3, #254	; 0xfe
 8005df8:	dc3d      	bgt.n	8005e76 <u8x8_cad_SendSequence+0x9c>
 8005dfa:	2b19      	cmp	r3, #25
 8005dfc:	dc3b      	bgt.n	8005e76 <u8x8_cad_SendSequence+0x9c>
 8005dfe:	2b18      	cmp	r3, #24
 8005e00:	da23      	bge.n	8005e4a <u8x8_cad_SendSequence+0x70>
 8005e02:	2b16      	cmp	r3, #22
 8005e04:	dc02      	bgt.n	8005e0c <u8x8_cad_SendSequence+0x32>
 8005e06:	2b15      	cmp	r3, #21
 8005e08:	da03      	bge.n	8005e12 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8005e0a:	e034      	b.n	8005e76 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8005e0c:	2b17      	cmp	r3, #23
 8005e0e:	d00e      	beq.n	8005e2e <u8x8_cad_SendSequence+0x54>
	return;
 8005e10:	e031      	b.n	8005e76 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68dc      	ldr	r4, [r3, #12]
 8005e1c:	7bba      	ldrb	r2, [r7, #14]
 8005e1e:	7bf9      	ldrb	r1, [r7, #15]
 8005e20:	2300      	movs	r3, #0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	47a0      	blx	r4
	  data++;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	603b      	str	r3, [r7, #0]
	  break;
 8005e2c:	e022      	b.n	8005e74 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005e34:	f107 030e 	add.w	r3, r7, #14
 8005e38:	461a      	mov	r2, r3
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff99 	bl	8005d74 <u8x8_cad_SendData>
	  data++;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	3301      	adds	r3, #1
 8005e46:	603b      	str	r3, [r7, #0]
	  break;
 8005e48:	e014      	b.n	8005e74 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68dc      	ldr	r4, [r3, #12]
 8005e4e:	7bf9      	ldrb	r1, [r7, #15]
 8005e50:	2300      	movs	r3, #0
 8005e52:	2200      	movs	r2, #0
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	47a0      	blx	r4
	  break;
 8005e58:	e00c      	b.n	8005e74 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	461a      	mov	r2, r3
 8005e64:	2129      	movs	r1, #41	; 0x29
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9db 	bl	8006222 <u8x8_gpio_call>
	  data++;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	603b      	str	r3, [r7, #0]
	  break;
 8005e72:	bf00      	nop
    cmd = *data;
 8005e74:	e7b6      	b.n	8005de4 <u8x8_cad_SendSequence+0xa>
	return;
 8005e76:	bf00      	nop
    }
  }
}
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}
	...

08005e80 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005e80:	b590      	push	{r4, r7, lr}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	607b      	str	r3, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	72fb      	strb	r3, [r7, #11]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	3b14      	subs	r3, #20
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d82f      	bhi.n	8005efa <u8x8_cad_001+0x7a>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <u8x8_cad_001+0x20>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ee9 	.word	0x08005ee9
 8005ea4:	08005eb9 	.word	0x08005eb9
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005ee9 	.word	0x08005ee9
 8005eb4:	08005ee9 	.word	0x08005ee9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8005eb8:	2100      	movs	r1, #0
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff fe4c 	bl	8005b58 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005ec0:	7abb      	ldrb	r3, [r7, #10]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff fe6c 	bl	8005ba2 <u8x8_byte_SendByte>
      break;
 8005eca:	e018      	b.n	8005efe <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8005ecc:	2100      	movs	r1, #0
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff fe42 	bl	8005b58 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005ed4:	7abb      	ldrb	r3, [r7, #10]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff fe62 	bl	8005ba2 <u8x8_byte_SendByte>
      break;
 8005ede:	e00e      	b.n	8005efe <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff fe38 	bl	8005b58 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	691c      	ldr	r4, [r3, #16]
 8005eec:	7aba      	ldrb	r2, [r7, #10]
 8005eee:	7af9      	ldrb	r1, [r7, #11]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	47a0      	blx	r4
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	e002      	b.n	8005f00 <u8x8_cad_001+0x80>
    default:
      return 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <u8x8_cad_001+0x80>
  }
  return 1;
 8005efe:	2301      	movs	r3, #1
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd90      	pop	{r4, r7, pc}

08005f08 <u8x8_d_uc1608_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1608_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	72fb      	strb	r3, [r7, #11]
 8005f16:	4613      	mov	r3, r2
 8005f18:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	3b0b      	subs	r3, #11
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	f200 808e 	bhi.w	8006040 <u8x8_d_uc1608_common+0x138>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <u8x8_d_uc1608_common+0x24>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005fd5 	.word	0x08005fd5
 8005f30:	08006041 	.word	0x08006041
 8005f34:	08005fef 	.word	0x08005fef
 8005f38:	08006021 	.word	0x08006021
 8005f3c:	08005f41 	.word	0x08005f41
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff ff2a 	bl	8005d9a <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	795b      	ldrb	r3, [r3, #5]
 8005f4a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff fee5 	bl	8005d2c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	f043 0310 	orr.w	r3, r3, #16
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	4619      	mov	r1, r3
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff fedb 	bl	8005d2c <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	799b      	ldrb	r3, [r3, #6]
 8005f7a:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005f82:	7dbb      	ldrb	r3, [r7, #22]
 8005f84:	4413      	add	r3, r2
 8005f86:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8005f88:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	b25b      	sxtb	r3, r3
 8005f92:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff fec5 	bl	8005d2c <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	791b      	ldrb	r3, [r3, #4]
 8005fa6:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8005fa8:	7d7b      	ldrb	r3, [r7, #21]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8005fb4:	7d7b      	ldrb	r3, [r7, #21]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff feda 	bl	8005d74 <u8x8_cad_SendData>
	arg_int--;
 8005fc0:	7abb      	ldrb	r3, [r7, #10]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8005fc6:	7abb      	ldrb	r3, [r7, #10]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f3      	bne.n	8005fb4 <u8x8_d_uc1608_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fef4 	bl	8005dba <u8x8_cad_EndTransfer>
      break;
 8005fd2:	e037      	b.n	8006044 <u8x8_d_uc1608_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005fd4:	7abb      	ldrb	r3, [r7, #10]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <u8x8_d_uc1608_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1608_powersave0_seq);
 8005fda:	491d      	ldr	r1, [pc, #116]	; (8006050 <u8x8_d_uc1608_common+0x148>)
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fefc 	bl	8005dda <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1608_powersave1_seq);
      break;
 8005fe2:	e02f      	b.n	8006044 <u8x8_d_uc1608_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1608_powersave1_seq);
 8005fe4:	491b      	ldr	r1, [pc, #108]	; (8006054 <u8x8_d_uc1608_common+0x14c>)
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff fef7 	bl	8005dda <u8x8_cad_SendSequence>
      break;
 8005fec:	e02a      	b.n	8006044 <u8x8_d_uc1608_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8005fee:	7abb      	ldrb	r3, [r7, #10]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <u8x8_d_uc1608_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1608_flip0_seq);
 8005ff4:	4918      	ldr	r1, [pc, #96]	; (8006058 <u8x8_d_uc1608_common+0x150>)
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff feef 	bl	8005dda <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	7c9a      	ldrb	r2, [r3, #18]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1608_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8006008:	e01c      	b.n	8006044 <u8x8_d_uc1608_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1608_flip1_seq);
 800600a:	4914      	ldr	r1, [pc, #80]	; (800605c <u8x8_d_uc1608_common+0x154>)
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff fee4 	bl	8005dda <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	7cda      	ldrb	r2, [r3, #19]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800601e:	e011      	b.n	8006044 <u8x8_d_uc1608_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff feba 	bl	8005d9a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8006026:	2181      	movs	r1, #129	; 0x81
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff fe7f 	bl	8005d2c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1608 has range from 0 to 255 */
 800602e:	7abb      	ldrb	r3, [r7, #10]
 8006030:	4619      	mov	r1, r3
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff fe8c 	bl	8005d50 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff febe 	bl	8005dba <u8x8_cad_EndTransfer>
      break;
 800603e:	e001      	b.n	8006044 <u8x8_d_uc1608_common+0x13c>
#endif
    default:
      return 0;
 8006040:	2300      	movs	r3, #0
 8006042:	e000      	b.n	8006046 <u8x8_d_uc1608_common+0x13e>
  }
  return 1;
 8006044:	2301      	movs	r3, #1
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	08014258 	.word	0x08014258
 8006054:	08014260 	.word	0x08014260
 8006058:	08014268 	.word	0x08014268
 800605c:	08014270 	.word	0x08014270

08006060 <u8x8_d_uc1608_240x128>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1608_240x128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	607b      	str	r3, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	72fb      	strb	r3, [r7, #11]
 800606e:	4613      	mov	r3, r2
 8006070:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1608_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8006072:	7aba      	ldrb	r2, [r7, #10]
 8006074:	7af9      	ldrb	r1, [r7, #11]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff ff45 	bl	8005f08 <u8x8_d_uc1608_common>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d114      	bne.n	80060ae <u8x8_d_uc1608_240x128+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8006084:	7afb      	ldrb	r3, [r7, #11]
 8006086:	2b09      	cmp	r3, #9
 8006088:	d002      	beq.n	8006090 <u8x8_d_uc1608_240x128+0x30>
 800608a:	2b0a      	cmp	r3, #10
 800608c:	d005      	beq.n	800609a <u8x8_d_uc1608_240x128+0x3a>
 800608e:	e00c      	b.n	80060aa <u8x8_d_uc1608_240x128+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
    	  u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1608_240x128_display_info);
 8006090:	4909      	ldr	r1, [pc, #36]	; (80060b8 <u8x8_d_uc1608_240x128+0x58>)
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f814 	bl	80060c0 <u8x8_d_helper_display_setup_memory>
    	  break;
 8006098:	e009      	b.n	80060ae <u8x8_d_uc1608_240x128+0x4e>
      case U8X8_MSG_DISPLAY_INIT:
    	  u8x8_d_helper_display_init(u8x8); // chipselect + reset
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f824 	bl	80060e8 <u8x8_d_helper_display_init>
    	  u8x8_cad_SendSequence(u8x8, u8x8_d_uc1608_240x128_init_seq);
 80060a0:	4906      	ldr	r1, [pc, #24]	; (80060bc <u8x8_d_uc1608_240x128+0x5c>)
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff fe99 	bl	8005dda <u8x8_cad_SendSequence>
	break;
 80060a8:	e001      	b.n	80060ae <u8x8_d_uc1608_240x128+0x4e>
      default:
	return 0;		/* msg unknown */
 80060aa:	2300      	movs	r3, #0
 80060ac:	e000      	b.n	80060b0 <u8x8_d_uc1608_240x128+0x50>
    }
  }
  return 1;
 80060ae:	2301      	movs	r3, #1
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	08014278 	.word	0x08014278
 80060bc:	08014290 	.word	0x08014290

080060c0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	7c9a      	ldrb	r2, [r3, #18]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80060e8:	b590      	push	{r4, r7, lr}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	695c      	ldr	r4, [r3, #20]
 80060f4:	2300      	movs	r3, #0
 80060f6:	2200      	movs	r2, #0
 80060f8:	2128      	movs	r1, #40	; 0x28
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68dc      	ldr	r4, [r3, #12]
 8006102:	2300      	movs	r3, #0
 8006104:	2200      	movs	r2, #0
 8006106:	2114      	movs	r1, #20
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800610c:	2201      	movs	r2, #1
 800610e:	214b      	movs	r1, #75	; 0x4b
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f886 	bl	8006222 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	791b      	ldrb	r3, [r3, #4]
 800611c:	461a      	mov	r2, r3
 800611e:	2129      	movs	r1, #41	; 0x29
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f87e 	bl	8006222 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8006126:	2200      	movs	r2, #0
 8006128:	214b      	movs	r1, #75	; 0x4b
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f879 	bl	8006222 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	791b      	ldrb	r3, [r3, #4]
 8006136:	461a      	mov	r2, r3
 8006138:	2129      	movs	r1, #41	; 0x29
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f871 	bl	8006222 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8006140:	2201      	movs	r2, #1
 8006142:	214b      	movs	r1, #75	; 0x4b
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f86c 	bl	8006222 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	795b      	ldrb	r3, [r3, #5]
 8006150:	461a      	mov	r2, r3
 8006152:	2129      	movs	r1, #41	; 0x29
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f864 	bl	8006222 <u8x8_gpio_call>
}    
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	bd90      	pop	{r4, r7, pc}

08006162 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8006162:	b590      	push	{r4, r7, lr}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	4608      	mov	r0, r1
 800616c:	4611      	mov	r1, r2
 800616e:	461a      	mov	r2, r3
 8006170:	4603      	mov	r3, r0
 8006172:	70fb      	strb	r3, [r7, #3]
 8006174:	460b      	mov	r3, r1
 8006176:	70bb      	strb	r3, [r7, #2]
 8006178:	4613      	mov	r3, r2
 800617a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8006180:	78bb      	ldrb	r3, [r7, #2]
 8006182:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8006184:	787b      	ldrb	r3, [r7, #1]
 8006186:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689c      	ldr	r4, [r3, #8]
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	2201      	movs	r2, #1
 8006196:	210f      	movs	r1, #15
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	47a0      	blx	r4
 800619c:	4603      	mov	r3, r0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}

080061a6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80061a6:	b590      	push	{r4, r7, lr}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689c      	ldr	r4, [r3, #8]
 80061b2:	2300      	movs	r3, #0
 80061b4:	2200      	movs	r2, #0
 80061b6:	2109      	movs	r1, #9
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	47a0      	blx	r4
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80061c4:	b590      	push	{r4, r7, lr}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689c      	ldr	r4, [r3, #8]
 80061d0:	2300      	movs	r3, #0
 80061d2:	2200      	movs	r2, #0
 80061d4:	210a      	movs	r1, #10
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	47a0      	blx	r4
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd90      	pop	{r4, r7, pc}

080061e2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80061e2:	b590      	push	{r4, r7, lr}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	460b      	mov	r3, r1
 80061ec:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689c      	ldr	r4, [r3, #8]
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	2300      	movs	r3, #0
 80061f6:	210b      	movs	r1, #11
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	47a0      	blx	r4
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bd90      	pop	{r4, r7, pc}

08006204 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8006204:	b590      	push	{r4, r7, lr}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689c      	ldr	r4, [r3, #8]
 8006210:	2300      	movs	r3, #0
 8006212:	2200      	movs	r2, #0
 8006214:	2110      	movs	r1, #16
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	47a0      	blx	r4
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	bd90      	pop	{r4, r7, pc}

08006222 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8006222:	b590      	push	{r4, r7, lr}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	70fb      	strb	r3, [r7, #3]
 800622e:	4613      	mov	r3, r2
 8006230:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695c      	ldr	r4, [r3, #20]
 8006236:	78ba      	ldrb	r2, [r7, #2]
 8006238:	78f9      	ldrb	r1, [r7, #3]
 800623a:	2300      	movs	r3, #0
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	47a0      	blx	r4
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	bd90      	pop	{r4, r7, pc}

08006248 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	72fb      	strb	r3, [r7, #11]
 8006256:	4613      	mov	r3, r2
 8006258:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <u8x8_SetupDefaults+0x60>)
 800627a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a12      	ldr	r2, [pc, #72]	; (80062c8 <u8x8_SetupDefaults+0x60>)
 8006280:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <u8x8_SetupDefaults+0x60>)
 8006286:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a0f      	ldr	r2, [pc, #60]	; (80062c8 <u8x8_SetupDefaults+0x60>)
 800628c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	22ff      	movs	r2, #255	; 0xff
 80062b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	22ff      	movs	r2, #255	; 0xff
 80062b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	08006249 	.word	0x08006249

080062cc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff ffc4 	bl	8006268 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff54 	bl	80061a6 <u8x8_SetupMemory>
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800630c:	480d      	ldr	r0, [pc, #52]	; (8006344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800630e:	490e      	ldr	r1, [pc, #56]	; (8006348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006310:	4a0e      	ldr	r2, [pc, #56]	; (800634c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006314:	e002      	b.n	800631c <LoopCopyDataInit>

08006316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800631a:	3304      	adds	r3, #4

0800631c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800631c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800631e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006320:	d3f9      	bcc.n	8006316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006322:	4a0b      	ldr	r2, [pc, #44]	; (8006350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006324:	4c0b      	ldr	r4, [pc, #44]	; (8006354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006328:	e001      	b.n	800632e <LoopFillZerobss>

0800632a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800632a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800632c:	3204      	adds	r2, #4

0800632e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800632e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006330:	d3fb      	bcc.n	800632a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006332:	f7fd fdcf 	bl	8003ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006336:	f007 f9ed 	bl	800d714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800633a:	f7fc f9af 	bl	800269c <main>
  bx  lr    
 800633e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006348:	20000770 	.word	0x20000770
  ldr r2, =_sidata
 800634c:	080146e8 	.word	0x080146e8
  ldr r2, =_sbss
 8006350:	20000770 	.word	0x20000770
  ldr r4, =_ebss
 8006354:	20011b44 	.word	0x20011b44

08006358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006358:	e7fe      	b.n	8006358 <ADC_IRQHandler>
	...

0800635c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <HAL_Init+0x40>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a0d      	ldr	r2, [pc, #52]	; (800639c <HAL_Init+0x40>)
 8006366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800636a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <HAL_Init+0x40>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <HAL_Init+0x40>)
 8006372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <HAL_Init+0x40>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a07      	ldr	r2, [pc, #28]	; (800639c <HAL_Init+0x40>)
 800637e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006384:	2003      	movs	r0, #3
 8006386:	f000 f8fc 	bl	8006582 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800638a:	200f      	movs	r0, #15
 800638c:	f7fd fc1c 	bl	8003bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006390:	f7fd fa22 	bl	80037d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40023c00 	.word	0x40023c00

080063a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_IncTick+0x20>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_IncTick+0x24>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4413      	add	r3, r2
 80063b0:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <HAL_IncTick+0x24>)
 80063b2:	6013      	str	r3, [r2, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	20000590 	.word	0x20000590
 80063c4:	20000ff4 	.word	0x20000ff4

080063c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  return uwTick;
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <HAL_GetTick+0x14>)
 80063ce:	681b      	ldr	r3, [r3, #0]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	20000ff4 	.word	0x20000ff4

080063e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063e8:	f7ff ffee 	bl	80063c8 <HAL_GetTick>
 80063ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d005      	beq.n	8006406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80063fa:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <HAL_Delay+0x44>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006406:	bf00      	nop
 8006408:	f7ff ffde 	bl	80063c8 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	429a      	cmp	r2, r3
 8006416:	d8f7      	bhi.n	8006408 <HAL_Delay+0x28>
  {
  }
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000590 	.word	0x20000590

08006428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <__NVIC_SetPriorityGrouping+0x44>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006444:	4013      	ands	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800645a:	4a04      	ldr	r2, [pc, #16]	; (800646c <__NVIC_SetPriorityGrouping+0x44>)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	60d3      	str	r3, [r2, #12]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	e000ed00 	.word	0xe000ed00

08006470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <__NVIC_GetPriorityGrouping+0x18>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	f003 0307 	and.w	r3, r3, #7
}
 800647e:	4618      	mov	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	e000ed00 	.word	0xe000ed00

0800648c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	db0b      	blt.n	80064b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	f003 021f 	and.w	r2, r3, #31
 80064a4:	4907      	ldr	r1, [pc, #28]	; (80064c4 <__NVIC_EnableIRQ+0x38>)
 80064a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	2001      	movs	r0, #1
 80064ae:	fa00 f202 	lsl.w	r2, r0, r2
 80064b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	e000e100 	.word	0xe000e100

080064c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	db0a      	blt.n	80064f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	490c      	ldr	r1, [pc, #48]	; (8006514 <__NVIC_SetPriority+0x4c>)
 80064e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e6:	0112      	lsls	r2, r2, #4
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	440b      	add	r3, r1
 80064ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064f0:	e00a      	b.n	8006508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	4908      	ldr	r1, [pc, #32]	; (8006518 <__NVIC_SetPriority+0x50>)
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	3b04      	subs	r3, #4
 8006500:	0112      	lsls	r2, r2, #4
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	440b      	add	r3, r1
 8006506:	761a      	strb	r2, [r3, #24]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	e000e100 	.word	0xe000e100
 8006518:	e000ed00 	.word	0xe000ed00

0800651c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800651c:	b480      	push	{r7}
 800651e:	b089      	sub	sp, #36	; 0x24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f1c3 0307 	rsb	r3, r3, #7
 8006536:	2b04      	cmp	r3, #4
 8006538:	bf28      	it	cs
 800653a:	2304      	movcs	r3, #4
 800653c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3304      	adds	r3, #4
 8006542:	2b06      	cmp	r3, #6
 8006544:	d902      	bls.n	800654c <NVIC_EncodePriority+0x30>
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	3b03      	subs	r3, #3
 800654a:	e000      	b.n	800654e <NVIC_EncodePriority+0x32>
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43da      	mvns	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	401a      	ands	r2, r3
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006564:	f04f 31ff 	mov.w	r1, #4294967295
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	fa01 f303 	lsl.w	r3, r1, r3
 800656e:	43d9      	mvns	r1, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006574:	4313      	orrs	r3, r2
         );
}
 8006576:	4618      	mov	r0, r3
 8006578:	3724      	adds	r7, #36	; 0x24
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff ff4c 	bl	8006428 <__NVIC_SetPriorityGrouping>
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065aa:	f7ff ff61 	bl	8006470 <__NVIC_GetPriorityGrouping>
 80065ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	6978      	ldr	r0, [r7, #20]
 80065b6:	f7ff ffb1 	bl	800651c <NVIC_EncodePriority>
 80065ba:	4602      	mov	r2, r0
 80065bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff ff80 	bl	80064c8 <__NVIC_SetPriority>
}
 80065c8:	bf00      	nop
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff ff54 	bl	800648c <__NVIC_EnableIRQ>
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b089      	sub	sp, #36	; 0x24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065fe:	2300      	movs	r3, #0
 8006600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	e16b      	b.n	80068e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006608:	2201      	movs	r2, #1
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4013      	ands	r3, r2
 800661a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	429a      	cmp	r2, r3
 8006622:	f040 815a 	bne.w	80068da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d005      	beq.n	800663e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800663a:	2b02      	cmp	r3, #2
 800663c:	d130      	bne.n	80066a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	2203      	movs	r2, #3
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	43db      	mvns	r3, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4013      	ands	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	4313      	orrs	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006674:	2201      	movs	r2, #1
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	43db      	mvns	r3, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	4013      	ands	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	091b      	lsrs	r3, r3, #4
 800668a:	f003 0201 	and.w	r2, r3, #1
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4313      	orrs	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d017      	beq.n	80066dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	2203      	movs	r2, #3
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d123      	bne.n	8006730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	08da      	lsrs	r2, r3, #3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3208      	adds	r2, #8
 80066f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	220f      	movs	r2, #15
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	43db      	mvns	r3, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4013      	ands	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	4313      	orrs	r3, r2
 8006720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	08da      	lsrs	r2, r3, #3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3208      	adds	r2, #8
 800672a:	69b9      	ldr	r1, [r7, #24]
 800672c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	2203      	movs	r2, #3
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	43db      	mvns	r3, r3
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	4013      	ands	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f003 0203 	and.w	r2, r3, #3
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	4313      	orrs	r3, r2
 800675c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80b4 	beq.w	80068da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	4b60      	ldr	r3, [pc, #384]	; (80068f8 <HAL_GPIO_Init+0x30c>)
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	4a5f      	ldr	r2, [pc, #380]	; (80068f8 <HAL_GPIO_Init+0x30c>)
 800677c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006780:	6453      	str	r3, [r2, #68]	; 0x44
 8006782:	4b5d      	ldr	r3, [pc, #372]	; (80068f8 <HAL_GPIO_Init+0x30c>)
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800678e:	4a5b      	ldr	r2, [pc, #364]	; (80068fc <HAL_GPIO_Init+0x310>)
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	089b      	lsrs	r3, r3, #2
 8006794:	3302      	adds	r3, #2
 8006796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800679a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	220f      	movs	r2, #15
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	43db      	mvns	r3, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	4013      	ands	r3, r2
 80067b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a52      	ldr	r2, [pc, #328]	; (8006900 <HAL_GPIO_Init+0x314>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d02b      	beq.n	8006812 <HAL_GPIO_Init+0x226>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a51      	ldr	r2, [pc, #324]	; (8006904 <HAL_GPIO_Init+0x318>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d025      	beq.n	800680e <HAL_GPIO_Init+0x222>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a50      	ldr	r2, [pc, #320]	; (8006908 <HAL_GPIO_Init+0x31c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01f      	beq.n	800680a <HAL_GPIO_Init+0x21e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a4f      	ldr	r2, [pc, #316]	; (800690c <HAL_GPIO_Init+0x320>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d019      	beq.n	8006806 <HAL_GPIO_Init+0x21a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a4e      	ldr	r2, [pc, #312]	; (8006910 <HAL_GPIO_Init+0x324>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_GPIO_Init+0x216>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a4d      	ldr	r2, [pc, #308]	; (8006914 <HAL_GPIO_Init+0x328>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00d      	beq.n	80067fe <HAL_GPIO_Init+0x212>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a4c      	ldr	r2, [pc, #304]	; (8006918 <HAL_GPIO_Init+0x32c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <HAL_GPIO_Init+0x20e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a4b      	ldr	r2, [pc, #300]	; (800691c <HAL_GPIO_Init+0x330>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d101      	bne.n	80067f6 <HAL_GPIO_Init+0x20a>
 80067f2:	2307      	movs	r3, #7
 80067f4:	e00e      	b.n	8006814 <HAL_GPIO_Init+0x228>
 80067f6:	2308      	movs	r3, #8
 80067f8:	e00c      	b.n	8006814 <HAL_GPIO_Init+0x228>
 80067fa:	2306      	movs	r3, #6
 80067fc:	e00a      	b.n	8006814 <HAL_GPIO_Init+0x228>
 80067fe:	2305      	movs	r3, #5
 8006800:	e008      	b.n	8006814 <HAL_GPIO_Init+0x228>
 8006802:	2304      	movs	r3, #4
 8006804:	e006      	b.n	8006814 <HAL_GPIO_Init+0x228>
 8006806:	2303      	movs	r3, #3
 8006808:	e004      	b.n	8006814 <HAL_GPIO_Init+0x228>
 800680a:	2302      	movs	r3, #2
 800680c:	e002      	b.n	8006814 <HAL_GPIO_Init+0x228>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <HAL_GPIO_Init+0x228>
 8006812:	2300      	movs	r3, #0
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	f002 0203 	and.w	r2, r2, #3
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	4093      	lsls	r3, r2
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	4313      	orrs	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006824:	4935      	ldr	r1, [pc, #212]	; (80068fc <HAL_GPIO_Init+0x310>)
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	089b      	lsrs	r3, r3, #2
 800682a:	3302      	adds	r3, #2
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006832:	4b3b      	ldr	r3, [pc, #236]	; (8006920 <HAL_GPIO_Init+0x334>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	43db      	mvns	r3, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006856:	4a32      	ldr	r2, [pc, #200]	; (8006920 <HAL_GPIO_Init+0x334>)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800685c:	4b30      	ldr	r3, [pc, #192]	; (8006920 <HAL_GPIO_Init+0x334>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	43db      	mvns	r3, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4013      	ands	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006880:	4a27      	ldr	r2, [pc, #156]	; (8006920 <HAL_GPIO_Init+0x334>)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006886:	4b26      	ldr	r3, [pc, #152]	; (8006920 <HAL_GPIO_Init+0x334>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	43db      	mvns	r3, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068aa:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <HAL_GPIO_Init+0x334>)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <HAL_GPIO_Init+0x334>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	43db      	mvns	r3, r3
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4013      	ands	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068d4:	4a12      	ldr	r2, [pc, #72]	; (8006920 <HAL_GPIO_Init+0x334>)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	3301      	adds	r3, #1
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2b0f      	cmp	r3, #15
 80068e4:	f67f ae90 	bls.w	8006608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	3724      	adds	r7, #36	; 0x24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40023800 	.word	0x40023800
 80068fc:	40013800 	.word	0x40013800
 8006900:	40020000 	.word	0x40020000
 8006904:	40020400 	.word	0x40020400
 8006908:	40020800 	.word	0x40020800
 800690c:	40020c00 	.word	0x40020c00
 8006910:	40021000 	.word	0x40021000
 8006914:	40021400 	.word	0x40021400
 8006918:	40021800 	.word	0x40021800
 800691c:	40021c00 	.word	0x40021c00
 8006920:	40013c00 	.word	0x40013c00

08006924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	887b      	ldrh	r3, [r7, #2]
 8006936:	4013      	ands	r3, r2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
 8006940:	e001      	b.n	8006946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006942:	2300      	movs	r3, #0
 8006944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	807b      	strh	r3, [r7, #2]
 8006960:	4613      	mov	r3, r2
 8006962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006964:	787b      	ldrb	r3, [r7, #1]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800696a:	887a      	ldrh	r2, [r7, #2]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006970:	e003      	b.n	800697a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006972:	887b      	ldrh	r3, [r7, #2]
 8006974:	041a      	lsls	r2, r3, #16
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	619a      	str	r2, [r3, #24]
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
	...

08006988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e267      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d075      	beq.n	8006a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069a6:	4b88      	ldr	r3, [pc, #544]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d00c      	beq.n	80069cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069b2:	4b85      	ldr	r3, [pc, #532]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d112      	bne.n	80069e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069be:	4b82      	ldr	r3, [pc, #520]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ca:	d10b      	bne.n	80069e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069cc:	4b7e      	ldr	r3, [pc, #504]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d05b      	beq.n	8006a90 <HAL_RCC_OscConfig+0x108>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d157      	bne.n	8006a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e242      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ec:	d106      	bne.n	80069fc <HAL_RCC_OscConfig+0x74>
 80069ee:	4b76      	ldr	r3, [pc, #472]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a75      	ldr	r2, [pc, #468]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 80069f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	e01d      	b.n	8006a38 <HAL_RCC_OscConfig+0xb0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a04:	d10c      	bne.n	8006a20 <HAL_RCC_OscConfig+0x98>
 8006a06:	4b70      	ldr	r3, [pc, #448]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a6f      	ldr	r2, [pc, #444]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4b6d      	ldr	r3, [pc, #436]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a6c      	ldr	r2, [pc, #432]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	e00b      	b.n	8006a38 <HAL_RCC_OscConfig+0xb0>
 8006a20:	4b69      	ldr	r3, [pc, #420]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a68      	ldr	r2, [pc, #416]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	4b66      	ldr	r3, [pc, #408]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a65      	ldr	r2, [pc, #404]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d013      	beq.n	8006a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a40:	f7ff fcc2 	bl	80063c8 <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a48:	f7ff fcbe 	bl	80063c8 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b64      	cmp	r3, #100	; 0x64
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e207      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a5a:	4b5b      	ldr	r3, [pc, #364]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCC_OscConfig+0xc0>
 8006a66:	e014      	b.n	8006a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a68:	f7ff fcae 	bl	80063c8 <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a70:	f7ff fcaa 	bl	80063c8 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e1f3      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a82:	4b51      	ldr	r3, [pc, #324]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1f0      	bne.n	8006a70 <HAL_RCC_OscConfig+0xe8>
 8006a8e:	e000      	b.n	8006a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d063      	beq.n	8006b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a9e:	4b4a      	ldr	r3, [pc, #296]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aaa:	4b47      	ldr	r3, [pc, #284]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d11c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ab6:	4b44      	ldr	r3, [pc, #272]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d116      	bne.n	8006af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ac2:	4b41      	ldr	r3, [pc, #260]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <HAL_RCC_OscConfig+0x152>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d001      	beq.n	8006ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e1c7      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ada:	4b3b      	ldr	r3, [pc, #236]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4937      	ldr	r1, [pc, #220]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aee:	e03a      	b.n	8006b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d020      	beq.n	8006b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af8:	4b34      	ldr	r3, [pc, #208]	; (8006bcc <HAL_RCC_OscConfig+0x244>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7ff fc63 	bl	80063c8 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b06:	f7ff fc5f 	bl	80063c8 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e1a8      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b18:	4b2b      	ldr	r3, [pc, #172]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b24:	4b28      	ldr	r3, [pc, #160]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	4925      	ldr	r1, [pc, #148]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	600b      	str	r3, [r1, #0]
 8006b38:	e015      	b.n	8006b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b3a:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <HAL_RCC_OscConfig+0x244>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7ff fc42 	bl	80063c8 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b48:	f7ff fc3e 	bl	80063c8 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e187      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d036      	beq.n	8006be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d016      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b7a:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <HAL_RCC_OscConfig+0x248>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b80:	f7ff fc22 	bl	80063c8 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b88:	f7ff fc1e 	bl	80063c8 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e167      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCC_OscConfig+0x200>
 8006ba6:	e01b      	b.n	8006be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba8:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <HAL_RCC_OscConfig+0x248>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bae:	f7ff fc0b 	bl	80063c8 <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb4:	e00e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb6:	f7ff fc07 	bl	80063c8 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d907      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e150      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	42470000 	.word	0x42470000
 8006bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd4:	4b88      	ldr	r3, [pc, #544]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1ea      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8097 	beq.w	8006d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bf2:	4b81      	ldr	r3, [pc, #516]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10f      	bne.n	8006c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	4b7d      	ldr	r3, [pc, #500]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	4a7c      	ldr	r2, [pc, #496]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c0e:	4b7a      	ldr	r3, [pc, #488]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1e:	4b77      	ldr	r3, [pc, #476]	; (8006dfc <HAL_RCC_OscConfig+0x474>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d118      	bne.n	8006c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c2a:	4b74      	ldr	r3, [pc, #464]	; (8006dfc <HAL_RCC_OscConfig+0x474>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a73      	ldr	r2, [pc, #460]	; (8006dfc <HAL_RCC_OscConfig+0x474>)
 8006c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c36:	f7ff fbc7 	bl	80063c8 <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3c:	e008      	b.n	8006c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3e:	f7ff fbc3 	bl	80063c8 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e10c      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c50:	4b6a      	ldr	r3, [pc, #424]	; (8006dfc <HAL_RCC_OscConfig+0x474>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f0      	beq.n	8006c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d106      	bne.n	8006c72 <HAL_RCC_OscConfig+0x2ea>
 8006c64:	4b64      	ldr	r3, [pc, #400]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c68:	4a63      	ldr	r2, [pc, #396]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c6a:	f043 0301 	orr.w	r3, r3, #1
 8006c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c70:	e01c      	b.n	8006cac <HAL_RCC_OscConfig+0x324>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b05      	cmp	r3, #5
 8006c78:	d10c      	bne.n	8006c94 <HAL_RCC_OscConfig+0x30c>
 8006c7a:	4b5f      	ldr	r3, [pc, #380]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	4a5e      	ldr	r2, [pc, #376]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c80:	f043 0304 	orr.w	r3, r3, #4
 8006c84:	6713      	str	r3, [r2, #112]	; 0x70
 8006c86:	4b5c      	ldr	r3, [pc, #368]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	4a5b      	ldr	r2, [pc, #364]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	6713      	str	r3, [r2, #112]	; 0x70
 8006c92:	e00b      	b.n	8006cac <HAL_RCC_OscConfig+0x324>
 8006c94:	4b58      	ldr	r3, [pc, #352]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c98:	4a57      	ldr	r2, [pc, #348]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006c9a:	f023 0301 	bic.w	r3, r3, #1
 8006c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca0:	4b55      	ldr	r3, [pc, #340]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca4:	4a54      	ldr	r2, [pc, #336]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006ca6:	f023 0304 	bic.w	r3, r3, #4
 8006caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d015      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb4:	f7ff fb88 	bl	80063c8 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cbc:	f7ff fb84 	bl	80063c8 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e0cb      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd2:	4b49      	ldr	r3, [pc, #292]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0ee      	beq.n	8006cbc <HAL_RCC_OscConfig+0x334>
 8006cde:	e014      	b.n	8006d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce0:	f7ff fb72 	bl	80063c8 <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce6:	e00a      	b.n	8006cfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce8:	f7ff fb6e 	bl	80063c8 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e0b5      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cfe:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1ee      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d105      	bne.n	8006d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d10:	4b39      	ldr	r3, [pc, #228]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	4a38      	ldr	r2, [pc, #224]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 80a1 	beq.w	8006e68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d26:	4b34      	ldr	r3, [pc, #208]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 030c 	and.w	r3, r3, #12
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d05c      	beq.n	8006dec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d141      	bne.n	8006dbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3a:	4b31      	ldr	r3, [pc, #196]	; (8006e00 <HAL_RCC_OscConfig+0x478>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d40:	f7ff fb42 	bl	80063c8 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d48:	f7ff fb3e 	bl	80063c8 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e087      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d5a:	4b27      	ldr	r3, [pc, #156]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1f0      	bne.n	8006d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69da      	ldr	r2, [r3, #28]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	019b      	lsls	r3, r3, #6
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	061b      	lsls	r3, r3, #24
 8006d8a:	491b      	ldr	r1, [pc, #108]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d90:	4b1b      	ldr	r3, [pc, #108]	; (8006e00 <HAL_RCC_OscConfig+0x478>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d96:	f7ff fb17 	bl	80063c8 <HAL_GetTick>
 8006d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d9e:	f7ff fb13 	bl	80063c8 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e05c      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db0:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0f0      	beq.n	8006d9e <HAL_RCC_OscConfig+0x416>
 8006dbc:	e054      	b.n	8006e68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dbe:	4b10      	ldr	r3, [pc, #64]	; (8006e00 <HAL_RCC_OscConfig+0x478>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc4:	f7ff fb00 	bl	80063c8 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dcc:	f7ff fafc 	bl	80063c8 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e045      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dde:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <HAL_RCC_OscConfig+0x470>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f0      	bne.n	8006dcc <HAL_RCC_OscConfig+0x444>
 8006dea:	e03d      	b.n	8006e68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d107      	bne.n	8006e04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e038      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	40007000 	.word	0x40007000
 8006e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e04:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <HAL_RCC_OscConfig+0x4ec>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d028      	beq.n	8006e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d121      	bne.n	8006e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d11a      	bne.n	8006e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e34:	4013      	ands	r3, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d111      	bne.n	8006e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d107      	bne.n	8006e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d001      	beq.n	8006e68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	40023800 	.word	0x40023800

08006e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0cc      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e8c:	4b68      	ldr	r3, [pc, #416]	; (8007030 <HAL_RCC_ClockConfig+0x1b8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d90c      	bls.n	8006eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e9a:	4b65      	ldr	r3, [pc, #404]	; (8007030 <HAL_RCC_ClockConfig+0x1b8>)
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea2:	4b63      	ldr	r3, [pc, #396]	; (8007030 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d001      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0b8      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d020      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ecc:	4b59      	ldr	r3, [pc, #356]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4a58      	ldr	r2, [pc, #352]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ee4:	4b53      	ldr	r3, [pc, #332]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4a52      	ldr	r2, [pc, #328]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef0:	4b50      	ldr	r3, [pc, #320]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	494d      	ldr	r1, [pc, #308]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d044      	beq.n	8006f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d107      	bne.n	8006f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f16:	4b47      	ldr	r3, [pc, #284]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d119      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e07f      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d003      	beq.n	8006f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d107      	bne.n	8006f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f36:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e06f      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f46:	4b3b      	ldr	r3, [pc, #236]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e067      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f56:	4b37      	ldr	r3, [pc, #220]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f023 0203 	bic.w	r2, r3, #3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4934      	ldr	r1, [pc, #208]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f68:	f7ff fa2e 	bl	80063c8 <HAL_GetTick>
 8006f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f70:	f7ff fa2a 	bl	80063c8 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e04f      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f86:	4b2b      	ldr	r3, [pc, #172]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 020c 	and.w	r2, r3, #12
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d1eb      	bne.n	8006f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f98:	4b25      	ldr	r3, [pc, #148]	; (8007030 <HAL_RCC_ClockConfig+0x1b8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d20c      	bcs.n	8006fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fa6:	4b22      	ldr	r3, [pc, #136]	; (8007030 <HAL_RCC_ClockConfig+0x1b8>)
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fae:	4b20      	ldr	r3, [pc, #128]	; (8007030 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d001      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e032      	b.n	8007026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	4916      	ldr	r1, [pc, #88]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	490e      	ldr	r1, [pc, #56]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ffe:	f000 f821 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8007002:	4602      	mov	r2, r0
 8007004:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	091b      	lsrs	r3, r3, #4
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	490a      	ldr	r1, [pc, #40]	; (8007038 <HAL_RCC_ClockConfig+0x1c0>)
 8007010:	5ccb      	ldrb	r3, [r1, r3]
 8007012:	fa22 f303 	lsr.w	r3, r2, r3
 8007016:	4a09      	ldr	r2, [pc, #36]	; (800703c <HAL_RCC_ClockConfig+0x1c4>)
 8007018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <HAL_RCC_ClockConfig+0x1c8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7fc fdd2 	bl	8003bc8 <HAL_InitTick>

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40023c00 	.word	0x40023c00
 8007034:	40023800 	.word	0x40023800
 8007038:	0800fc54 	.word	0x0800fc54
 800703c:	20000588 	.word	0x20000588
 8007040:	2000058c 	.word	0x2000058c

08007044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007048:	b090      	sub	sp, #64	; 0x40
 800704a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
 8007050:	2300      	movs	r3, #0
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007054:	2300      	movs	r3, #0
 8007056:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800705c:	4b59      	ldr	r3, [pc, #356]	; (80071c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 030c 	and.w	r3, r3, #12
 8007064:	2b08      	cmp	r3, #8
 8007066:	d00d      	beq.n	8007084 <HAL_RCC_GetSysClockFreq+0x40>
 8007068:	2b08      	cmp	r3, #8
 800706a:	f200 80a1 	bhi.w	80071b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_RCC_GetSysClockFreq+0x34>
 8007072:	2b04      	cmp	r3, #4
 8007074:	d003      	beq.n	800707e <HAL_RCC_GetSysClockFreq+0x3a>
 8007076:	e09b      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007078:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800707a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800707c:	e09b      	b.n	80071b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800707e:	4b53      	ldr	r3, [pc, #332]	; (80071cc <HAL_RCC_GetSysClockFreq+0x188>)
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007082:	e098      	b.n	80071b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007084:	4b4f      	ldr	r3, [pc, #316]	; (80071c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800708e:	4b4d      	ldr	r3, [pc, #308]	; (80071c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d028      	beq.n	80070ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800709a:	4b4a      	ldr	r3, [pc, #296]	; (80071c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	099b      	lsrs	r3, r3, #6
 80070a0:	2200      	movs	r2, #0
 80070a2:	623b      	str	r3, [r7, #32]
 80070a4:	627a      	str	r2, [r7, #36]	; 0x24
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80070ac:	2100      	movs	r1, #0
 80070ae:	4b47      	ldr	r3, [pc, #284]	; (80071cc <HAL_RCC_GetSysClockFreq+0x188>)
 80070b0:	fb03 f201 	mul.w	r2, r3, r1
 80070b4:	2300      	movs	r3, #0
 80070b6:	fb00 f303 	mul.w	r3, r0, r3
 80070ba:	4413      	add	r3, r2
 80070bc:	4a43      	ldr	r2, [pc, #268]	; (80071cc <HAL_RCC_GetSysClockFreq+0x188>)
 80070be:	fba0 1202 	umull	r1, r2, r0, r2
 80070c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070c4:	460a      	mov	r2, r1
 80070c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80070c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ca:	4413      	add	r3, r2
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d0:	2200      	movs	r2, #0
 80070d2:	61bb      	str	r3, [r7, #24]
 80070d4:	61fa      	str	r2, [r7, #28]
 80070d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80070de:	f7f9 fdb3 	bl	8000c48 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4613      	mov	r3, r2
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ea:	e053      	b.n	8007194 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070ec:	4b35      	ldr	r3, [pc, #212]	; (80071c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	099b      	lsrs	r3, r3, #6
 80070f2:	2200      	movs	r2, #0
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	617a      	str	r2, [r7, #20]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80070fe:	f04f 0b00 	mov.w	fp, #0
 8007102:	4652      	mov	r2, sl
 8007104:	465b      	mov	r3, fp
 8007106:	f04f 0000 	mov.w	r0, #0
 800710a:	f04f 0100 	mov.w	r1, #0
 800710e:	0159      	lsls	r1, r3, #5
 8007110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007114:	0150      	lsls	r0, r2, #5
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	ebb2 080a 	subs.w	r8, r2, sl
 800711e:	eb63 090b 	sbc.w	r9, r3, fp
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800712e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007132:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007136:	ebb2 0408 	subs.w	r4, r2, r8
 800713a:	eb63 0509 	sbc.w	r5, r3, r9
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	00eb      	lsls	r3, r5, #3
 8007148:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800714c:	00e2      	lsls	r2, r4, #3
 800714e:	4614      	mov	r4, r2
 8007150:	461d      	mov	r5, r3
 8007152:	eb14 030a 	adds.w	r3, r4, sl
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	eb45 030b 	adc.w	r3, r5, fp
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	f04f 0200 	mov.w	r2, #0
 8007162:	f04f 0300 	mov.w	r3, #0
 8007166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800716a:	4629      	mov	r1, r5
 800716c:	028b      	lsls	r3, r1, #10
 800716e:	4621      	mov	r1, r4
 8007170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007174:	4621      	mov	r1, r4
 8007176:	028a      	lsls	r2, r1, #10
 8007178:	4610      	mov	r0, r2
 800717a:	4619      	mov	r1, r3
 800717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717e:	2200      	movs	r2, #0
 8007180:	60bb      	str	r3, [r7, #8]
 8007182:	60fa      	str	r2, [r7, #12]
 8007184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007188:	f7f9 fd5e 	bl	8000c48 <__aeabi_uldivmod>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4613      	mov	r3, r2
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007194:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	3301      	adds	r3, #1
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80071a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071ae:	e002      	b.n	80071b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80071b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3740      	adds	r7, #64	; 0x40
 80071bc:	46bd      	mov	sp, r7
 80071be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800
 80071c8:	00f42400 	.word	0x00f42400
 80071cc:	00b71b00 	.word	0x00b71b00

080071d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071d4:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80071d6:	681b      	ldr	r3, [r3, #0]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	20000588 	.word	0x20000588

080071e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80071ec:	f7ff fff0 	bl	80071d0 <HAL_RCC_GetHCLKFreq>
 80071f0:	4602      	mov	r2, r0
 80071f2:	4b05      	ldr	r3, [pc, #20]	; (8007208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	0b5b      	lsrs	r3, r3, #13
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	4903      	ldr	r1, [pc, #12]	; (800720c <HAL_RCC_GetPCLK2Freq+0x24>)
 80071fe:	5ccb      	ldrb	r3, [r1, r3]
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40023800 	.word	0x40023800
 800720c:	0800fc64 	.word	0x0800fc64

08007210 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	220f      	movs	r2, #15
 800721e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007220:	4b12      	ldr	r3, [pc, #72]	; (800726c <HAL_RCC_GetClockConfig+0x5c>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0203 	and.w	r2, r3, #3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <HAL_RCC_GetClockConfig+0x5c>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007238:	4b0c      	ldr	r3, [pc, #48]	; (800726c <HAL_RCC_GetClockConfig+0x5c>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <HAL_RCC_GetClockConfig+0x5c>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007252:	4b07      	ldr	r3, [pc, #28]	; (8007270 <HAL_RCC_GetClockConfig+0x60>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0207 	and.w	r2, r3, #7
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	601a      	str	r2, [r3, #0]
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	40023c00 	.word	0x40023c00

08007274 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007298:	2b00      	cmp	r3, #0
 800729a:	d035      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800729c:	4b62      	ldr	r3, [pc, #392]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072a2:	f7ff f891 	bl	80063c8 <HAL_GetTick>
 80072a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072aa:	f7ff f88d 	bl	80063c8 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e0b0      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072bc:	4b5b      	ldr	r3, [pc, #364]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1f0      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	019a      	lsls	r2, r3, #6
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	071b      	lsls	r3, r3, #28
 80072d4:	4955      	ldr	r1, [pc, #340]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072dc:	4b52      	ldr	r3, [pc, #328]	; (8007428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80072de:	2201      	movs	r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072e2:	f7ff f871 	bl	80063c8 <HAL_GetTick>
 80072e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072e8:	e008      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072ea:	f7ff f86d 	bl	80063c8 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d901      	bls.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e090      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072fc:	4b4b      	ldr	r3, [pc, #300]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f0      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8083 	beq.w	800741c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	4b44      	ldr	r3, [pc, #272]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	4a43      	ldr	r2, [pc, #268]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007324:	6413      	str	r3, [r2, #64]	; 0x40
 8007326:	4b41      	ldr	r3, [pc, #260]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007332:	4b3f      	ldr	r3, [pc, #252]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a3e      	ldr	r2, [pc, #248]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800733c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800733e:	f7ff f843 	bl	80063c8 <HAL_GetTick>
 8007342:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007344:	e008      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007346:	f7ff f83f 	bl	80063c8 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e062      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007358:	4b35      	ldr	r3, [pc, #212]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0f0      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007364:	4b31      	ldr	r3, [pc, #196]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800736c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d02f      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	429a      	cmp	r2, r3
 8007380:	d028      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800738c:	4b29      	ldr	r3, [pc, #164]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800738e:	2201      	movs	r2, #1
 8007390:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007392:	4b28      	ldr	r3, [pc, #160]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007398:	4a24      	ldr	r2, [pc, #144]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800739e:	4b23      	ldr	r3, [pc, #140]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d114      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073aa:	f7ff f80d 	bl	80063c8 <HAL_GetTick>
 80073ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b0:	e00a      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073b2:	f7ff f809 	bl	80063c8 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e02a      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c8:	4b18      	ldr	r3, [pc, #96]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0ee      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e0:	d10d      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f6:	490d      	ldr	r1, [pc, #52]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	608b      	str	r3, [r1, #8]
 80073fc:	e005      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073fe:	4b0b      	ldr	r3, [pc, #44]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	4a0a      	ldr	r2, [pc, #40]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007404:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007408:	6093      	str	r3, [r2, #8]
 800740a:	4b08      	ldr	r3, [pc, #32]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800740c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007416:	4905      	ldr	r1, [pc, #20]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007418:	4313      	orrs	r3, r2
 800741a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	42470068 	.word	0x42470068
 800742c:	40023800 	.word	0x40023800
 8007430:	40007000 	.word	0x40007000
 8007434:	42470e40 	.word	0x42470e40

08007438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e041      	b.n	80074ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fc f9e6 	bl	8003830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3304      	adds	r3, #4
 8007474:	4619      	mov	r1, r3
 8007476:	4610      	mov	r0, r2
 8007478:	f001 f84e 	bl	8008518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d001      	beq.n	80074f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e04e      	b.n	800758e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a23      	ldr	r2, [pc, #140]	; (800759c <HAL_TIM_Base_Start_IT+0xc4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d022      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751a:	d01d      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d018      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d013      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00e      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <HAL_TIM_Base_Start_IT+0xd4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d009      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a19      	ldr	r2, [pc, #100]	; (80075b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d004      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a18      	ldr	r2, [pc, #96]	; (80075b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d111      	bne.n	800757c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b06      	cmp	r3, #6
 8007568:	d010      	beq.n	800758c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f042 0201 	orr.w	r2, r2, #1
 8007578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757a:	e007      	b.n	800758c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40000400 	.word	0x40000400
 80075a4:	40000800 	.word	0x40000800
 80075a8:	40000c00 	.word	0x40000c00
 80075ac:	40010400 	.word	0x40010400
 80075b0:	40014000 	.word	0x40014000
 80075b4:	40001800 	.word	0x40001800

080075b8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d109      	bne.n	80075e0 <HAL_TIM_OC_Start_IT+0x28>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	e022      	b.n	8007626 <HAL_TIM_OC_Start_IT+0x6e>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d109      	bne.n	80075fa <HAL_TIM_OC_Start_IT+0x42>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	bf14      	ite	ne
 80075f2:	2301      	movne	r3, #1
 80075f4:	2300      	moveq	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	e015      	b.n	8007626 <HAL_TIM_OC_Start_IT+0x6e>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d109      	bne.n	8007614 <HAL_TIM_OC_Start_IT+0x5c>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b01      	cmp	r3, #1
 800760a:	bf14      	ite	ne
 800760c:	2301      	movne	r3, #1
 800760e:	2300      	moveq	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	e008      	b.n	8007626 <HAL_TIM_OC_Start_IT+0x6e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	bf14      	ite	ne
 8007620:	2301      	movne	r3, #1
 8007622:	2300      	moveq	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e0c7      	b.n	80077be <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d104      	bne.n	800763e <HAL_TIM_OC_Start_IT+0x86>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800763c:	e013      	b.n	8007666 <HAL_TIM_OC_Start_IT+0xae>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b04      	cmp	r3, #4
 8007642:	d104      	bne.n	800764e <HAL_TIM_OC_Start_IT+0x96>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800764c:	e00b      	b.n	8007666 <HAL_TIM_OC_Start_IT+0xae>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b08      	cmp	r3, #8
 8007652:	d104      	bne.n	800765e <HAL_TIM_OC_Start_IT+0xa6>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800765c:	e003      	b.n	8007666 <HAL_TIM_OC_Start_IT+0xae>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2202      	movs	r2, #2
 8007662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b0c      	cmp	r3, #12
 800766a:	d841      	bhi.n	80076f0 <HAL_TIM_OC_Start_IT+0x138>
 800766c:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <HAL_TIM_OC_Start_IT+0xbc>)
 800766e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007672:	bf00      	nop
 8007674:	080076a9 	.word	0x080076a9
 8007678:	080076f1 	.word	0x080076f1
 800767c:	080076f1 	.word	0x080076f1
 8007680:	080076f1 	.word	0x080076f1
 8007684:	080076bb 	.word	0x080076bb
 8007688:	080076f1 	.word	0x080076f1
 800768c:	080076f1 	.word	0x080076f1
 8007690:	080076f1 	.word	0x080076f1
 8007694:	080076cd 	.word	0x080076cd
 8007698:	080076f1 	.word	0x080076f1
 800769c:	080076f1 	.word	0x080076f1
 80076a0:	080076f1 	.word	0x080076f1
 80076a4:	080076df 	.word	0x080076df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0202 	orr.w	r2, r2, #2
 80076b6:	60da      	str	r2, [r3, #12]
      break;
 80076b8:	e01d      	b.n	80076f6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0204 	orr.w	r2, r2, #4
 80076c8:	60da      	str	r2, [r3, #12]
      break;
 80076ca:	e014      	b.n	80076f6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0208 	orr.w	r2, r2, #8
 80076da:	60da      	str	r2, [r3, #12]
      break;
 80076dc:	e00b      	b.n	80076f6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0210 	orr.w	r2, r2, #16
 80076ec:	60da      	str	r2, [r3, #12]
      break;
 80076ee:	e002      	b.n	80076f6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
      break;
 80076f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d15f      	bne.n	80077bc <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2201      	movs	r2, #1
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f001 fb1b 	bl	8008d40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a2e      	ldr	r2, [pc, #184]	; (80077c8 <HAL_TIM_OC_Start_IT+0x210>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d004      	beq.n	800771e <HAL_TIM_OC_Start_IT+0x166>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a2c      	ldr	r2, [pc, #176]	; (80077cc <HAL_TIM_OC_Start_IT+0x214>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d101      	bne.n	8007722 <HAL_TIM_OC_Start_IT+0x16a>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <HAL_TIM_OC_Start_IT+0x16c>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007736:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <HAL_TIM_OC_Start_IT+0x210>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d022      	beq.n	8007788 <HAL_TIM_OC_Start_IT+0x1d0>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d01d      	beq.n	8007788 <HAL_TIM_OC_Start_IT+0x1d0>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <HAL_TIM_OC_Start_IT+0x218>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d018      	beq.n	8007788 <HAL_TIM_OC_Start_IT+0x1d0>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <HAL_TIM_OC_Start_IT+0x21c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d013      	beq.n	8007788 <HAL_TIM_OC_Start_IT+0x1d0>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <HAL_TIM_OC_Start_IT+0x220>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <HAL_TIM_OC_Start_IT+0x1d0>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a17      	ldr	r2, [pc, #92]	; (80077cc <HAL_TIM_OC_Start_IT+0x214>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <HAL_TIM_OC_Start_IT+0x1d0>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <HAL_TIM_OC_Start_IT+0x224>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_TIM_OC_Start_IT+0x1d0>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <HAL_TIM_OC_Start_IT+0x228>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d111      	bne.n	80077ac <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 0307 	and.w	r3, r3, #7
 8007792:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b06      	cmp	r3, #6
 8007798:	d010      	beq.n	80077bc <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0201 	orr.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077aa:	e007      	b.n	80077bc <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40010400 	.word	0x40010400
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40001800 	.word	0x40001800

080077e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e041      	b.n	800787a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f839 	bl	8007882 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f000 fe78 	bl	8008518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <HAL_TIM_PWM_Start+0x24>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	bf14      	ite	ne
 80078b4:	2301      	movne	r3, #1
 80078b6:	2300      	moveq	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	e022      	b.n	8007902 <HAL_TIM_PWM_Start+0x6a>
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d109      	bne.n	80078d6 <HAL_TIM_PWM_Start+0x3e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	bf14      	ite	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	2300      	moveq	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	e015      	b.n	8007902 <HAL_TIM_PWM_Start+0x6a>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d109      	bne.n	80078f0 <HAL_TIM_PWM_Start+0x58>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	bf14      	ite	ne
 80078e8:	2301      	movne	r3, #1
 80078ea:	2300      	moveq	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	e008      	b.n	8007902 <HAL_TIM_PWM_Start+0x6a>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	bf14      	ite	ne
 80078fc:	2301      	movne	r3, #1
 80078fe:	2300      	moveq	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e07c      	b.n	8007a04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <HAL_TIM_PWM_Start+0x82>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007918:	e013      	b.n	8007942 <HAL_TIM_PWM_Start+0xaa>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b04      	cmp	r3, #4
 800791e:	d104      	bne.n	800792a <HAL_TIM_PWM_Start+0x92>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007928:	e00b      	b.n	8007942 <HAL_TIM_PWM_Start+0xaa>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b08      	cmp	r3, #8
 800792e:	d104      	bne.n	800793a <HAL_TIM_PWM_Start+0xa2>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007938:	e003      	b.n	8007942 <HAL_TIM_PWM_Start+0xaa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2202      	movs	r2, #2
 800793e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2201      	movs	r2, #1
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	4618      	mov	r0, r3
 800794c:	f001 f9f8 	bl	8008d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a2d      	ldr	r2, [pc, #180]	; (8007a0c <HAL_TIM_PWM_Start+0x174>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d004      	beq.n	8007964 <HAL_TIM_PWM_Start+0xcc>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a2c      	ldr	r2, [pc, #176]	; (8007a10 <HAL_TIM_PWM_Start+0x178>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d101      	bne.n	8007968 <HAL_TIM_PWM_Start+0xd0>
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <HAL_TIM_PWM_Start+0xd2>
 8007968:	2300      	movs	r3, #0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d007      	beq.n	800797e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800797c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a22      	ldr	r2, [pc, #136]	; (8007a0c <HAL_TIM_PWM_Start+0x174>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d022      	beq.n	80079ce <HAL_TIM_PWM_Start+0x136>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d01d      	beq.n	80079ce <HAL_TIM_PWM_Start+0x136>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1f      	ldr	r2, [pc, #124]	; (8007a14 <HAL_TIM_PWM_Start+0x17c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d018      	beq.n	80079ce <HAL_TIM_PWM_Start+0x136>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_TIM_PWM_Start+0x180>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d013      	beq.n	80079ce <HAL_TIM_PWM_Start+0x136>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <HAL_TIM_PWM_Start+0x184>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00e      	beq.n	80079ce <HAL_TIM_PWM_Start+0x136>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a16      	ldr	r2, [pc, #88]	; (8007a10 <HAL_TIM_PWM_Start+0x178>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d009      	beq.n	80079ce <HAL_TIM_PWM_Start+0x136>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a18      	ldr	r2, [pc, #96]	; (8007a20 <HAL_TIM_PWM_Start+0x188>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d004      	beq.n	80079ce <HAL_TIM_PWM_Start+0x136>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a16      	ldr	r2, [pc, #88]	; (8007a24 <HAL_TIM_PWM_Start+0x18c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d111      	bne.n	80079f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b06      	cmp	r3, #6
 80079de:	d010      	beq.n	8007a02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f0:	e007      	b.n	8007a02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0201 	orr.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40010400 	.word	0x40010400
 8007a14:	40000400 	.word	0x40000400
 8007a18:	40000800 	.word	0x40000800
 8007a1c:	40000c00 	.word	0x40000c00
 8007a20:	40014000 	.word	0x40014000
 8007a24:	40001800 	.word	0x40001800

08007a28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 f980 	bl	8008d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a2e      	ldr	r2, [pc, #184]	; (8007b00 <HAL_TIM_PWM_Stop+0xd8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_TIM_PWM_Stop+0x2c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a2d      	ldr	r2, [pc, #180]	; (8007b04 <HAL_TIM_PWM_Stop+0xdc>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d101      	bne.n	8007a58 <HAL_TIM_PWM_Stop+0x30>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <HAL_TIM_PWM_Stop+0x32>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d017      	beq.n	8007a8e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6a1a      	ldr	r2, [r3, #32]
 8007a64:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10f      	bne.n	8007a8e <HAL_TIM_PWM_Stop+0x66>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6a1a      	ldr	r2, [r3, #32]
 8007a74:	f240 4344 	movw	r3, #1092	; 0x444
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d107      	bne.n	8007a8e <HAL_TIM_PWM_Stop+0x66>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6a1a      	ldr	r2, [r3, #32]
 8007a94:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10f      	bne.n	8007abe <HAL_TIM_PWM_Stop+0x96>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6a1a      	ldr	r2, [r3, #32]
 8007aa4:	f240 4344 	movw	r3, #1092	; 0x444
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d107      	bne.n	8007abe <HAL_TIM_PWM_Stop+0x96>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_PWM_Stop+0xa6>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007acc:	e013      	b.n	8007af6 <HAL_TIM_PWM_Stop+0xce>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_PWM_Stop+0xb6>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007adc:	e00b      	b.n	8007af6 <HAL_TIM_PWM_Stop+0xce>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_PWM_Stop+0xc6>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aec:	e003      	b.n	8007af6 <HAL_TIM_PWM_Stop+0xce>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	40010000 	.word	0x40010000
 8007b04:	40010400 	.word	0x40010400

08007b08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e041      	b.n	8007b9e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f839 	bl	8007ba6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f000 fce6 	bl	8008518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_IC_Start_IT+0x1e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	e013      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x46>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_IC_Start_IT+0x2e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	e00b      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x46>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d104      	bne.n	8007bfa <HAL_TIM_IC_Start_IT+0x3e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	e003      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x46>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d104      	bne.n	8007c14 <HAL_TIM_IC_Start_IT+0x58>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	e013      	b.n	8007c3c <HAL_TIM_IC_Start_IT+0x80>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d104      	bne.n	8007c24 <HAL_TIM_IC_Start_IT+0x68>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	e00b      	b.n	8007c3c <HAL_TIM_IC_Start_IT+0x80>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d104      	bne.n	8007c34 <HAL_TIM_IC_Start_IT+0x78>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	e003      	b.n	8007c3c <HAL_TIM_IC_Start_IT+0x80>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d102      	bne.n	8007c4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c44:	7b7b      	ldrb	r3, [r7, #13]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d001      	beq.n	8007c4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e0cc      	b.n	8007de8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <HAL_TIM_IC_Start_IT+0xa2>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c5c:	e013      	b.n	8007c86 <HAL_TIM_IC_Start_IT+0xca>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d104      	bne.n	8007c6e <HAL_TIM_IC_Start_IT+0xb2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c6c:	e00b      	b.n	8007c86 <HAL_TIM_IC_Start_IT+0xca>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d104      	bne.n	8007c7e <HAL_TIM_IC_Start_IT+0xc2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c7c:	e003      	b.n	8007c86 <HAL_TIM_IC_Start_IT+0xca>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2202      	movs	r2, #2
 8007c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d104      	bne.n	8007c96 <HAL_TIM_IC_Start_IT+0xda>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c94:	e013      	b.n	8007cbe <HAL_TIM_IC_Start_IT+0x102>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d104      	bne.n	8007ca6 <HAL_TIM_IC_Start_IT+0xea>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ca4:	e00b      	b.n	8007cbe <HAL_TIM_IC_Start_IT+0x102>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d104      	bne.n	8007cb6 <HAL_TIM_IC_Start_IT+0xfa>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cb4:	e003      	b.n	8007cbe <HAL_TIM_IC_Start_IT+0x102>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b0c      	cmp	r3, #12
 8007cc2:	d841      	bhi.n	8007d48 <HAL_TIM_IC_Start_IT+0x18c>
 8007cc4:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <HAL_TIM_IC_Start_IT+0x110>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	08007d49 	.word	0x08007d49
 8007cd4:	08007d49 	.word	0x08007d49
 8007cd8:	08007d49 	.word	0x08007d49
 8007cdc:	08007d13 	.word	0x08007d13
 8007ce0:	08007d49 	.word	0x08007d49
 8007ce4:	08007d49 	.word	0x08007d49
 8007ce8:	08007d49 	.word	0x08007d49
 8007cec:	08007d25 	.word	0x08007d25
 8007cf0:	08007d49 	.word	0x08007d49
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007d49 	.word	0x08007d49
 8007cfc:	08007d37 	.word	0x08007d37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0202 	orr.w	r2, r2, #2
 8007d0e:	60da      	str	r2, [r3, #12]
      break;
 8007d10:	e01d      	b.n	8007d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0204 	orr.w	r2, r2, #4
 8007d20:	60da      	str	r2, [r3, #12]
      break;
 8007d22:	e014      	b.n	8007d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0208 	orr.w	r2, r2, #8
 8007d32:	60da      	str	r2, [r3, #12]
      break;
 8007d34:	e00b      	b.n	8007d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0210 	orr.w	r2, r2, #16
 8007d44:	60da      	str	r2, [r3, #12]
      break;
 8007d46:	e002      	b.n	8007d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d148      	bne.n	8007de6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 ffef 	bl	8008d40 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a22      	ldr	r2, [pc, #136]	; (8007df0 <HAL_TIM_IC_Start_IT+0x234>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d022      	beq.n	8007db2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d74:	d01d      	beq.n	8007db2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1e      	ldr	r2, [pc, #120]	; (8007df4 <HAL_TIM_IC_Start_IT+0x238>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d018      	beq.n	8007db2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1c      	ldr	r2, [pc, #112]	; (8007df8 <HAL_TIM_IC_Start_IT+0x23c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <HAL_TIM_IC_Start_IT+0x240>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a19      	ldr	r2, [pc, #100]	; (8007e00 <HAL_TIM_IC_Start_IT+0x244>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a18      	ldr	r2, [pc, #96]	; (8007e04 <HAL_TIM_IC_Start_IT+0x248>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a16      	ldr	r2, [pc, #88]	; (8007e08 <HAL_TIM_IC_Start_IT+0x24c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d111      	bne.n	8007dd6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b06      	cmp	r3, #6
 8007dc2:	d010      	beq.n	8007de6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0201 	orr.w	r2, r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd4:	e007      	b.n	8007de6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0201 	orr.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40000400 	.word	0x40000400
 8007df8:	40000800 	.word	0x40000800
 8007dfc:	40000c00 	.word	0x40000c00
 8007e00:	40010400 	.word	0x40010400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40001800 	.word	0x40001800

08007e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d122      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d11b      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0202 	mvn.w	r2, #2
 8007e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fa fb8a 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 8007e54:	e005      	b.n	8007e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fb4a 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7fa fbed 	bl	800263c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d122      	bne.n	8007ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d11b      	bne.n	8007ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0204 	mvn.w	r2, #4
 8007e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fa fb60 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 8007ea8:	e005      	b.n	8007eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb20 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7fa fbc3 	bl	800263c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d122      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d11b      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0208 	mvn.w	r2, #8
 8007ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fa fb36 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 8007efc:	e005      	b.n	8007f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 faf6 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7fa fb99 	bl	800263c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0310 	and.w	r3, r3, #16
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d122      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d11b      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0210 	mvn.w	r2, #16
 8007f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2208      	movs	r2, #8
 8007f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fa fb0c 	bl	8002568 <HAL_TIM_IC_CaptureCallback>
 8007f50:	e005      	b.n	8007f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 facc 	bl	80084f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7fa fb6f 	bl	800263c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d10e      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d107      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0201 	mvn.w	r2, #1
 8007f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fb fb9c 	bl	80036c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d10e      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa8:	2b80      	cmp	r3, #128	; 0x80
 8007faa:	d107      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 ff6e 	bl	8008e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d10e      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	2b40      	cmp	r3, #64	; 0x40
 8007fd6:	d107      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa8e 	bl	8008504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d10e      	bne.n	8008014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0320 	and.w	r3, r3, #32
 8008000:	2b20      	cmp	r3, #32
 8008002:	d107      	bne.n	8008014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0220 	mvn.w	r2, #32
 800800c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 ff38 	bl	8008e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008036:	2302      	movs	r3, #2
 8008038:	e088      	b.n	800814c <HAL_TIM_IC_ConfigChannel+0x130>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11b      	bne.n	8008080 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6818      	ldr	r0, [r3, #0]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f000 fcae 	bl	80089b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699a      	ldr	r2, [r3, #24]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 020c 	bic.w	r2, r2, #12
 800806a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6999      	ldr	r1, [r3, #24]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	619a      	str	r2, [r3, #24]
 800807e:	e060      	b.n	8008142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b04      	cmp	r3, #4
 8008084:	d11c      	bne.n	80080c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f000 fd32 	bl	8008afe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80080a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6999      	ldr	r1, [r3, #24]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	021a      	lsls	r2, r3, #8
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	619a      	str	r2, [r3, #24]
 80080be:	e040      	b.n	8008142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d11b      	bne.n	80080fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	6819      	ldr	r1, [r3, #0]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f000 fd7f 	bl	8008bd8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69da      	ldr	r2, [r3, #28]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 020c 	bic.w	r2, r2, #12
 80080e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69d9      	ldr	r1, [r3, #28]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	61da      	str	r2, [r3, #28]
 80080fc:	e021      	b.n	8008142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b0c      	cmp	r3, #12
 8008102:	d11c      	bne.n	800813e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	6819      	ldr	r1, [r3, #0]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f000 fd9c 	bl	8008c50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008126:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	69d9      	ldr	r1, [r3, #28]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	021a      	lsls	r2, r3, #8
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	61da      	str	r2, [r3, #28]
 800813c:	e001      	b.n	8008142 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800816e:	2302      	movs	r3, #2
 8008170:	e0ae      	b.n	80082d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b0c      	cmp	r3, #12
 800817e:	f200 809f 	bhi.w	80082c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081bd 	.word	0x080081bd
 800818c:	080082c1 	.word	0x080082c1
 8008190:	080082c1 	.word	0x080082c1
 8008194:	080082c1 	.word	0x080082c1
 8008198:	080081fd 	.word	0x080081fd
 800819c:	080082c1 	.word	0x080082c1
 80081a0:	080082c1 	.word	0x080082c1
 80081a4:	080082c1 	.word	0x080082c1
 80081a8:	0800823f 	.word	0x0800823f
 80081ac:	080082c1 	.word	0x080082c1
 80081b0:	080082c1 	.word	0x080082c1
 80081b4:	080082c1 	.word	0x080082c1
 80081b8:	0800827f 	.word	0x0800827f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68b9      	ldr	r1, [r7, #8]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fa48 	bl	8008658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699a      	ldr	r2, [r3, #24]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0208 	orr.w	r2, r2, #8
 80081d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0204 	bic.w	r2, r2, #4
 80081e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6999      	ldr	r1, [r3, #24]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	691a      	ldr	r2, [r3, #16]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	619a      	str	r2, [r3, #24]
      break;
 80081fa:	e064      	b.n	80082c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fa98 	bl	8008738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6999      	ldr	r1, [r3, #24]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	021a      	lsls	r2, r3, #8
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	619a      	str	r2, [r3, #24]
      break;
 800823c:	e043      	b.n	80082c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68b9      	ldr	r1, [r7, #8]
 8008244:	4618      	mov	r0, r3
 8008246:	f000 faed 	bl	8008824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69da      	ldr	r2, [r3, #28]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0208 	orr.w	r2, r2, #8
 8008258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0204 	bic.w	r2, r2, #4
 8008268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69d9      	ldr	r1, [r3, #28]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	61da      	str	r2, [r3, #28]
      break;
 800827c:	e023      	b.n	80082c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68b9      	ldr	r1, [r7, #8]
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fb41 	bl	800890c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69da      	ldr	r2, [r3, #28]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69d9      	ldr	r1, [r3, #28]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	021a      	lsls	r2, r3, #8
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	61da      	str	r2, [r3, #28]
      break;
 80082be:	e002      	b.n	80082c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
      break;
 80082c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d101      	bne.n	80082f4 <HAL_TIM_ConfigClockSource+0x1c>
 80082f0:	2302      	movs	r3, #2
 80082f2:	e0b4      	b.n	800845e <HAL_TIM_ConfigClockSource+0x186>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800831a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832c:	d03e      	beq.n	80083ac <HAL_TIM_ConfigClockSource+0xd4>
 800832e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008332:	f200 8087 	bhi.w	8008444 <HAL_TIM_ConfigClockSource+0x16c>
 8008336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833a:	f000 8086 	beq.w	800844a <HAL_TIM_ConfigClockSource+0x172>
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008342:	d87f      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x16c>
 8008344:	2b70      	cmp	r3, #112	; 0x70
 8008346:	d01a      	beq.n	800837e <HAL_TIM_ConfigClockSource+0xa6>
 8008348:	2b70      	cmp	r3, #112	; 0x70
 800834a:	d87b      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x16c>
 800834c:	2b60      	cmp	r3, #96	; 0x60
 800834e:	d050      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x11a>
 8008350:	2b60      	cmp	r3, #96	; 0x60
 8008352:	d877      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x16c>
 8008354:	2b50      	cmp	r3, #80	; 0x50
 8008356:	d03c      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0xfa>
 8008358:	2b50      	cmp	r3, #80	; 0x50
 800835a:	d873      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x16c>
 800835c:	2b40      	cmp	r3, #64	; 0x40
 800835e:	d058      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x13a>
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	d86f      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x16c>
 8008364:	2b30      	cmp	r3, #48	; 0x30
 8008366:	d064      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x15a>
 8008368:	2b30      	cmp	r3, #48	; 0x30
 800836a:	d86b      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x16c>
 800836c:	2b20      	cmp	r3, #32
 800836e:	d060      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x15a>
 8008370:	2b20      	cmp	r3, #32
 8008372:	d867      	bhi.n	8008444 <HAL_TIM_ConfigClockSource+0x16c>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d05c      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x15a>
 8008378:	2b10      	cmp	r3, #16
 800837a:	d05a      	beq.n	8008432 <HAL_TIM_ConfigClockSource+0x15a>
 800837c:	e062      	b.n	8008444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	6899      	ldr	r1, [r3, #8]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	f000 fcb7 	bl	8008d00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	609a      	str	r2, [r3, #8]
      break;
 80083aa:	e04f      	b.n	800844c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	6899      	ldr	r1, [r3, #8]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f000 fca0 	bl	8008d00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083ce:	609a      	str	r2, [r3, #8]
      break;
 80083d0:	e03c      	b.n	800844c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6859      	ldr	r1, [r3, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	461a      	mov	r2, r3
 80083e0:	f000 fb5e 	bl	8008aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2150      	movs	r1, #80	; 0x50
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fc6d 	bl	8008cca <TIM_ITRx_SetConfig>
      break;
 80083f0:	e02c      	b.n	800844c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	6859      	ldr	r1, [r3, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	461a      	mov	r2, r3
 8008400:	f000 fbba 	bl	8008b78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2160      	movs	r1, #96	; 0x60
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fc5d 	bl	8008cca <TIM_ITRx_SetConfig>
      break;
 8008410:	e01c      	b.n	800844c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6818      	ldr	r0, [r3, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	6859      	ldr	r1, [r3, #4]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	461a      	mov	r2, r3
 8008420:	f000 fb3e 	bl	8008aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2140      	movs	r1, #64	; 0x40
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fc4d 	bl	8008cca <TIM_ITRx_SetConfig>
      break;
 8008430:	e00c      	b.n	800844c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f000 fc44 	bl	8008cca <TIM_ITRx_SetConfig>
      break;
 8008442:	e003      	b.n	800844c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	73fb      	strb	r3, [r7, #15]
      break;
 8008448:	e000      	b.n	800844c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800844a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b0c      	cmp	r3, #12
 800847a:	d831      	bhi.n	80084e0 <HAL_TIM_ReadCapturedValue+0x78>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <HAL_TIM_ReadCapturedValue+0x1c>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	080084b9 	.word	0x080084b9
 8008488:	080084e1 	.word	0x080084e1
 800848c:	080084e1 	.word	0x080084e1
 8008490:	080084e1 	.word	0x080084e1
 8008494:	080084c3 	.word	0x080084c3
 8008498:	080084e1 	.word	0x080084e1
 800849c:	080084e1 	.word	0x080084e1
 80084a0:	080084e1 	.word	0x080084e1
 80084a4:	080084cd 	.word	0x080084cd
 80084a8:	080084e1 	.word	0x080084e1
 80084ac:	080084e1 	.word	0x080084e1
 80084b0:	080084e1 	.word	0x080084e1
 80084b4:	080084d7 	.word	0x080084d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084be:	60fb      	str	r3, [r7, #12]

      break;
 80084c0:	e00f      	b.n	80084e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	60fb      	str	r3, [r7, #12]

      break;
 80084ca:	e00a      	b.n	80084e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	60fb      	str	r3, [r7, #12]

      break;
 80084d4:	e005      	b.n	80084e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084dc:	60fb      	str	r3, [r7, #12]

      break;
 80084de:	e000      	b.n	80084e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80084e0:	bf00      	nop
  }

  return tmpreg;
 80084e2:	68fb      	ldr	r3, [r7, #12]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a40      	ldr	r2, [pc, #256]	; (800862c <TIM_Base_SetConfig+0x114>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d013      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008536:	d00f      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a3d      	ldr	r2, [pc, #244]	; (8008630 <TIM_Base_SetConfig+0x118>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d00b      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a3c      	ldr	r2, [pc, #240]	; (8008634 <TIM_Base_SetConfig+0x11c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d007      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a3b      	ldr	r2, [pc, #236]	; (8008638 <TIM_Base_SetConfig+0x120>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a3a      	ldr	r2, [pc, #232]	; (800863c <TIM_Base_SetConfig+0x124>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d108      	bne.n	800856a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a2f      	ldr	r2, [pc, #188]	; (800862c <TIM_Base_SetConfig+0x114>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d02b      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008578:	d027      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a2c      	ldr	r2, [pc, #176]	; (8008630 <TIM_Base_SetConfig+0x118>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d023      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a2b      	ldr	r2, [pc, #172]	; (8008634 <TIM_Base_SetConfig+0x11c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d01f      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a2a      	ldr	r2, [pc, #168]	; (8008638 <TIM_Base_SetConfig+0x120>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d01b      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a29      	ldr	r2, [pc, #164]	; (800863c <TIM_Base_SetConfig+0x124>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d017      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a28      	ldr	r2, [pc, #160]	; (8008640 <TIM_Base_SetConfig+0x128>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d013      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a27      	ldr	r2, [pc, #156]	; (8008644 <TIM_Base_SetConfig+0x12c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00f      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a26      	ldr	r2, [pc, #152]	; (8008648 <TIM_Base_SetConfig+0x130>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00b      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a25      	ldr	r2, [pc, #148]	; (800864c <TIM_Base_SetConfig+0x134>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d007      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a24      	ldr	r2, [pc, #144]	; (8008650 <TIM_Base_SetConfig+0x138>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d003      	beq.n	80085ca <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a23      	ldr	r2, [pc, #140]	; (8008654 <TIM_Base_SetConfig+0x13c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d108      	bne.n	80085dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4313      	orrs	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a0a      	ldr	r2, [pc, #40]	; (800862c <TIM_Base_SetConfig+0x114>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d003      	beq.n	8008610 <TIM_Base_SetConfig+0xf8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a0c      	ldr	r2, [pc, #48]	; (800863c <TIM_Base_SetConfig+0x124>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d103      	bne.n	8008618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	615a      	str	r2, [r3, #20]
}
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	40010000 	.word	0x40010000
 8008630:	40000400 	.word	0x40000400
 8008634:	40000800 	.word	0x40000800
 8008638:	40000c00 	.word	0x40000c00
 800863c:	40010400 	.word	0x40010400
 8008640:	40014000 	.word	0x40014000
 8008644:	40014400 	.word	0x40014400
 8008648:	40014800 	.word	0x40014800
 800864c:	40001800 	.word	0x40001800
 8008650:	40001c00 	.word	0x40001c00
 8008654:	40002000 	.word	0x40002000

08008658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	f023 0201 	bic.w	r2, r3, #1
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f023 0302 	bic.w	r3, r3, #2
 80086a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a20      	ldr	r2, [pc, #128]	; (8008730 <TIM_OC1_SetConfig+0xd8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_OC1_SetConfig+0x64>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a1f      	ldr	r2, [pc, #124]	; (8008734 <TIM_OC1_SetConfig+0xdc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d10c      	bne.n	80086d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f023 0308 	bic.w	r3, r3, #8
 80086c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f023 0304 	bic.w	r3, r3, #4
 80086d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a15      	ldr	r2, [pc, #84]	; (8008730 <TIM_OC1_SetConfig+0xd8>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d003      	beq.n	80086e6 <TIM_OC1_SetConfig+0x8e>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a14      	ldr	r2, [pc, #80]	; (8008734 <TIM_OC1_SetConfig+0xdc>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d111      	bne.n	800870a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	4313      	orrs	r3, r2
 8008708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	621a      	str	r2, [r3, #32]
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	40010000 	.word	0x40010000
 8008734:	40010400 	.word	0x40010400

08008738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f023 0210 	bic.w	r2, r3, #16
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800876e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f023 0320 	bic.w	r3, r3, #32
 8008782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	4313      	orrs	r3, r2
 800878e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a22      	ldr	r2, [pc, #136]	; (800881c <TIM_OC2_SetConfig+0xe4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_OC2_SetConfig+0x68>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a21      	ldr	r2, [pc, #132]	; (8008820 <TIM_OC2_SetConfig+0xe8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d10d      	bne.n	80087bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	011b      	lsls	r3, r3, #4
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a17      	ldr	r2, [pc, #92]	; (800881c <TIM_OC2_SetConfig+0xe4>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_OC2_SetConfig+0x94>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a16      	ldr	r2, [pc, #88]	; (8008820 <TIM_OC2_SetConfig+0xe8>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d113      	bne.n	80087f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	621a      	str	r2, [r3, #32]
}
 800880e:	bf00      	nop
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	40010000 	.word	0x40010000
 8008820:	40010400 	.word	0x40010400

08008824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0303 	bic.w	r3, r3, #3
 800885a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800886c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a21      	ldr	r2, [pc, #132]	; (8008904 <TIM_OC3_SetConfig+0xe0>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d003      	beq.n	800888a <TIM_OC3_SetConfig+0x66>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a20      	ldr	r2, [pc, #128]	; (8008908 <TIM_OC3_SetConfig+0xe4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d10d      	bne.n	80088a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a16      	ldr	r2, [pc, #88]	; (8008904 <TIM_OC3_SetConfig+0xe0>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d003      	beq.n	80088b6 <TIM_OC3_SetConfig+0x92>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a15      	ldr	r2, [pc, #84]	; (8008908 <TIM_OC3_SetConfig+0xe4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d113      	bne.n	80088de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	621a      	str	r2, [r3, #32]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	40010000 	.word	0x40010000
 8008908:	40010400 	.word	0x40010400

0800890c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800893a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4313      	orrs	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	031b      	lsls	r3, r3, #12
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a12      	ldr	r2, [pc, #72]	; (80089b0 <TIM_OC4_SetConfig+0xa4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d003      	beq.n	8008974 <TIM_OC4_SetConfig+0x68>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a11      	ldr	r2, [pc, #68]	; (80089b4 <TIM_OC4_SetConfig+0xa8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d109      	bne.n	8008988 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800897a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	019b      	lsls	r3, r3, #6
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	4313      	orrs	r3, r2
 8008986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	621a      	str	r2, [r3, #32]
}
 80089a2:	bf00      	nop
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40010400 	.word	0x40010400

080089b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	f023 0201 	bic.w	r2, r3, #1
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4a28      	ldr	r2, [pc, #160]	; (8008a84 <TIM_TI1_SetConfig+0xcc>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d01b      	beq.n	8008a1e <TIM_TI1_SetConfig+0x66>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ec:	d017      	beq.n	8008a1e <TIM_TI1_SetConfig+0x66>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	4a25      	ldr	r2, [pc, #148]	; (8008a88 <TIM_TI1_SetConfig+0xd0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <TIM_TI1_SetConfig+0x66>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	4a24      	ldr	r2, [pc, #144]	; (8008a8c <TIM_TI1_SetConfig+0xd4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00f      	beq.n	8008a1e <TIM_TI1_SetConfig+0x66>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4a23      	ldr	r2, [pc, #140]	; (8008a90 <TIM_TI1_SetConfig+0xd8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d00b      	beq.n	8008a1e <TIM_TI1_SetConfig+0x66>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4a22      	ldr	r2, [pc, #136]	; (8008a94 <TIM_TI1_SetConfig+0xdc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d007      	beq.n	8008a1e <TIM_TI1_SetConfig+0x66>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	4a21      	ldr	r2, [pc, #132]	; (8008a98 <TIM_TI1_SetConfig+0xe0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d003      	beq.n	8008a1e <TIM_TI1_SetConfig+0x66>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4a20      	ldr	r2, [pc, #128]	; (8008a9c <TIM_TI1_SetConfig+0xe4>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d101      	bne.n	8008a22 <TIM_TI1_SetConfig+0x6a>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e000      	b.n	8008a24 <TIM_TI1_SetConfig+0x6c>
 8008a22:	2300      	movs	r3, #0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d008      	beq.n	8008a3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 0303 	bic.w	r3, r3, #3
 8008a2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	e003      	b.n	8008a42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f023 030a 	bic.w	r3, r3, #10
 8008a5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f003 030a 	and.w	r3, r3, #10
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40000400 	.word	0x40000400
 8008a8c:	40000800 	.word	0x40000800
 8008a90:	40000c00 	.word	0x40000c00
 8008a94:	40010400 	.word	0x40010400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40001800 	.word	0x40001800

08008aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	f023 0201 	bic.w	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f023 030a 	bic.w	r3, r3, #10
 8008adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	bf00      	nop
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b087      	sub	sp, #28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	f023 0210 	bic.w	r2, r3, #16
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	031b      	lsls	r3, r3, #12
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	621a      	str	r2, [r3, #32]
}
 8008b6c:	bf00      	nop
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	f023 0210 	bic.w	r2, r3, #16
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ba2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	031b      	lsls	r3, r3, #12
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	011b      	lsls	r3, r3, #4
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	621a      	str	r2, [r3, #32]
}
 8008bcc:	bf00      	nop
 8008bce:	371c      	adds	r7, #28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f023 0303 	bic.w	r3, r3, #3
 8008c04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008c28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	621a      	str	r2, [r3, #32]
}
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	021b      	lsls	r3, r3, #8
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	031b      	lsls	r3, r3, #12
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008ca2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	031b      	lsls	r3, r3, #12
 8008ca8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b085      	sub	sp, #20
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	f043 0307 	orr.w	r3, r3, #7
 8008cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	609a      	str	r2, [r3, #8]
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	021a      	lsls	r2, r3, #8
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	609a      	str	r2, [r3, #8]
}
 8008d34:	bf00      	nop
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f003 031f 	and.w	r3, r3, #31
 8008d52:	2201      	movs	r2, #1
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a1a      	ldr	r2, [r3, #32]
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	43db      	mvns	r3, r3
 8008d62:	401a      	ands	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a1a      	ldr	r2, [r3, #32]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f003 031f 	and.w	r3, r3, #31
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	fa01 f303 	lsl.w	r3, r1, r3
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
	...

08008d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e05a      	b.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a21      	ldr	r2, [pc, #132]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d022      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df0:	d01d      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1d      	ldr	r2, [pc, #116]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d018      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a1b      	ldr	r2, [pc, #108]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d013      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1a      	ldr	r2, [pc, #104]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00e      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a18      	ldr	r2, [pc, #96]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d009      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a17      	ldr	r2, [pc, #92]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d004      	beq.n	8008e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a15      	ldr	r2, [pc, #84]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d10c      	bne.n	8008e48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	40010000 	.word	0x40010000
 8008e6c:	40000400 	.word	0x40000400
 8008e70:	40000800 	.word	0x40000800
 8008e74:	40000c00 	.word	0x40000c00
 8008e78:	40010400 	.word	0x40010400
 8008e7c:	40014000 	.word	0x40014000
 8008e80:	40001800 	.word	0x40001800

08008e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <__NVIC_SetPriority>:
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	6039      	str	r1, [r7, #0]
 8008eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	db0a      	blt.n	8008ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	490c      	ldr	r1, [pc, #48]	; (8008ef8 <__NVIC_SetPriority+0x4c>)
 8008ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eca:	0112      	lsls	r2, r2, #4
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	440b      	add	r3, r1
 8008ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ed4:	e00a      	b.n	8008eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	4908      	ldr	r1, [pc, #32]	; (8008efc <__NVIC_SetPriority+0x50>)
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	f003 030f 	and.w	r3, r3, #15
 8008ee2:	3b04      	subs	r3, #4
 8008ee4:	0112      	lsls	r2, r2, #4
 8008ee6:	b2d2      	uxtb	r2, r2
 8008ee8:	440b      	add	r3, r1
 8008eea:	761a      	strb	r2, [r3, #24]
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	e000e100 	.word	0xe000e100
 8008efc:	e000ed00 	.word	0xe000ed00

08008f00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f04:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <SysTick_Handler+0x1c>)
 8008f06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f08:	f001 fd28 	bl	800a95c <xTaskGetSchedulerState>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d001      	beq.n	8008f16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f12:	f002 fb11 	bl	800b538 <xPortSysTickHandler>
  }
}
 8008f16:	bf00      	nop
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	e000e010 	.word	0xe000e010

08008f20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f24:	2100      	movs	r1, #0
 8008f26:	f06f 0004 	mvn.w	r0, #4
 8008f2a:	f7ff ffbf 	bl	8008eac <__NVIC_SetPriority>
#endif
}
 8008f2e:	bf00      	nop
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f3a:	f3ef 8305 	mrs	r3, IPSR
 8008f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f46:	f06f 0305 	mvn.w	r3, #5
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	e00c      	b.n	8008f68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f4e:	4b0a      	ldr	r3, [pc, #40]	; (8008f78 <osKernelInitialize+0x44>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f56:	4b08      	ldr	r3, [pc, #32]	; (8008f78 <osKernelInitialize+0x44>)
 8008f58:	2201      	movs	r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	e002      	b.n	8008f68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f68:	687b      	ldr	r3, [r7, #4]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	20000ff8 	.word	0x20000ff8

08008f7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f82:	f3ef 8305 	mrs	r3, IPSR
 8008f86:	603b      	str	r3, [r7, #0]
  return(result);
 8008f88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f8e:	f06f 0305 	mvn.w	r3, #5
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	e010      	b.n	8008fb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <osKernelStart+0x48>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d109      	bne.n	8008fb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f9e:	f7ff ffbf 	bl	8008f20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fa2:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <osKernelStart+0x48>)
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008fa8:	f001 f87c 	bl	800a0a4 <vTaskStartScheduler>
      stat = osOK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	e002      	b.n	8008fb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fb8:	687b      	ldr	r3, [r7, #4]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000ff8 	.word	0x20000ff8

08008fc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08e      	sub	sp, #56	; 0x38
 8008fcc:	af04      	add	r7, sp, #16
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fd8:	f3ef 8305 	mrs	r3, IPSR
 8008fdc:	617b      	str	r3, [r7, #20]
  return(result);
 8008fde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d17e      	bne.n	80090e2 <osThreadNew+0x11a>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d07b      	beq.n	80090e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fea:	2380      	movs	r3, #128	; 0x80
 8008fec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fee:	2318      	movs	r3, #24
 8008ff0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d045      	beq.n	800908e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <osThreadNew+0x48>
        name = attr->name;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <osThreadNew+0x6e>
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2b38      	cmp	r3, #56	; 0x38
 8009028:	d805      	bhi.n	8009036 <osThreadNew+0x6e>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <osThreadNew+0x72>
        return (NULL);
 8009036:	2300      	movs	r3, #0
 8009038:	e054      	b.n	80090e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	089b      	lsrs	r3, r3, #2
 8009048:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00e      	beq.n	8009070 <osThreadNew+0xa8>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	2ba7      	cmp	r3, #167	; 0xa7
 8009058:	d90a      	bls.n	8009070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800905e:	2b00      	cmp	r3, #0
 8009060:	d006      	beq.n	8009070 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <osThreadNew+0xa8>
        mem = 1;
 800906a:	2301      	movs	r3, #1
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	e010      	b.n	8009092 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10c      	bne.n	8009092 <osThreadNew+0xca>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d108      	bne.n	8009092 <osThreadNew+0xca>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d104      	bne.n	8009092 <osThreadNew+0xca>
          mem = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	61bb      	str	r3, [r7, #24]
 800908c:	e001      	b.n	8009092 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d110      	bne.n	80090ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090a0:	9202      	str	r2, [sp, #8]
 80090a2:	9301      	str	r3, [sp, #4]
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6a3a      	ldr	r2, [r7, #32]
 80090ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fe0c 	bl	8009ccc <xTaskCreateStatic>
 80090b4:	4603      	mov	r3, r0
 80090b6:	613b      	str	r3, [r7, #16]
 80090b8:	e013      	b.n	80090e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d110      	bne.n	80090e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	f107 0310 	add.w	r3, r7, #16
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fe57 	bl	8009d86 <xTaskCreate>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d001      	beq.n	80090e2 <osThreadNew+0x11a>
            hTask = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090e2:	693b      	ldr	r3, [r7, #16]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3728      	adds	r7, #40	; 0x28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090f4:	f3ef 8305 	mrs	r3, IPSR
 80090f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80090fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d003      	beq.n	8009108 <osDelay+0x1c>
    stat = osErrorISR;
 8009100:	f06f 0305 	mvn.w	r3, #5
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	e007      	b.n	8009118 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 ff92 	bl	800a03c <vTaskDelay>
    }
  }

  return (stat);
 8009118:	68fb      	ldr	r3, [r7, #12]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4a07      	ldr	r2, [pc, #28]	; (8009150 <vApplicationGetIdleTaskMemory+0x2c>)
 8009134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	4a06      	ldr	r2, [pc, #24]	; (8009154 <vApplicationGetIdleTaskMemory+0x30>)
 800913a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2280      	movs	r2, #128	; 0x80
 8009140:	601a      	str	r2, [r3, #0]
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	20000ffc 	.word	0x20000ffc
 8009154:	200010a4 	.word	0x200010a4

08009158 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4a07      	ldr	r2, [pc, #28]	; (8009184 <vApplicationGetTimerTaskMemory+0x2c>)
 8009168:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4a06      	ldr	r2, [pc, #24]	; (8009188 <vApplicationGetTimerTaskMemory+0x30>)
 800916e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009176:	601a      	str	r2, [r3, #0]
}
 8009178:	bf00      	nop
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	200012a4 	.word	0x200012a4
 8009188:	2000134c 	.word	0x2000134c

0800918c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f103 0208 	add.w	r2, r3, #8
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295
 80091a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f103 0208 	add.w	r2, r3, #8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f103 0208 	add.w	r2, r3, #8
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	601a      	str	r2, [r3, #0]
}
 8009222:	bf00      	nop
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800922e:	b480      	push	{r7}
 8009230:	b085      	sub	sp, #20
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d103      	bne.n	800924e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	e00c      	b.n	8009268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3308      	adds	r3, #8
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	e002      	b.n	800925c <vListInsert+0x2e>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	429a      	cmp	r2, r3
 8009266:	d2f6      	bcs.n	8009256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	601a      	str	r2, [r3, #0]
}
 8009294:	bf00      	nop
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	6892      	ldr	r2, [r2, #8]
 80092b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6852      	ldr	r2, [r2, #4]
 80092c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d103      	bne.n	80092d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	1e5a      	subs	r2, r3, #1
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800931e:	f002 f879 	bl	800b414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	441a      	add	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934e:	3b01      	subs	r3, #1
 8009350:	68f9      	ldr	r1, [r7, #12]
 8009352:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	441a      	add	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	22ff      	movs	r2, #255	; 0xff
 8009362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	22ff      	movs	r2, #255	; 0xff
 800936a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d114      	bne.n	800939e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01a      	beq.n	80093b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3310      	adds	r3, #16
 8009380:	4618      	mov	r0, r3
 8009382:	f001 f929 	bl	800a5d8 <xTaskRemoveFromEventList>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d012      	beq.n	80093b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <xQueueGenericReset+0xcc>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	e009      	b.n	80093b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3310      	adds	r3, #16
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fef2 	bl	800918c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3324      	adds	r3, #36	; 0x24
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff feed 	bl	800918c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093b2:	f002 f85f 	bl	800b474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093b6:	2301      	movs	r3, #1
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08e      	sub	sp, #56	; 0x38
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093ea:	bf00      	nop
 80093ec:	e7fe      	b.n	80093ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <xQueueGenericCreateStatic+0x52>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <xQueueGenericCreateStatic+0x56>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <xQueueGenericCreateStatic+0x58>
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	623b      	str	r3, [r7, #32]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <xQueueGenericCreateStatic+0x7e>
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <xQueueGenericCreateStatic+0x82>
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <xQueueGenericCreateStatic+0x84>
 8009446:	2300      	movs	r3, #0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	61fb      	str	r3, [r7, #28]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009462:	2350      	movs	r3, #80	; 0x50
 8009464:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b50      	cmp	r3, #80	; 0x50
 800946a:	d00a      	beq.n	8009482 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	61bb      	str	r3, [r7, #24]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009482:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00d      	beq.n	80094aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009496:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	4613      	mov	r3, r2
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f805 	bl	80094b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3730      	adds	r7, #48	; 0x30
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e002      	b.n	80094d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094e2:	2101      	movs	r1, #1
 80094e4:	69b8      	ldr	r0, [r7, #24]
 80094e6:	f7ff ff05 	bl	80092f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08e      	sub	sp, #56	; 0x38
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800950a:	2300      	movs	r3, #0
 800950c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <xQueueGenericSend+0x32>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d103      	bne.n	800953c <xQueueGenericSend+0x40>
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <xQueueGenericSend+0x44>
 800953c:	2301      	movs	r3, #1
 800953e:	e000      	b.n	8009542 <xQueueGenericSend+0x46>
 8009540:	2300      	movs	r3, #0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <xQueueGenericSend+0x60>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d103      	bne.n	800956a <xQueueGenericSend+0x6e>
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009566:	2b01      	cmp	r3, #1
 8009568:	d101      	bne.n	800956e <xQueueGenericSend+0x72>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <xQueueGenericSend+0x74>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xQueueGenericSend+0x8e>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	623b      	str	r3, [r7, #32]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800958a:	f001 f9e7 	bl	800a95c <xTaskGetSchedulerState>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d102      	bne.n	800959a <xQueueGenericSend+0x9e>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <xQueueGenericSend+0xa2>
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <xQueueGenericSend+0xa4>
 800959e:	2300      	movs	r3, #0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xQueueGenericSend+0xbe>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	61fb      	str	r3, [r7, #28]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095ba:	f001 ff2b 	bl	800b414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d302      	bcc.n	80095d0 <xQueueGenericSend+0xd4>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d129      	bne.n	8009624 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095d6:	f000 fa0b 	bl	80099f0 <prvCopyDataToQueue>
 80095da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	3324      	adds	r3, #36	; 0x24
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fff5 	bl	800a5d8 <xTaskRemoveFromEventList>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d013      	beq.n	800961c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095f4:	4b3f      	ldr	r3, [pc, #252]	; (80096f4 <xQueueGenericSend+0x1f8>)
 80095f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	e00a      	b.n	800961c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800960c:	4b39      	ldr	r3, [pc, #228]	; (80096f4 <xQueueGenericSend+0x1f8>)
 800960e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800961c:	f001 ff2a 	bl	800b474 <vPortExitCritical>
				return pdPASS;
 8009620:	2301      	movs	r3, #1
 8009622:	e063      	b.n	80096ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d103      	bne.n	8009632 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800962a:	f001 ff23 	bl	800b474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800962e:	2300      	movs	r3, #0
 8009630:	e05c      	b.n	80096ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009638:	f107 0314 	add.w	r3, r7, #20
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f82f 	bl	800a6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009642:	2301      	movs	r3, #1
 8009644:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009646:	f001 ff15 	bl	800b474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800964a:	f000 fd9b 	bl	800a184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800964e:	f001 fee1 	bl	800b414 <vPortEnterCritical>
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009658:	b25b      	sxtb	r3, r3
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965e:	d103      	bne.n	8009668 <xQueueGenericSend+0x16c>
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800966e:	b25b      	sxtb	r3, r3
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009674:	d103      	bne.n	800967e <xQueueGenericSend+0x182>
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800967e:	f001 fef9 	bl	800b474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009682:	1d3a      	adds	r2, r7, #4
 8009684:	f107 0314 	add.w	r3, r7, #20
 8009688:	4611      	mov	r1, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f001 f81e 	bl	800a6cc <xTaskCheckForTimeOut>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d124      	bne.n	80096e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009698:	f000 faa2 	bl	8009be0 <prvIsQueueFull>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d018      	beq.n	80096d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	3310      	adds	r3, #16
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	4611      	mov	r1, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 ff44 	bl	800a538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b2:	f000 fa2d 	bl	8009b10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096b6:	f000 fd73 	bl	800a1a0 <xTaskResumeAll>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f47f af7c 	bne.w	80095ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096c2:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <xQueueGenericSend+0x1f8>)
 80096c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	e772      	b.n	80095ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d6:	f000 fa1b 	bl	8009b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096da:	f000 fd61 	bl	800a1a0 <xTaskResumeAll>
 80096de:	e76c      	b.n	80095ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096e2:	f000 fa15 	bl	8009b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096e6:	f000 fd5b 	bl	800a1a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3738      	adds	r7, #56	; 0x38
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	e000ed04 	.word	0xe000ed04

080096f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b090      	sub	sp, #64	; 0x40
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <xQueueGenericSendFromISR+0x3c>
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <xQueueGenericSendFromISR+0x40>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <xQueueGenericSendFromISR+0x42>
 8009738:	2300      	movs	r3, #0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b02      	cmp	r3, #2
 8009758:	d103      	bne.n	8009762 <xQueueGenericSendFromISR+0x6a>
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <xQueueGenericSendFromISR+0x6e>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <xQueueGenericSendFromISR+0x70>
 8009766:	2300      	movs	r3, #0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	623b      	str	r3, [r7, #32]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009782:	f001 ff29 	bl	800b5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009786:	f3ef 8211 	mrs	r2, BASEPRI
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	61fa      	str	r2, [r7, #28]
 800979c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800979e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d302      	bcc.n	80097b4 <xQueueGenericSendFromISR+0xbc>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d12f      	bne.n	8009814 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ca:	f000 f911 	bl	80099f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d6:	d112      	bne.n	80097fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d016      	beq.n	800980e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	3324      	adds	r3, #36	; 0x24
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 fef7 	bl	800a5d8 <xTaskRemoveFromEventList>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00e      	beq.n	800980e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00b      	beq.n	800980e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	e007      	b.n	800980e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009802:	3301      	adds	r3, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	b25a      	sxtb	r2, r3
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800980e:	2301      	movs	r3, #1
 8009810:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009812:	e001      	b.n	8009818 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009814:	2300      	movs	r3, #0
 8009816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009822:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009826:	4618      	mov	r0, r3
 8009828:	3740      	adds	r7, #64	; 0x40
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08c      	sub	sp, #48	; 0x30
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800983c:	2300      	movs	r3, #0
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <xQueueReceive+0x30>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	623b      	str	r3, [r7, #32]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <xQueueReceive+0x3e>
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <xQueueReceive+0x42>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <xQueueReceive+0x44>
 8009872:	2300      	movs	r3, #0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <xQueueReceive+0x5e>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	61fb      	str	r3, [r7, #28]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800988e:	f001 f865 	bl	800a95c <xTaskGetSchedulerState>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <xQueueReceive+0x6e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueReceive+0x72>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueReceive+0x74>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xQueueReceive+0x8e>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	61bb      	str	r3, [r7, #24]
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098be:	f001 fda9 	bl	800b414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d01f      	beq.n	800990e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098ce:	68b9      	ldr	r1, [r7, #8]
 80098d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d2:	f000 f8f7 	bl	8009ac4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	1e5a      	subs	r2, r3, #1
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00f      	beq.n	8009906 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	3310      	adds	r3, #16
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fe74 	bl	800a5d8 <xTaskRemoveFromEventList>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d007      	beq.n	8009906 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098f6:	4b3d      	ldr	r3, [pc, #244]	; (80099ec <xQueueReceive+0x1bc>)
 80098f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009906:	f001 fdb5 	bl	800b474 <vPortExitCritical>
				return pdPASS;
 800990a:	2301      	movs	r3, #1
 800990c:	e069      	b.n	80099e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d103      	bne.n	800991c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009914:	f001 fdae 	bl	800b474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009918:	2300      	movs	r3, #0
 800991a:	e062      	b.n	80099e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009922:	f107 0310 	add.w	r3, r7, #16
 8009926:	4618      	mov	r0, r3
 8009928:	f000 feba 	bl	800a6a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009930:	f001 fda0 	bl	800b474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009934:	f000 fc26 	bl	800a184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009938:	f001 fd6c 	bl	800b414 <vPortEnterCritical>
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009942:	b25b      	sxtb	r3, r3
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009948:	d103      	bne.n	8009952 <xQueueReceive+0x122>
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009958:	b25b      	sxtb	r3, r3
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d103      	bne.n	8009968 <xQueueReceive+0x138>
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009968:	f001 fd84 	bl	800b474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800996c:	1d3a      	adds	r2, r7, #4
 800996e:	f107 0310 	add.w	r3, r7, #16
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fea9 	bl	800a6cc <xTaskCheckForTimeOut>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d123      	bne.n	80099c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009982:	f000 f917 	bl	8009bb4 <prvIsQueueEmpty>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d017      	beq.n	80099bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	3324      	adds	r3, #36	; 0x24
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	4611      	mov	r1, r2
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fdcf 	bl	800a538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800999a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999c:	f000 f8b8 	bl	8009b10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099a0:	f000 fbfe 	bl	800a1a0 <xTaskResumeAll>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d189      	bne.n	80098be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80099aa:	4b10      	ldr	r3, [pc, #64]	; (80099ec <xQueueReceive+0x1bc>)
 80099ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	e780      	b.n	80098be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099be:	f000 f8a7 	bl	8009b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099c2:	f000 fbed 	bl	800a1a0 <xTaskResumeAll>
 80099c6:	e77a      	b.n	80098be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ca:	f000 f8a1 	bl	8009b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ce:	f000 fbe7 	bl	800a1a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d4:	f000 f8ee 	bl	8009bb4 <prvIsQueueEmpty>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f43f af6f 	beq.w	80098be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3730      	adds	r7, #48	; 0x30
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	e000ed04 	.word	0xe000ed04

080099f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099fc:	2300      	movs	r3, #0
 80099fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10d      	bne.n	8009a2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d14d      	bne.n	8009ab2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 ffbc 	bl	800a998 <xTaskPriorityDisinherit>
 8009a20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	609a      	str	r2, [r3, #8]
 8009a28:	e043      	b.n	8009ab2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d119      	bne.n	8009a64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6858      	ldr	r0, [r3, #4]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	461a      	mov	r2, r3
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	f003 fe99 	bl	800d772 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a48:	441a      	add	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d32b      	bcc.n	8009ab2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	605a      	str	r2, [r3, #4]
 8009a62:	e026      	b.n	8009ab2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	68d8      	ldr	r0, [r3, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	f003 fe7f 	bl	800d772 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	425b      	negs	r3, r3
 8009a7e:	441a      	add	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d207      	bcs.n	8009aa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	425b      	negs	r3, r3
 8009a9a:	441a      	add	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d105      	bne.n	8009ab2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	1c5a      	adds	r2, r3, #1
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009aba:	697b      	ldr	r3, [r7, #20]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d018      	beq.n	8009b08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	441a      	add	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d303      	bcc.n	8009af8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68d9      	ldr	r1, [r3, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b00:	461a      	mov	r2, r3
 8009b02:	6838      	ldr	r0, [r7, #0]
 8009b04:	f003 fe35 	bl	800d772 <memcpy>
	}
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b18:	f001 fc7c 	bl	800b414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b24:	e011      	b.n	8009b4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d012      	beq.n	8009b54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3324      	adds	r3, #36	; 0x24
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fd50 	bl	800a5d8 <xTaskRemoveFromEventList>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b3e:	f000 fe27 	bl	800a790 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	dce9      	bgt.n	8009b26 <prvUnlockQueue+0x16>
 8009b52:	e000      	b.n	8009b56 <prvUnlockQueue+0x46>
					break;
 8009b54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	22ff      	movs	r2, #255	; 0xff
 8009b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b5e:	f001 fc89 	bl	800b474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b62:	f001 fc57 	bl	800b414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b6e:	e011      	b.n	8009b94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d012      	beq.n	8009b9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3310      	adds	r3, #16
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 fd2b 	bl	800a5d8 <xTaskRemoveFromEventList>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b88:	f000 fe02 	bl	800a790 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dce9      	bgt.n	8009b70 <prvUnlockQueue+0x60>
 8009b9c:	e000      	b.n	8009ba0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	22ff      	movs	r2, #255	; 0xff
 8009ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ba8:	f001 fc64 	bl	800b474 <vPortExitCritical>
}
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bbc:	f001 fc2a 	bl	800b414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d102      	bne.n	8009bce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e001      	b.n	8009bd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bd2:	f001 fc4f 	bl	800b474 <vPortExitCritical>

	return xReturn;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009be8:	f001 fc14 	bl	800b414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d102      	bne.n	8009bfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	e001      	b.n	8009c02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c02:	f001 fc37 	bl	800b474 <vPortExitCritical>

	return xReturn;
 8009c06:	68fb      	ldr	r3, [r7, #12]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	e014      	b.n	8009c4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c20:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <vQueueAddToRegistry+0x50>)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10b      	bne.n	8009c44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c2c:	490c      	ldr	r1, [pc, #48]	; (8009c60 <vQueueAddToRegistry+0x50>)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c36:	4a0a      	ldr	r2, [pc, #40]	; (8009c60 <vQueueAddToRegistry+0x50>)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c42:	e006      	b.n	8009c52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b07      	cmp	r3, #7
 8009c4e:	d9e7      	bls.n	8009c20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	2000174c 	.word	0x2000174c

08009c64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c74:	f001 fbce 	bl	800b414 <vPortEnterCritical>
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c7e:	b25b      	sxtb	r3, r3
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d103      	bne.n	8009c8e <vQueueWaitForMessageRestricted+0x2a>
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d103      	bne.n	8009ca4 <vQueueWaitForMessageRestricted+0x40>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ca4:	f001 fbe6 	bl	800b474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d106      	bne.n	8009cbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	3324      	adds	r3, #36	; 0x24
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	68b9      	ldr	r1, [r7, #8]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fc61 	bl	800a580 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cbe:	6978      	ldr	r0, [r7, #20]
 8009cc0:	f7ff ff26 	bl	8009b10 <prvUnlockQueue>
	}
 8009cc4:	bf00      	nop
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08e      	sub	sp, #56	; 0x38
 8009cd0:	af04      	add	r7, sp, #16
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	623b      	str	r3, [r7, #32]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <xTaskCreateStatic+0x46>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	61fb      	str	r3, [r7, #28]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d12:	23a8      	movs	r3, #168	; 0xa8
 8009d14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2ba8      	cmp	r3, #168	; 0xa8
 8009d1a:	d00a      	beq.n	8009d32 <xTaskCreateStatic+0x66>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	61bb      	str	r3, [r7, #24]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01e      	beq.n	8009d78 <xTaskCreateStatic+0xac>
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01b      	beq.n	8009d78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d52:	2300      	movs	r3, #0
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	9302      	str	r3, [sp, #8]
 8009d5a:	f107 0314 	add.w	r3, r7, #20
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f850 	bl	8009e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d72:	f000 f8f3 	bl	8009f5c <prvAddNewTaskToReadyList>
 8009d76:	e001      	b.n	8009d7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d7c:	697b      	ldr	r3, [r7, #20]
	}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3728      	adds	r7, #40	; 0x28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b08c      	sub	sp, #48	; 0x30
 8009d8a:	af04      	add	r7, sp, #16
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	603b      	str	r3, [r7, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f001 fc5c 	bl	800b658 <pvPortMalloc>
 8009da0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00e      	beq.n	8009dc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009da8:	20a8      	movs	r0, #168	; 0xa8
 8009daa:	f001 fc55 	bl	800b658 <pvPortMalloc>
 8009dae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30
 8009dbc:	e005      	b.n	8009dca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009dbe:	6978      	ldr	r0, [r7, #20]
 8009dc0:	f001 fd16 	bl	800b7f0 <vPortFree>
 8009dc4:	e001      	b.n	8009dca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d017      	beq.n	8009e00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009dd8:	88fa      	ldrh	r2, [r7, #6]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	9303      	str	r3, [sp, #12]
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	9302      	str	r3, [sp, #8]
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f80e 	bl	8009e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009df4:	69f8      	ldr	r0, [r7, #28]
 8009df6:	f000 f8b1 	bl	8009f5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	61bb      	str	r3, [r7, #24]
 8009dfe:	e002      	b.n	8009e06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e00:	f04f 33ff 	mov.w	r3, #4294967295
 8009e04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e06:	69bb      	ldr	r3, [r7, #24]
	}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3720      	adds	r7, #32
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	461a      	mov	r2, r3
 8009e28:	21a5      	movs	r1, #165	; 0xa5
 8009e2a:	f003 fb68 	bl	800d4fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	f023 0307 	bic.w	r3, r3, #7
 8009e46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	f003 0307 	and.w	r3, r3, #7
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	617b      	str	r3, [r7, #20]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d01f      	beq.n	8009eae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	e012      	b.n	8009e9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	4413      	add	r3, r2
 8009e7a:	7819      	ldrb	r1, [r3, #0]
 8009e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	4413      	add	r3, r2
 8009e82:	3334      	adds	r3, #52	; 0x34
 8009e84:	460a      	mov	r2, r1
 8009e86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	3301      	adds	r3, #1
 8009e98:	61fb      	str	r3, [r7, #28]
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	2b0f      	cmp	r3, #15
 8009e9e:	d9e9      	bls.n	8009e74 <prvInitialiseNewTask+0x64>
 8009ea0:	e000      	b.n	8009ea4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009ea2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009eac:	e003      	b.n	8009eb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	2b37      	cmp	r3, #55	; 0x37
 8009eba:	d901      	bls.n	8009ec0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ebc:	2337      	movs	r3, #55	; 0x37
 8009ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	2200      	movs	r2, #0
 8009ed0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff f978 	bl	80091cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	3318      	adds	r3, #24
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff f973 	bl	80091cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009efa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	3354      	adds	r3, #84	; 0x54
 8009f10:	224c      	movs	r2, #76	; 0x4c
 8009f12:	2100      	movs	r1, #0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f003 faf2 	bl	800d4fe <memset>
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	4a0c      	ldr	r2, [pc, #48]	; (8009f50 <prvInitialiseNewTask+0x140>)
 8009f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	4a0c      	ldr	r2, [pc, #48]	; (8009f54 <prvInitialiseNewTask+0x144>)
 8009f24:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	4a0b      	ldr	r2, [pc, #44]	; (8009f58 <prvInitialiseNewTask+0x148>)
 8009f2a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	68f9      	ldr	r1, [r7, #12]
 8009f30:	69b8      	ldr	r0, [r7, #24]
 8009f32:	f001 f941 	bl	800b1b8 <pxPortInitialiseStack>
 8009f36:	4602      	mov	r2, r0
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f48:	bf00      	nop
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	200119f8 	.word	0x200119f8
 8009f54:	20011a60 	.word	0x20011a60
 8009f58:	20011ac8 	.word	0x20011ac8

08009f5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f64:	f001 fa56 	bl	800b414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f68:	4b2d      	ldr	r3, [pc, #180]	; (800a020 <prvAddNewTaskToReadyList+0xc4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	4a2c      	ldr	r2, [pc, #176]	; (800a020 <prvAddNewTaskToReadyList+0xc4>)
 8009f70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f72:	4b2c      	ldr	r3, [pc, #176]	; (800a024 <prvAddNewTaskToReadyList+0xc8>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f7a:	4a2a      	ldr	r2, [pc, #168]	; (800a024 <prvAddNewTaskToReadyList+0xc8>)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f80:	4b27      	ldr	r3, [pc, #156]	; (800a020 <prvAddNewTaskToReadyList+0xc4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d110      	bne.n	8009faa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f88:	f000 fc26 	bl	800a7d8 <prvInitialiseTaskLists>
 8009f8c:	e00d      	b.n	8009faa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f8e:	4b26      	ldr	r3, [pc, #152]	; (800a028 <prvAddNewTaskToReadyList+0xcc>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d109      	bne.n	8009faa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f96:	4b23      	ldr	r3, [pc, #140]	; (800a024 <prvAddNewTaskToReadyList+0xc8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d802      	bhi.n	8009faa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009fa4:	4a1f      	ldr	r2, [pc, #124]	; (800a024 <prvAddNewTaskToReadyList+0xc8>)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009faa:	4b20      	ldr	r3, [pc, #128]	; (800a02c <prvAddNewTaskToReadyList+0xd0>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	4a1e      	ldr	r2, [pc, #120]	; (800a02c <prvAddNewTaskToReadyList+0xd0>)
 8009fb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009fb4:	4b1d      	ldr	r3, [pc, #116]	; (800a02c <prvAddNewTaskToReadyList+0xd0>)
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc0:	4b1b      	ldr	r3, [pc, #108]	; (800a030 <prvAddNewTaskToReadyList+0xd4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d903      	bls.n	8009fd0 <prvAddNewTaskToReadyList+0x74>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fcc:	4a18      	ldr	r2, [pc, #96]	; (800a030 <prvAddNewTaskToReadyList+0xd4>)
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4a15      	ldr	r2, [pc, #84]	; (800a034 <prvAddNewTaskToReadyList+0xd8>)
 8009fde:	441a      	add	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f7ff f8fd 	bl	80091e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fec:	f001 fa42 	bl	800b474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ff0:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <prvAddNewTaskToReadyList+0xcc>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00e      	beq.n	800a016 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ff8:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <prvAddNewTaskToReadyList+0xc8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	429a      	cmp	r2, r3
 800a004:	d207      	bcs.n	800a016 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a006:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <prvAddNewTaskToReadyList+0xdc>)
 800a008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20001c60 	.word	0x20001c60
 800a024:	2000178c 	.word	0x2000178c
 800a028:	20001c6c 	.word	0x20001c6c
 800a02c:	20001c7c 	.word	0x20001c7c
 800a030:	20001c68 	.word	0x20001c68
 800a034:	20001790 	.word	0x20001790
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a044:	2300      	movs	r3, #0
 800a046:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d017      	beq.n	800a07e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a04e:	4b13      	ldr	r3, [pc, #76]	; (800a09c <vTaskDelay+0x60>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <vTaskDelay+0x30>
	__asm volatile
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	60bb      	str	r3, [r7, #8]
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a06c:	f000 f88a 	bl	800a184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a070:	2100      	movs	r1, #0
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fcfe 	bl	800aa74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a078:	f000 f892 	bl	800a1a0 <xTaskResumeAll>
 800a07c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d107      	bne.n	800a094 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a084:	4b06      	ldr	r3, [pc, #24]	; (800a0a0 <vTaskDelay+0x64>)
 800a086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a094:	bf00      	nop
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20001c88 	.word	0x20001c88
 800a0a0:	e000ed04 	.word	0xe000ed04

0800a0a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08a      	sub	sp, #40	; 0x28
 800a0a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0b2:	463a      	mov	r2, r7
 800a0b4:	1d39      	adds	r1, r7, #4
 800a0b6:	f107 0308 	add.w	r3, r7, #8
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff f832 	bl	8009124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	9202      	str	r2, [sp, #8]
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	460a      	mov	r2, r1
 800a0d2:	4924      	ldr	r1, [pc, #144]	; (800a164 <vTaskStartScheduler+0xc0>)
 800a0d4:	4824      	ldr	r0, [pc, #144]	; (800a168 <vTaskStartScheduler+0xc4>)
 800a0d6:	f7ff fdf9 	bl	8009ccc <xTaskCreateStatic>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	4a23      	ldr	r2, [pc, #140]	; (800a16c <vTaskStartScheduler+0xc8>)
 800a0de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0e0:	4b22      	ldr	r3, [pc, #136]	; (800a16c <vTaskStartScheduler+0xc8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	e001      	b.n	800a0f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d102      	bne.n	800a0fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0f8:	f000 fd10 	bl	800ab1c <xTimerCreateTimerTask>
 800a0fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d11b      	bne.n	800a13c <vTaskStartScheduler+0x98>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	613b      	str	r3, [r7, #16]
}
 800a116:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a118:	4b15      	ldr	r3, [pc, #84]	; (800a170 <vTaskStartScheduler+0xcc>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3354      	adds	r3, #84	; 0x54
 800a11e:	4a15      	ldr	r2, [pc, #84]	; (800a174 <vTaskStartScheduler+0xd0>)
 800a120:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a122:	4b15      	ldr	r3, [pc, #84]	; (800a178 <vTaskStartScheduler+0xd4>)
 800a124:	f04f 32ff 	mov.w	r2, #4294967295
 800a128:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a12a:	4b14      	ldr	r3, [pc, #80]	; (800a17c <vTaskStartScheduler+0xd8>)
 800a12c:	2201      	movs	r2, #1
 800a12e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a130:	4b13      	ldr	r3, [pc, #76]	; (800a180 <vTaskStartScheduler+0xdc>)
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a136:	f001 f8cb 	bl	800b2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a13a:	e00e      	b.n	800a15a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d10a      	bne.n	800a15a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	60fb      	str	r3, [r7, #12]
}
 800a156:	bf00      	nop
 800a158:	e7fe      	b.n	800a158 <vTaskStartScheduler+0xb4>
}
 800a15a:	bf00      	nop
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	0800fa44 	.word	0x0800fa44
 800a168:	0800a7a9 	.word	0x0800a7a9
 800a16c:	20001c84 	.word	0x20001c84
 800a170:	2000178c 	.word	0x2000178c
 800a174:	20000600 	.word	0x20000600
 800a178:	20001c80 	.word	0x20001c80
 800a17c:	20001c6c 	.word	0x20001c6c
 800a180:	20001c64 	.word	0x20001c64

0800a184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a184:	b480      	push	{r7}
 800a186:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a188:	4b04      	ldr	r3, [pc, #16]	; (800a19c <vTaskSuspendAll+0x18>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3301      	adds	r3, #1
 800a18e:	4a03      	ldr	r2, [pc, #12]	; (800a19c <vTaskSuspendAll+0x18>)
 800a190:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a192:	bf00      	nop
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	20001c88 	.word	0x20001c88

0800a1a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1ae:	4b42      	ldr	r3, [pc, #264]	; (800a2b8 <xTaskResumeAll+0x118>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10a      	bne.n	800a1cc <xTaskResumeAll+0x2c>
	__asm volatile
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	603b      	str	r3, [r7, #0]
}
 800a1c8:	bf00      	nop
 800a1ca:	e7fe      	b.n	800a1ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1cc:	f001 f922 	bl	800b414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1d0:	4b39      	ldr	r3, [pc, #228]	; (800a2b8 <xTaskResumeAll+0x118>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	4a38      	ldr	r2, [pc, #224]	; (800a2b8 <xTaskResumeAll+0x118>)
 800a1d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1da:	4b37      	ldr	r3, [pc, #220]	; (800a2b8 <xTaskResumeAll+0x118>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d162      	bne.n	800a2a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1e2:	4b36      	ldr	r3, [pc, #216]	; (800a2bc <xTaskResumeAll+0x11c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d05e      	beq.n	800a2a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1ea:	e02f      	b.n	800a24c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ec:	4b34      	ldr	r3, [pc, #208]	; (800a2c0 <xTaskResumeAll+0x120>)
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3318      	adds	r3, #24
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff f851 	bl	80092a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3304      	adds	r3, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff f84c 	bl	80092a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20c:	4b2d      	ldr	r3, [pc, #180]	; (800a2c4 <xTaskResumeAll+0x124>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d903      	bls.n	800a21c <xTaskResumeAll+0x7c>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a218:	4a2a      	ldr	r2, [pc, #168]	; (800a2c4 <xTaskResumeAll+0x124>)
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a220:	4613      	mov	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4a27      	ldr	r2, [pc, #156]	; (800a2c8 <xTaskResumeAll+0x128>)
 800a22a:	441a      	add	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3304      	adds	r3, #4
 800a230:	4619      	mov	r1, r3
 800a232:	4610      	mov	r0, r2
 800a234:	f7fe ffd7 	bl	80091e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23c:	4b23      	ldr	r3, [pc, #140]	; (800a2cc <xTaskResumeAll+0x12c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a242:	429a      	cmp	r2, r3
 800a244:	d302      	bcc.n	800a24c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a246:	4b22      	ldr	r3, [pc, #136]	; (800a2d0 <xTaskResumeAll+0x130>)
 800a248:	2201      	movs	r2, #1
 800a24a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a24c:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <xTaskResumeAll+0x120>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1cb      	bne.n	800a1ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a25a:	f000 fb5f 	bl	800a91c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a25e:	4b1d      	ldr	r3, [pc, #116]	; (800a2d4 <xTaskResumeAll+0x134>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d010      	beq.n	800a28c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a26a:	f000 f847 	bl	800a2fc <xTaskIncrementTick>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a274:	4b16      	ldr	r3, [pc, #88]	; (800a2d0 <xTaskResumeAll+0x130>)
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1f1      	bne.n	800a26a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a286:	4b13      	ldr	r3, [pc, #76]	; (800a2d4 <xTaskResumeAll+0x134>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a28c:	4b10      	ldr	r3, [pc, #64]	; (800a2d0 <xTaskResumeAll+0x130>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d009      	beq.n	800a2a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a294:	2301      	movs	r3, #1
 800a296:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a298:	4b0f      	ldr	r3, [pc, #60]	; (800a2d8 <xTaskResumeAll+0x138>)
 800a29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2a8:	f001 f8e4 	bl	800b474 <vPortExitCritical>

	return xAlreadyYielded;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20001c88 	.word	0x20001c88
 800a2bc:	20001c60 	.word	0x20001c60
 800a2c0:	20001c20 	.word	0x20001c20
 800a2c4:	20001c68 	.word	0x20001c68
 800a2c8:	20001790 	.word	0x20001790
 800a2cc:	2000178c 	.word	0x2000178c
 800a2d0:	20001c74 	.word	0x20001c74
 800a2d4:	20001c70 	.word	0x20001c70
 800a2d8:	e000ed04 	.word	0xe000ed04

0800a2dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <xTaskGetTickCount+0x1c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2e8:	687b      	ldr	r3, [r7, #4]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	20001c64 	.word	0x20001c64

0800a2fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a302:	2300      	movs	r3, #0
 800a304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a306:	4b4f      	ldr	r3, [pc, #316]	; (800a444 <xTaskIncrementTick+0x148>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f040 808f 	bne.w	800a42e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a310:	4b4d      	ldr	r3, [pc, #308]	; (800a448 <xTaskIncrementTick+0x14c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3301      	adds	r3, #1
 800a316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a318:	4a4b      	ldr	r2, [pc, #300]	; (800a448 <xTaskIncrementTick+0x14c>)
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d120      	bne.n	800a366 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a324:	4b49      	ldr	r3, [pc, #292]	; (800a44c <xTaskIncrementTick+0x150>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <xTaskIncrementTick+0x48>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	603b      	str	r3, [r7, #0]
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <xTaskIncrementTick+0x46>
 800a344:	4b41      	ldr	r3, [pc, #260]	; (800a44c <xTaskIncrementTick+0x150>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	4b41      	ldr	r3, [pc, #260]	; (800a450 <xTaskIncrementTick+0x154>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a3f      	ldr	r2, [pc, #252]	; (800a44c <xTaskIncrementTick+0x150>)
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	4a3f      	ldr	r2, [pc, #252]	; (800a450 <xTaskIncrementTick+0x154>)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	4b3e      	ldr	r3, [pc, #248]	; (800a454 <xTaskIncrementTick+0x158>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	3301      	adds	r3, #1
 800a35e:	4a3d      	ldr	r2, [pc, #244]	; (800a454 <xTaskIncrementTick+0x158>)
 800a360:	6013      	str	r3, [r2, #0]
 800a362:	f000 fadb 	bl	800a91c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a366:	4b3c      	ldr	r3, [pc, #240]	; (800a458 <xTaskIncrementTick+0x15c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d349      	bcc.n	800a404 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a370:	4b36      	ldr	r3, [pc, #216]	; (800a44c <xTaskIncrementTick+0x150>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d104      	bne.n	800a384 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a37a:	4b37      	ldr	r3, [pc, #220]	; (800a458 <xTaskIncrementTick+0x15c>)
 800a37c:	f04f 32ff 	mov.w	r2, #4294967295
 800a380:	601a      	str	r2, [r3, #0]
					break;
 800a382:	e03f      	b.n	800a404 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a384:	4b31      	ldr	r3, [pc, #196]	; (800a44c <xTaskIncrementTick+0x150>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d203      	bcs.n	800a3a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a39c:	4a2e      	ldr	r2, [pc, #184]	; (800a458 <xTaskIncrementTick+0x15c>)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3a2:	e02f      	b.n	800a404 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe ff79 	bl	80092a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d004      	beq.n	800a3c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	3318      	adds	r3, #24
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe ff70 	bl	80092a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c4:	4b25      	ldr	r3, [pc, #148]	; (800a45c <xTaskIncrementTick+0x160>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d903      	bls.n	800a3d4 <xTaskIncrementTick+0xd8>
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	4a22      	ldr	r2, [pc, #136]	; (800a45c <xTaskIncrementTick+0x160>)
 800a3d2:	6013      	str	r3, [r2, #0]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d8:	4613      	mov	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4a1f      	ldr	r2, [pc, #124]	; (800a460 <xTaskIncrementTick+0x164>)
 800a3e2:	441a      	add	r2, r3
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	f7fe fefb 	bl	80091e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f4:	4b1b      	ldr	r3, [pc, #108]	; (800a464 <xTaskIncrementTick+0x168>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d3b8      	bcc.n	800a370 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3fe:	2301      	movs	r3, #1
 800a400:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a402:	e7b5      	b.n	800a370 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a404:	4b17      	ldr	r3, [pc, #92]	; (800a464 <xTaskIncrementTick+0x168>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40a:	4915      	ldr	r1, [pc, #84]	; (800a460 <xTaskIncrementTick+0x164>)
 800a40c:	4613      	mov	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	440b      	add	r3, r1
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d901      	bls.n	800a420 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a41c:	2301      	movs	r3, #1
 800a41e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a420:	4b11      	ldr	r3, [pc, #68]	; (800a468 <xTaskIncrementTick+0x16c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d007      	beq.n	800a438 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a428:	2301      	movs	r3, #1
 800a42a:	617b      	str	r3, [r7, #20]
 800a42c:	e004      	b.n	800a438 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a42e:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <xTaskIncrementTick+0x170>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	4a0d      	ldr	r2, [pc, #52]	; (800a46c <xTaskIncrementTick+0x170>)
 800a436:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a438:	697b      	ldr	r3, [r7, #20]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20001c88 	.word	0x20001c88
 800a448:	20001c64 	.word	0x20001c64
 800a44c:	20001c18 	.word	0x20001c18
 800a450:	20001c1c 	.word	0x20001c1c
 800a454:	20001c78 	.word	0x20001c78
 800a458:	20001c80 	.word	0x20001c80
 800a45c:	20001c68 	.word	0x20001c68
 800a460:	20001790 	.word	0x20001790
 800a464:	2000178c 	.word	0x2000178c
 800a468:	20001c74 	.word	0x20001c74
 800a46c:	20001c70 	.word	0x20001c70

0800a470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a476:	4b2a      	ldr	r3, [pc, #168]	; (800a520 <vTaskSwitchContext+0xb0>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a47e:	4b29      	ldr	r3, [pc, #164]	; (800a524 <vTaskSwitchContext+0xb4>)
 800a480:	2201      	movs	r2, #1
 800a482:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a484:	e046      	b.n	800a514 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a486:	4b27      	ldr	r3, [pc, #156]	; (800a524 <vTaskSwitchContext+0xb4>)
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48c:	4b26      	ldr	r3, [pc, #152]	; (800a528 <vTaskSwitchContext+0xb8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	60fb      	str	r3, [r7, #12]
 800a492:	e010      	b.n	800a4b6 <vTaskSwitchContext+0x46>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10a      	bne.n	800a4b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	607b      	str	r3, [r7, #4]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <vTaskSwitchContext+0x3e>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	60fb      	str	r3, [r7, #12]
 800a4b6:	491d      	ldr	r1, [pc, #116]	; (800a52c <vTaskSwitchContext+0xbc>)
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	440b      	add	r3, r1
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0e4      	beq.n	800a494 <vTaskSwitchContext+0x24>
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4a15      	ldr	r2, [pc, #84]	; (800a52c <vTaskSwitchContext+0xbc>)
 800a4d6:	4413      	add	r3, r2
 800a4d8:	60bb      	str	r3, [r7, #8]
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	605a      	str	r2, [r3, #4]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d104      	bne.n	800a4fa <vTaskSwitchContext+0x8a>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	605a      	str	r2, [r3, #4]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	4a0b      	ldr	r2, [pc, #44]	; (800a530 <vTaskSwitchContext+0xc0>)
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	4a08      	ldr	r2, [pc, #32]	; (800a528 <vTaskSwitchContext+0xb8>)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <vTaskSwitchContext+0xc0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3354      	adds	r3, #84	; 0x54
 800a510:	4a08      	ldr	r2, [pc, #32]	; (800a534 <vTaskSwitchContext+0xc4>)
 800a512:	6013      	str	r3, [r2, #0]
}
 800a514:	bf00      	nop
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	20001c88 	.word	0x20001c88
 800a524:	20001c74 	.word	0x20001c74
 800a528:	20001c68 	.word	0x20001c68
 800a52c:	20001790 	.word	0x20001790
 800a530:	2000178c 	.word	0x2000178c
 800a534:	20000600 	.word	0x20000600

0800a538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10a      	bne.n	800a55e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	60fb      	str	r3, [r7, #12]
}
 800a55a:	bf00      	nop
 800a55c:	e7fe      	b.n	800a55c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a55e:	4b07      	ldr	r3, [pc, #28]	; (800a57c <vTaskPlaceOnEventList+0x44>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3318      	adds	r3, #24
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7fe fe61 	bl	800922e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a56c:	2101      	movs	r1, #1
 800a56e:	6838      	ldr	r0, [r7, #0]
 800a570:	f000 fa80 	bl	800aa74 <prvAddCurrentTaskToDelayedList>
}
 800a574:	bf00      	nop
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	2000178c 	.word	0x2000178c

0800a580 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10a      	bne.n	800a5a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	617b      	str	r3, [r7, #20]
}
 800a5a4:	bf00      	nop
 800a5a6:	e7fe      	b.n	800a5a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5a8:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3318      	adds	r3, #24
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7fe fe18 	bl	80091e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5c2:	6879      	ldr	r1, [r7, #4]
 800a5c4:	68b8      	ldr	r0, [r7, #8]
 800a5c6:	f000 fa55 	bl	800aa74 <prvAddCurrentTaskToDelayedList>
	}
 800a5ca:	bf00      	nop
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	2000178c 	.word	0x2000178c

0800a5d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10a      	bne.n	800a604 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	60fb      	str	r3, [r7, #12]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	3318      	adds	r3, #24
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fe fe49 	bl	80092a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a60e:	4b1e      	ldr	r3, [pc, #120]	; (800a688 <xTaskRemoveFromEventList+0xb0>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d11d      	bne.n	800a652 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	3304      	adds	r3, #4
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fe40 	bl	80092a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a624:	4b19      	ldr	r3, [pc, #100]	; (800a68c <xTaskRemoveFromEventList+0xb4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d903      	bls.n	800a634 <xTaskRemoveFromEventList+0x5c>
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a630:	4a16      	ldr	r2, [pc, #88]	; (800a68c <xTaskRemoveFromEventList+0xb4>)
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a638:	4613      	mov	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4a13      	ldr	r2, [pc, #76]	; (800a690 <xTaskRemoveFromEventList+0xb8>)
 800a642:	441a      	add	r2, r3
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	3304      	adds	r3, #4
 800a648:	4619      	mov	r1, r3
 800a64a:	4610      	mov	r0, r2
 800a64c:	f7fe fdcb 	bl	80091e6 <vListInsertEnd>
 800a650:	e005      	b.n	800a65e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	3318      	adds	r3, #24
 800a656:	4619      	mov	r1, r3
 800a658:	480e      	ldr	r0, [pc, #56]	; (800a694 <xTaskRemoveFromEventList+0xbc>)
 800a65a:	f7fe fdc4 	bl	80091e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a662:	4b0d      	ldr	r3, [pc, #52]	; (800a698 <xTaskRemoveFromEventList+0xc0>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a668:	429a      	cmp	r2, r3
 800a66a:	d905      	bls.n	800a678 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a66c:	2301      	movs	r3, #1
 800a66e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a670:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <xTaskRemoveFromEventList+0xc4>)
 800a672:	2201      	movs	r2, #1
 800a674:	601a      	str	r2, [r3, #0]
 800a676:	e001      	b.n	800a67c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a678:	2300      	movs	r3, #0
 800a67a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a67c:	697b      	ldr	r3, [r7, #20]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20001c88 	.word	0x20001c88
 800a68c:	20001c68 	.word	0x20001c68
 800a690:	20001790 	.word	0x20001790
 800a694:	20001c20 	.word	0x20001c20
 800a698:	2000178c 	.word	0x2000178c
 800a69c:	20001c74 	.word	0x20001c74

0800a6a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <vTaskInternalSetTimeOutState+0x24>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6b0:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <vTaskInternalSetTimeOutState+0x28>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	605a      	str	r2, [r3, #4]
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	20001c78 	.word	0x20001c78
 800a6c8:	20001c64 	.word	0x20001c64

0800a6cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10a      	bne.n	800a6f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	613b      	str	r3, [r7, #16]
}
 800a6ee:	bf00      	nop
 800a6f0:	e7fe      	b.n	800a6f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10a      	bne.n	800a70e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	60fb      	str	r3, [r7, #12]
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a70e:	f000 fe81 	bl	800b414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a712:	4b1d      	ldr	r3, [pc, #116]	; (800a788 <xTaskCheckForTimeOut+0xbc>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72a:	d102      	bne.n	800a732 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a72c:	2300      	movs	r3, #0
 800a72e:	61fb      	str	r3, [r7, #28]
 800a730:	e023      	b.n	800a77a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	4b15      	ldr	r3, [pc, #84]	; (800a78c <xTaskCheckForTimeOut+0xc0>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d007      	beq.n	800a74e <xTaskCheckForTimeOut+0x82>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	429a      	cmp	r2, r3
 800a746:	d302      	bcc.n	800a74e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a748:	2301      	movs	r3, #1
 800a74a:	61fb      	str	r3, [r7, #28]
 800a74c:	e015      	b.n	800a77a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	429a      	cmp	r2, r3
 800a756:	d20b      	bcs.n	800a770 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff ff9b 	bl	800a6a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a76a:	2300      	movs	r3, #0
 800a76c:	61fb      	str	r3, [r7, #28]
 800a76e:	e004      	b.n	800a77a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a776:	2301      	movs	r3, #1
 800a778:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a77a:	f000 fe7b 	bl	800b474 <vPortExitCritical>

	return xReturn;
 800a77e:	69fb      	ldr	r3, [r7, #28]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3720      	adds	r7, #32
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	20001c64 	.word	0x20001c64
 800a78c:	20001c78 	.word	0x20001c78

0800a790 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a790:	b480      	push	{r7}
 800a792:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a794:	4b03      	ldr	r3, [pc, #12]	; (800a7a4 <vTaskMissedYield+0x14>)
 800a796:	2201      	movs	r2, #1
 800a798:	601a      	str	r2, [r3, #0]
}
 800a79a:	bf00      	nop
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	20001c74 	.word	0x20001c74

0800a7a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7b0:	f000 f852 	bl	800a858 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <prvIdleTask+0x28>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d9f9      	bls.n	800a7b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7bc:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <prvIdleTask+0x2c>)
 800a7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7cc:	e7f0      	b.n	800a7b0 <prvIdleTask+0x8>
 800a7ce:	bf00      	nop
 800a7d0:	20001790 	.word	0x20001790
 800a7d4:	e000ed04 	.word	0xe000ed04

0800a7d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7de:	2300      	movs	r3, #0
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	e00c      	b.n	800a7fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4413      	add	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4a12      	ldr	r2, [pc, #72]	; (800a838 <prvInitialiseTaskLists+0x60>)
 800a7f0:	4413      	add	r3, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe fcca 	bl	800918c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	607b      	str	r3, [r7, #4]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b37      	cmp	r3, #55	; 0x37
 800a802:	d9ef      	bls.n	800a7e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a804:	480d      	ldr	r0, [pc, #52]	; (800a83c <prvInitialiseTaskLists+0x64>)
 800a806:	f7fe fcc1 	bl	800918c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a80a:	480d      	ldr	r0, [pc, #52]	; (800a840 <prvInitialiseTaskLists+0x68>)
 800a80c:	f7fe fcbe 	bl	800918c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a810:	480c      	ldr	r0, [pc, #48]	; (800a844 <prvInitialiseTaskLists+0x6c>)
 800a812:	f7fe fcbb 	bl	800918c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a816:	480c      	ldr	r0, [pc, #48]	; (800a848 <prvInitialiseTaskLists+0x70>)
 800a818:	f7fe fcb8 	bl	800918c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a81c:	480b      	ldr	r0, [pc, #44]	; (800a84c <prvInitialiseTaskLists+0x74>)
 800a81e:	f7fe fcb5 	bl	800918c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a822:	4b0b      	ldr	r3, [pc, #44]	; (800a850 <prvInitialiseTaskLists+0x78>)
 800a824:	4a05      	ldr	r2, [pc, #20]	; (800a83c <prvInitialiseTaskLists+0x64>)
 800a826:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <prvInitialiseTaskLists+0x7c>)
 800a82a:	4a05      	ldr	r2, [pc, #20]	; (800a840 <prvInitialiseTaskLists+0x68>)
 800a82c:	601a      	str	r2, [r3, #0]
}
 800a82e:	bf00      	nop
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20001790 	.word	0x20001790
 800a83c:	20001bf0 	.word	0x20001bf0
 800a840:	20001c04 	.word	0x20001c04
 800a844:	20001c20 	.word	0x20001c20
 800a848:	20001c34 	.word	0x20001c34
 800a84c:	20001c4c 	.word	0x20001c4c
 800a850:	20001c18 	.word	0x20001c18
 800a854:	20001c1c 	.word	0x20001c1c

0800a858 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a85e:	e019      	b.n	800a894 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a860:	f000 fdd8 	bl	800b414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a864:	4b10      	ldr	r3, [pc, #64]	; (800a8a8 <prvCheckTasksWaitingTermination+0x50>)
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3304      	adds	r3, #4
 800a870:	4618      	mov	r0, r3
 800a872:	f7fe fd15 	bl	80092a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a876:	4b0d      	ldr	r3, [pc, #52]	; (800a8ac <prvCheckTasksWaitingTermination+0x54>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	4a0b      	ldr	r2, [pc, #44]	; (800a8ac <prvCheckTasksWaitingTermination+0x54>)
 800a87e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a880:	4b0b      	ldr	r3, [pc, #44]	; (800a8b0 <prvCheckTasksWaitingTermination+0x58>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	3b01      	subs	r3, #1
 800a886:	4a0a      	ldr	r2, [pc, #40]	; (800a8b0 <prvCheckTasksWaitingTermination+0x58>)
 800a888:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a88a:	f000 fdf3 	bl	800b474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 f810 	bl	800a8b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a894:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <prvCheckTasksWaitingTermination+0x58>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e1      	bne.n	800a860 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a89c:	bf00      	nop
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20001c34 	.word	0x20001c34
 800a8ac:	20001c60 	.word	0x20001c60
 800a8b0:	20001c48 	.word	0x20001c48

0800a8b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3354      	adds	r3, #84	; 0x54
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f002 fe95 	bl	800d5f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d108      	bne.n	800a8e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 ff8b 	bl	800b7f0 <vPortFree>
				vPortFree( pxTCB );
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 ff88 	bl	800b7f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8e0:	e018      	b.n	800a914 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d103      	bne.n	800a8f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 ff7f 	bl	800b7f0 <vPortFree>
	}
 800a8f2:	e00f      	b.n	800a914 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d00a      	beq.n	800a914 <prvDeleteTCB+0x60>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	60fb      	str	r3, [r7, #12]
}
 800a910:	bf00      	nop
 800a912:	e7fe      	b.n	800a912 <prvDeleteTCB+0x5e>
	}
 800a914:	bf00      	nop
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a922:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <prvResetNextTaskUnblockTime+0x38>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a92c:	4b0a      	ldr	r3, [pc, #40]	; (800a958 <prvResetNextTaskUnblockTime+0x3c>)
 800a92e:	f04f 32ff 	mov.w	r2, #4294967295
 800a932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a934:	e008      	b.n	800a948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a936:	4b07      	ldr	r3, [pc, #28]	; (800a954 <prvResetNextTaskUnblockTime+0x38>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	4a04      	ldr	r2, [pc, #16]	; (800a958 <prvResetNextTaskUnblockTime+0x3c>)
 800a946:	6013      	str	r3, [r2, #0]
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	20001c18 	.word	0x20001c18
 800a958:	20001c80 	.word	0x20001c80

0800a95c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a962:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <xTaskGetSchedulerState+0x34>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d102      	bne.n	800a970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a96a:	2301      	movs	r3, #1
 800a96c:	607b      	str	r3, [r7, #4]
 800a96e:	e008      	b.n	800a982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a970:	4b08      	ldr	r3, [pc, #32]	; (800a994 <xTaskGetSchedulerState+0x38>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d102      	bne.n	800a97e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a978:	2302      	movs	r3, #2
 800a97a:	607b      	str	r3, [r7, #4]
 800a97c:	e001      	b.n	800a982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a97e:	2300      	movs	r3, #0
 800a980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a982:	687b      	ldr	r3, [r7, #4]
	}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20001c6c 	.word	0x20001c6c
 800a994:	20001c88 	.word	0x20001c88

0800a998 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d056      	beq.n	800aa5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9ae:	4b2e      	ldr	r3, [pc, #184]	; (800aa68 <xTaskPriorityDisinherit+0xd0>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d00a      	beq.n	800a9ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	60fb      	str	r3, [r7, #12]
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10a      	bne.n	800a9ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	60bb      	str	r3, [r7, #8]
}
 800a9e8:	bf00      	nop
 800a9ea:	e7fe      	b.n	800a9ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f0:	1e5a      	subs	r2, r3, #1
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d02c      	beq.n	800aa5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d128      	bne.n	800aa5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	3304      	adds	r3, #4
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fc46 	bl	80092a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <xTaskPriorityDisinherit+0xd4>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d903      	bls.n	800aa3c <xTaskPriorityDisinherit+0xa4>
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	4a0c      	ldr	r2, [pc, #48]	; (800aa6c <xTaskPriorityDisinherit+0xd4>)
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4613      	mov	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4a09      	ldr	r2, [pc, #36]	; (800aa70 <xTaskPriorityDisinherit+0xd8>)
 800aa4a:	441a      	add	r2, r3
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	4619      	mov	r1, r3
 800aa52:	4610      	mov	r0, r2
 800aa54:	f7fe fbc7 	bl	80091e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa5c:	697b      	ldr	r3, [r7, #20]
	}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	2000178c 	.word	0x2000178c
 800aa6c:	20001c68 	.word	0x20001c68
 800aa70:	20001790 	.word	0x20001790

0800aa74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa7e:	4b21      	ldr	r3, [pc, #132]	; (800ab04 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa84:	4b20      	ldr	r3, [pc, #128]	; (800ab08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3304      	adds	r3, #4
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fc08 	bl	80092a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa96:	d10a      	bne.n	800aaae <prvAddCurrentTaskToDelayedList+0x3a>
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d007      	beq.n	800aaae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa9e:	4b1a      	ldr	r3, [pc, #104]	; (800ab08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4819      	ldr	r0, [pc, #100]	; (800ab0c <prvAddCurrentTaskToDelayedList+0x98>)
 800aaa8:	f7fe fb9d 	bl	80091e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aaac:	e026      	b.n	800aafc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4413      	add	r3, r2
 800aab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aab6:	4b14      	ldr	r3, [pc, #80]	; (800ab08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d209      	bcs.n	800aada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aac6:	4b12      	ldr	r3, [pc, #72]	; (800ab10 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4b0f      	ldr	r3, [pc, #60]	; (800ab08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3304      	adds	r3, #4
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f7fe fbab 	bl	800922e <vListInsert>
}
 800aad8:	e010      	b.n	800aafc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aada:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <prvAddCurrentTaskToDelayedList+0x94>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3304      	adds	r3, #4
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	f7fe fba1 	bl	800922e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aaec:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d202      	bcs.n	800aafc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aaf6:	4a08      	ldr	r2, [pc, #32]	; (800ab18 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	6013      	str	r3, [r2, #0]
}
 800aafc:	bf00      	nop
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20001c64 	.word	0x20001c64
 800ab08:	2000178c 	.word	0x2000178c
 800ab0c:	20001c4c 	.word	0x20001c4c
 800ab10:	20001c1c 	.word	0x20001c1c
 800ab14:	20001c18 	.word	0x20001c18
 800ab18:	20001c80 	.word	0x20001c80

0800ab1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	; 0x28
 800ab20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab26:	f000 fb07 	bl	800b138 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab2a:	4b1c      	ldr	r3, [pc, #112]	; (800ab9c <xTimerCreateTimerTask+0x80>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d021      	beq.n	800ab76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab3a:	1d3a      	adds	r2, r7, #4
 800ab3c:	f107 0108 	add.w	r1, r7, #8
 800ab40:	f107 030c 	add.w	r3, r7, #12
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe fb07 	bl	8009158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	9202      	str	r2, [sp, #8]
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	2302      	movs	r3, #2
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	460a      	mov	r2, r1
 800ab5c:	4910      	ldr	r1, [pc, #64]	; (800aba0 <xTimerCreateTimerTask+0x84>)
 800ab5e:	4811      	ldr	r0, [pc, #68]	; (800aba4 <xTimerCreateTimerTask+0x88>)
 800ab60:	f7ff f8b4 	bl	8009ccc <xTaskCreateStatic>
 800ab64:	4603      	mov	r3, r0
 800ab66:	4a10      	ldr	r2, [pc, #64]	; (800aba8 <xTimerCreateTimerTask+0x8c>)
 800ab68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab6a:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <xTimerCreateTimerTask+0x8c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab72:	2301      	movs	r3, #1
 800ab74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	613b      	str	r3, [r7, #16]
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab92:	697b      	ldr	r3, [r7, #20]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20001cbc 	.word	0x20001cbc
 800aba0:	0800fa4c 	.word	0x0800fa4c
 800aba4:	0800ace1 	.word	0x0800ace1
 800aba8:	20001cc0 	.word	0x20001cc0

0800abac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b08a      	sub	sp, #40	; 0x28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abba:	2300      	movs	r3, #0
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <xTimerGenericCommand+0x2e>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	623b      	str	r3, [r7, #32]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abda:	4b1a      	ldr	r3, [pc, #104]	; (800ac44 <xTimerGenericCommand+0x98>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d02a      	beq.n	800ac38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b05      	cmp	r3, #5
 800abf2:	dc18      	bgt.n	800ac26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abf4:	f7ff feb2 	bl	800a95c <xTaskGetSchedulerState>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d109      	bne.n	800ac12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abfe:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <xTimerGenericCommand+0x98>)
 800ac00:	6818      	ldr	r0, [r3, #0]
 800ac02:	f107 0110 	add.w	r1, r7, #16
 800ac06:	2300      	movs	r3, #0
 800ac08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac0a:	f7fe fc77 	bl	80094fc <xQueueGenericSend>
 800ac0e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac10:	e012      	b.n	800ac38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac12:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <xTimerGenericCommand+0x98>)
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	f107 0110 	add.w	r1, r7, #16
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f7fe fc6d 	bl	80094fc <xQueueGenericSend>
 800ac22:	6278      	str	r0, [r7, #36]	; 0x24
 800ac24:	e008      	b.n	800ac38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac26:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <xTimerGenericCommand+0x98>)
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f107 0110 	add.w	r1, r7, #16
 800ac2e:	2300      	movs	r3, #0
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	f7fe fd61 	bl	80096f8 <xQueueGenericSendFromISR>
 800ac36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3728      	adds	r7, #40	; 0x28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20001cbc 	.word	0x20001cbc

0800ac48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af02      	add	r7, sp, #8
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac52:	4b22      	ldr	r3, [pc, #136]	; (800acdc <prvProcessExpiredTimer+0x94>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	3304      	adds	r3, #4
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fe fb1d 	bl	80092a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d022      	beq.n	800acba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	699a      	ldr	r2, [r3, #24]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	18d1      	adds	r1, r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	6978      	ldr	r0, [r7, #20]
 800ac82:	f000 f8d1 	bl	800ae28 <prvInsertTimerInActiveList>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01f      	beq.n	800accc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	2300      	movs	r3, #0
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	2100      	movs	r1, #0
 800ac96:	6978      	ldr	r0, [r7, #20]
 800ac98:	f7ff ff88 	bl	800abac <xTimerGenericCommand>
 800ac9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d113      	bne.n	800accc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	60fb      	str	r3, [r7, #12]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc0:	f023 0301 	bic.w	r3, r3, #1
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	6978      	ldr	r0, [r7, #20]
 800acd2:	4798      	blx	r3
}
 800acd4:	bf00      	nop
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20001cb4 	.word	0x20001cb4

0800ace0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ace8:	f107 0308 	add.w	r3, r7, #8
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f857 	bl	800ada0 <prvGetNextExpireTime>
 800acf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	4619      	mov	r1, r3
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f803 	bl	800ad04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acfe:	f000 f8d5 	bl	800aeac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad02:	e7f1      	b.n	800ace8 <prvTimerTask+0x8>

0800ad04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad0e:	f7ff fa39 	bl	800a184 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad12:	f107 0308 	add.w	r3, r7, #8
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 f866 	bl	800ade8 <prvSampleTimeNow>
 800ad1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d130      	bne.n	800ad86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10a      	bne.n	800ad40 <prvProcessTimerOrBlockTask+0x3c>
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d806      	bhi.n	800ad40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad32:	f7ff fa35 	bl	800a1a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad36:	68f9      	ldr	r1, [r7, #12]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7ff ff85 	bl	800ac48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad3e:	e024      	b.n	800ad8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d008      	beq.n	800ad58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad46:	4b13      	ldr	r3, [pc, #76]	; (800ad94 <prvProcessTimerOrBlockTask+0x90>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <prvProcessTimerOrBlockTask+0x50>
 800ad50:	2301      	movs	r3, #1
 800ad52:	e000      	b.n	800ad56 <prvProcessTimerOrBlockTask+0x52>
 800ad54:	2300      	movs	r3, #0
 800ad56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad58:	4b0f      	ldr	r3, [pc, #60]	; (800ad98 <prvProcessTimerOrBlockTask+0x94>)
 800ad5a:	6818      	ldr	r0, [r3, #0]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	4619      	mov	r1, r3
 800ad66:	f7fe ff7d 	bl	8009c64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad6a:	f7ff fa19 	bl	800a1a0 <xTaskResumeAll>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad74:	4b09      	ldr	r3, [pc, #36]	; (800ad9c <prvProcessTimerOrBlockTask+0x98>)
 800ad76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad7a:	601a      	str	r2, [r3, #0]
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	f3bf 8f6f 	isb	sy
}
 800ad84:	e001      	b.n	800ad8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad86:	f7ff fa0b 	bl	800a1a0 <xTaskResumeAll>
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	20001cb8 	.word	0x20001cb8
 800ad98:	20001cbc 	.word	0x20001cbc
 800ad9c:	e000ed04 	.word	0xe000ed04

0800ada0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ada8:	4b0e      	ldr	r3, [pc, #56]	; (800ade4 <prvGetNextExpireTime+0x44>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <prvGetNextExpireTime+0x16>
 800adb2:	2201      	movs	r2, #1
 800adb4:	e000      	b.n	800adb8 <prvGetNextExpireTime+0x18>
 800adb6:	2200      	movs	r2, #0
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d105      	bne.n	800add0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adc4:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <prvGetNextExpireTime+0x44>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	e001      	b.n	800add4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800add4:	68fb      	ldr	r3, [r7, #12]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	20001cb4 	.word	0x20001cb4

0800ade8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800adf0:	f7ff fa74 	bl	800a2dc <xTaskGetTickCount>
 800adf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800adf6:	4b0b      	ldr	r3, [pc, #44]	; (800ae24 <prvSampleTimeNow+0x3c>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d205      	bcs.n	800ae0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae00:	f000 f936 	bl	800b070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	e002      	b.n	800ae12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae12:	4a04      	ldr	r2, [pc, #16]	; (800ae24 <prvSampleTimeNow+0x3c>)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae18:	68fb      	ldr	r3, [r7, #12]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	20001cc4 	.word	0x20001cc4

0800ae28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae36:	2300      	movs	r3, #0
 800ae38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d812      	bhi.n	800ae74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	1ad2      	subs	r2, r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d302      	bcc.n	800ae62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	e01b      	b.n	800ae9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae62:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <prvInsertTimerInActiveList+0x7c>)
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7fe f9de 	bl	800922e <vListInsert>
 800ae72:	e012      	b.n	800ae9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d206      	bcs.n	800ae8a <prvInsertTimerInActiveList+0x62>
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d302      	bcc.n	800ae8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	617b      	str	r3, [r7, #20]
 800ae88:	e007      	b.n	800ae9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <prvInsertTimerInActiveList+0x80>)
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3304      	adds	r3, #4
 800ae92:	4619      	mov	r1, r3
 800ae94:	4610      	mov	r0, r2
 800ae96:	f7fe f9ca 	bl	800922e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae9a:	697b      	ldr	r3, [r7, #20]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	20001cb8 	.word	0x20001cb8
 800aea8:	20001cb4 	.word	0x20001cb4

0800aeac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08e      	sub	sp, #56	; 0x38
 800aeb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aeb2:	e0ca      	b.n	800b04a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	da18      	bge.n	800aeec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aeba:	1d3b      	adds	r3, r7, #4
 800aebc:	3304      	adds	r3, #4
 800aebe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	61fb      	str	r3, [r7, #28]
}
 800aed8:	bf00      	nop
 800aeda:	e7fe      	b.n	800aeda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aee2:	6850      	ldr	r0, [r2, #4]
 800aee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aee6:	6892      	ldr	r2, [r2, #8]
 800aee8:	4611      	mov	r1, r2
 800aeea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f2c0 80ab 	blt.w	800b04a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d004      	beq.n	800af0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	3304      	adds	r3, #4
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe f9cb 	bl	80092a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af0a:	463b      	mov	r3, r7
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff ff6b 	bl	800ade8 <prvSampleTimeNow>
 800af12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b09      	cmp	r3, #9
 800af18:	f200 8096 	bhi.w	800b048 <prvProcessReceivedCommands+0x19c>
 800af1c:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <prvProcessReceivedCommands+0x78>)
 800af1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af22:	bf00      	nop
 800af24:	0800af4d 	.word	0x0800af4d
 800af28:	0800af4d 	.word	0x0800af4d
 800af2c:	0800af4d 	.word	0x0800af4d
 800af30:	0800afc1 	.word	0x0800afc1
 800af34:	0800afd5 	.word	0x0800afd5
 800af38:	0800b01f 	.word	0x0800b01f
 800af3c:	0800af4d 	.word	0x0800af4d
 800af40:	0800af4d 	.word	0x0800af4d
 800af44:	0800afc1 	.word	0x0800afc1
 800af48:	0800afd5 	.word	0x0800afd5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af52:	f043 0301 	orr.w	r3, r3, #1
 800af56:	b2da      	uxtb	r2, r3
 800af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	18d1      	adds	r1, r2, r3
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af6c:	f7ff ff5c 	bl	800ae28 <prvInsertTimerInActiveList>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d069      	beq.n	800b04a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af84:	f003 0304 	and.w	r3, r3, #4
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d05e      	beq.n	800b04a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	441a      	add	r2, r3
 800af94:	2300      	movs	r3, #0
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	2300      	movs	r3, #0
 800af9a:	2100      	movs	r1, #0
 800af9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af9e:	f7ff fe05 	bl	800abac <xTimerGenericCommand>
 800afa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d14f      	bne.n	800b04a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	61bb      	str	r3, [r7, #24]
}
 800afbc:	bf00      	nop
 800afbe:	e7fe      	b.n	800afbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afc6:	f023 0301 	bic.w	r3, r3, #1
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800afd2:	e03a      	b.n	800b04a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afda:	f043 0301 	orr.w	r3, r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	617b      	str	r3, [r7, #20]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	699a      	ldr	r2, [r3, #24]
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	18d1      	adds	r1, r2, r3
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b018:	f7ff ff06 	bl	800ae28 <prvInsertTimerInActiveList>
					break;
 800b01c:	e015      	b.n	800b04a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b024:	f003 0302 	and.w	r3, r3, #2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d103      	bne.n	800b034 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b02c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b02e:	f000 fbdf 	bl	800b7f0 <vPortFree>
 800b032:	e00a      	b.n	800b04a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b03a:	f023 0301 	bic.w	r3, r3, #1
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b046:	e000      	b.n	800b04a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b04a:	4b08      	ldr	r3, [pc, #32]	; (800b06c <prvProcessReceivedCommands+0x1c0>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	1d39      	adds	r1, r7, #4
 800b050:	2200      	movs	r2, #0
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe fbec 	bl	8009830 <xQueueReceive>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f47f af2a 	bne.w	800aeb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	3730      	adds	r7, #48	; 0x30
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20001cbc 	.word	0x20001cbc

0800b070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b088      	sub	sp, #32
 800b074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b076:	e048      	b.n	800b10a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b078:	4b2d      	ldr	r3, [pc, #180]	; (800b130 <prvSwitchTimerLists+0xc0>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b082:	4b2b      	ldr	r3, [pc, #172]	; (800b130 <prvSwitchTimerLists+0xc0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3304      	adds	r3, #4
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe f905 	bl	80092a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a4:	f003 0304 	and.w	r3, r3, #4
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d02e      	beq.n	800b10a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d90e      	bls.n	800b0dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ca:	4b19      	ldr	r3, [pc, #100]	; (800b130 <prvSwitchTimerLists+0xc0>)
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	f7fe f8aa 	bl	800922e <vListInsert>
 800b0da:	e016      	b.n	800b10a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f7ff fd60 	bl	800abac <xTimerGenericCommand>
 800b0ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	603b      	str	r3, [r7, #0]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b10a:	4b09      	ldr	r3, [pc, #36]	; (800b130 <prvSwitchTimerLists+0xc0>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1b1      	bne.n	800b078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b114:	4b06      	ldr	r3, [pc, #24]	; (800b130 <prvSwitchTimerLists+0xc0>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b11a:	4b06      	ldr	r3, [pc, #24]	; (800b134 <prvSwitchTimerLists+0xc4>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a04      	ldr	r2, [pc, #16]	; (800b130 <prvSwitchTimerLists+0xc0>)
 800b120:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b122:	4a04      	ldr	r2, [pc, #16]	; (800b134 <prvSwitchTimerLists+0xc4>)
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	6013      	str	r3, [r2, #0]
}
 800b128:	bf00      	nop
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	20001cb4 	.word	0x20001cb4
 800b134:	20001cb8 	.word	0x20001cb8

0800b138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b13e:	f000 f969 	bl	800b414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b142:	4b15      	ldr	r3, [pc, #84]	; (800b198 <prvCheckForValidListAndQueue+0x60>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d120      	bne.n	800b18c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b14a:	4814      	ldr	r0, [pc, #80]	; (800b19c <prvCheckForValidListAndQueue+0x64>)
 800b14c:	f7fe f81e 	bl	800918c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b150:	4813      	ldr	r0, [pc, #76]	; (800b1a0 <prvCheckForValidListAndQueue+0x68>)
 800b152:	f7fe f81b 	bl	800918c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b156:	4b13      	ldr	r3, [pc, #76]	; (800b1a4 <prvCheckForValidListAndQueue+0x6c>)
 800b158:	4a10      	ldr	r2, [pc, #64]	; (800b19c <prvCheckForValidListAndQueue+0x64>)
 800b15a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b15c:	4b12      	ldr	r3, [pc, #72]	; (800b1a8 <prvCheckForValidListAndQueue+0x70>)
 800b15e:	4a10      	ldr	r2, [pc, #64]	; (800b1a0 <prvCheckForValidListAndQueue+0x68>)
 800b160:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b162:	2300      	movs	r3, #0
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4b11      	ldr	r3, [pc, #68]	; (800b1ac <prvCheckForValidListAndQueue+0x74>)
 800b168:	4a11      	ldr	r2, [pc, #68]	; (800b1b0 <prvCheckForValidListAndQueue+0x78>)
 800b16a:	2110      	movs	r1, #16
 800b16c:	200a      	movs	r0, #10
 800b16e:	f7fe f929 	bl	80093c4 <xQueueGenericCreateStatic>
 800b172:	4603      	mov	r3, r0
 800b174:	4a08      	ldr	r2, [pc, #32]	; (800b198 <prvCheckForValidListAndQueue+0x60>)
 800b176:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b178:	4b07      	ldr	r3, [pc, #28]	; (800b198 <prvCheckForValidListAndQueue+0x60>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b180:	4b05      	ldr	r3, [pc, #20]	; (800b198 <prvCheckForValidListAndQueue+0x60>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	490b      	ldr	r1, [pc, #44]	; (800b1b4 <prvCheckForValidListAndQueue+0x7c>)
 800b186:	4618      	mov	r0, r3
 800b188:	f7fe fd42 	bl	8009c10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b18c:	f000 f972 	bl	800b474 <vPortExitCritical>
}
 800b190:	bf00      	nop
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20001cbc 	.word	0x20001cbc
 800b19c:	20001c8c 	.word	0x20001c8c
 800b1a0:	20001ca0 	.word	0x20001ca0
 800b1a4:	20001cb4 	.word	0x20001cb4
 800b1a8:	20001cb8 	.word	0x20001cb8
 800b1ac:	20001d68 	.word	0x20001d68
 800b1b0:	20001cc8 	.word	0x20001cc8
 800b1b4:	0800fa54 	.word	0x0800fa54

0800b1b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3b04      	subs	r3, #4
 800b1c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3b04      	subs	r3, #4
 800b1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	f023 0201 	bic.w	r2, r3, #1
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3b04      	subs	r3, #4
 800b1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1e8:	4a0c      	ldr	r2, [pc, #48]	; (800b21c <pxPortInitialiseStack+0x64>)
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3b14      	subs	r3, #20
 800b1f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3b04      	subs	r3, #4
 800b1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f06f 0202 	mvn.w	r2, #2
 800b206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3b20      	subs	r3, #32
 800b20c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b20e:	68fb      	ldr	r3, [r7, #12]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	0800b221 	.word	0x0800b221

0800b220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b22a:	4b12      	ldr	r3, [pc, #72]	; (800b274 <prvTaskExitError+0x54>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b232:	d00a      	beq.n	800b24a <prvTaskExitError+0x2a>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	60fb      	str	r3, [r7, #12]
}
 800b246:	bf00      	nop
 800b248:	e7fe      	b.n	800b248 <prvTaskExitError+0x28>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	60bb      	str	r3, [r7, #8]
}
 800b25c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b25e:	bf00      	nop
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0fc      	beq.n	800b260 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr
 800b274:	20000594 	.word	0x20000594
	...

0800b280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b280:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <pxCurrentTCBConst2>)
 800b282:	6819      	ldr	r1, [r3, #0]
 800b284:	6808      	ldr	r0, [r1, #0]
 800b286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28a:	f380 8809 	msr	PSP, r0
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f04f 0000 	mov.w	r0, #0
 800b296:	f380 8811 	msr	BASEPRI, r0
 800b29a:	4770      	bx	lr
 800b29c:	f3af 8000 	nop.w

0800b2a0 <pxCurrentTCBConst2>:
 800b2a0:	2000178c 	.word	0x2000178c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop

0800b2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b2a8:	4808      	ldr	r0, [pc, #32]	; (800b2cc <prvPortStartFirstTask+0x24>)
 800b2aa:	6800      	ldr	r0, [r0, #0]
 800b2ac:	6800      	ldr	r0, [r0, #0]
 800b2ae:	f380 8808 	msr	MSP, r0
 800b2b2:	f04f 0000 	mov.w	r0, #0
 800b2b6:	f380 8814 	msr	CONTROL, r0
 800b2ba:	b662      	cpsie	i
 800b2bc:	b661      	cpsie	f
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	df00      	svc	0
 800b2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2ca:	bf00      	nop
 800b2cc:	e000ed08 	.word	0xe000ed08

0800b2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2d6:	4b46      	ldr	r3, [pc, #280]	; (800b3f0 <xPortStartScheduler+0x120>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a46      	ldr	r2, [pc, #280]	; (800b3f4 <xPortStartScheduler+0x124>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d10a      	bne.n	800b2f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	613b      	str	r3, [r7, #16]
}
 800b2f2:	bf00      	nop
 800b2f4:	e7fe      	b.n	800b2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2f6:	4b3e      	ldr	r3, [pc, #248]	; (800b3f0 <xPortStartScheduler+0x120>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a3f      	ldr	r2, [pc, #252]	; (800b3f8 <xPortStartScheduler+0x128>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d10a      	bne.n	800b316 <xPortStartScheduler+0x46>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	60fb      	str	r3, [r7, #12]
}
 800b312:	bf00      	nop
 800b314:	e7fe      	b.n	800b314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b316:	4b39      	ldr	r3, [pc, #228]	; (800b3fc <xPortStartScheduler+0x12c>)
 800b318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	22ff      	movs	r2, #255	; 0xff
 800b326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b330:	78fb      	ldrb	r3, [r7, #3]
 800b332:	b2db      	uxtb	r3, r3
 800b334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	4b31      	ldr	r3, [pc, #196]	; (800b400 <xPortStartScheduler+0x130>)
 800b33c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b33e:	4b31      	ldr	r3, [pc, #196]	; (800b404 <xPortStartScheduler+0x134>)
 800b340:	2207      	movs	r2, #7
 800b342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b344:	e009      	b.n	800b35a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b346:	4b2f      	ldr	r3, [pc, #188]	; (800b404 <xPortStartScheduler+0x134>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	4a2d      	ldr	r2, [pc, #180]	; (800b404 <xPortStartScheduler+0x134>)
 800b34e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	b2db      	uxtb	r3, r3
 800b358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b362:	2b80      	cmp	r3, #128	; 0x80
 800b364:	d0ef      	beq.n	800b346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b366:	4b27      	ldr	r3, [pc, #156]	; (800b404 <xPortStartScheduler+0x134>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f1c3 0307 	rsb	r3, r3, #7
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d00a      	beq.n	800b388 <xPortStartScheduler+0xb8>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	60bb      	str	r3, [r7, #8]
}
 800b384:	bf00      	nop
 800b386:	e7fe      	b.n	800b386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b388:	4b1e      	ldr	r3, [pc, #120]	; (800b404 <xPortStartScheduler+0x134>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	021b      	lsls	r3, r3, #8
 800b38e:	4a1d      	ldr	r2, [pc, #116]	; (800b404 <xPortStartScheduler+0x134>)
 800b390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b392:	4b1c      	ldr	r3, [pc, #112]	; (800b404 <xPortStartScheduler+0x134>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b39a:	4a1a      	ldr	r2, [pc, #104]	; (800b404 <xPortStartScheduler+0x134>)
 800b39c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3a6:	4b18      	ldr	r3, [pc, #96]	; (800b408 <xPortStartScheduler+0x138>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a17      	ldr	r2, [pc, #92]	; (800b408 <xPortStartScheduler+0x138>)
 800b3ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3b2:	4b15      	ldr	r3, [pc, #84]	; (800b408 <xPortStartScheduler+0x138>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a14      	ldr	r2, [pc, #80]	; (800b408 <xPortStartScheduler+0x138>)
 800b3b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3be:	f000 f8dd 	bl	800b57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <xPortStartScheduler+0x13c>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3c8:	f000 f8fc 	bl	800b5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3cc:	4b10      	ldr	r3, [pc, #64]	; (800b410 <xPortStartScheduler+0x140>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a0f      	ldr	r2, [pc, #60]	; (800b410 <xPortStartScheduler+0x140>)
 800b3d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3d8:	f7ff ff66 	bl	800b2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3dc:	f7ff f848 	bl	800a470 <vTaskSwitchContext>
	prvTaskExitError();
 800b3e0:	f7ff ff1e 	bl	800b220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3718      	adds	r7, #24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	e000ed00 	.word	0xe000ed00
 800b3f4:	410fc271 	.word	0x410fc271
 800b3f8:	410fc270 	.word	0x410fc270
 800b3fc:	e000e400 	.word	0xe000e400
 800b400:	20001db8 	.word	0x20001db8
 800b404:	20001dbc 	.word	0x20001dbc
 800b408:	e000ed20 	.word	0xe000ed20
 800b40c:	20000594 	.word	0x20000594
 800b410:	e000ef34 	.word	0xe000ef34

0800b414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	607b      	str	r3, [r7, #4]
}
 800b42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b42e:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <vPortEnterCritical+0x58>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3301      	adds	r3, #1
 800b434:	4a0d      	ldr	r2, [pc, #52]	; (800b46c <vPortEnterCritical+0x58>)
 800b436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b438:	4b0c      	ldr	r3, [pc, #48]	; (800b46c <vPortEnterCritical+0x58>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d10f      	bne.n	800b460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b440:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <vPortEnterCritical+0x5c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <vPortEnterCritical+0x4c>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	603b      	str	r3, [r7, #0]
}
 800b45c:	bf00      	nop
 800b45e:	e7fe      	b.n	800b45e <vPortEnterCritical+0x4a>
	}
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	20000594 	.word	0x20000594
 800b470:	e000ed04 	.word	0xe000ed04

0800b474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b47a:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <vPortExitCritical+0x50>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10a      	bne.n	800b498 <vPortExitCritical+0x24>
	__asm volatile
 800b482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b486:	f383 8811 	msr	BASEPRI, r3
 800b48a:	f3bf 8f6f 	isb	sy
 800b48e:	f3bf 8f4f 	dsb	sy
 800b492:	607b      	str	r3, [r7, #4]
}
 800b494:	bf00      	nop
 800b496:	e7fe      	b.n	800b496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b498:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <vPortExitCritical+0x50>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	4a09      	ldr	r2, [pc, #36]	; (800b4c4 <vPortExitCritical+0x50>)
 800b4a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4a2:	4b08      	ldr	r3, [pc, #32]	; (800b4c4 <vPortExitCritical+0x50>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d105      	bne.n	800b4b6 <vPortExitCritical+0x42>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	f383 8811 	msr	BASEPRI, r3
}
 800b4b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4b6:	bf00      	nop
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	20000594 	.word	0x20000594
	...

0800b4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4d0:	f3ef 8009 	mrs	r0, PSP
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	4b15      	ldr	r3, [pc, #84]	; (800b530 <pxCurrentTCBConst>)
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	f01e 0f10 	tst.w	lr, #16
 800b4e0:	bf08      	it	eq
 800b4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ea:	6010      	str	r0, [r2, #0]
 800b4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4f4:	f380 8811 	msr	BASEPRI, r0
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f7fe ffb6 	bl	800a470 <vTaskSwitchContext>
 800b504:	f04f 0000 	mov.w	r0, #0
 800b508:	f380 8811 	msr	BASEPRI, r0
 800b50c:	bc09      	pop	{r0, r3}
 800b50e:	6819      	ldr	r1, [r3, #0]
 800b510:	6808      	ldr	r0, [r1, #0]
 800b512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b516:	f01e 0f10 	tst.w	lr, #16
 800b51a:	bf08      	it	eq
 800b51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b520:	f380 8809 	msr	PSP, r0
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	f3af 8000 	nop.w

0800b530 <pxCurrentTCBConst>:
 800b530:	2000178c 	.word	0x2000178c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop

0800b538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	607b      	str	r3, [r7, #4]
}
 800b550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b552:	f7fe fed3 	bl	800a2fc <xTaskIncrementTick>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b55c:	4b06      	ldr	r3, [pc, #24]	; (800b578 <xPortSysTickHandler+0x40>)
 800b55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	2300      	movs	r3, #0
 800b566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	f383 8811 	msr	BASEPRI, r3
}
 800b56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b580:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <vPortSetupTimerInterrupt+0x34>)
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b586:	4b0b      	ldr	r3, [pc, #44]	; (800b5b4 <vPortSetupTimerInterrupt+0x38>)
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <vPortSetupTimerInterrupt+0x3c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a0a      	ldr	r2, [pc, #40]	; (800b5bc <vPortSetupTimerInterrupt+0x40>)
 800b592:	fba2 2303 	umull	r2, r3, r2, r3
 800b596:	099b      	lsrs	r3, r3, #6
 800b598:	4a09      	ldr	r2, [pc, #36]	; (800b5c0 <vPortSetupTimerInterrupt+0x44>)
 800b59a:	3b01      	subs	r3, #1
 800b59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b59e:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <vPortSetupTimerInterrupt+0x34>)
 800b5a0:	2207      	movs	r2, #7
 800b5a2:	601a      	str	r2, [r3, #0]
}
 800b5a4:	bf00      	nop
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	e000e010 	.word	0xe000e010
 800b5b4:	e000e018 	.word	0xe000e018
 800b5b8:	20000588 	.word	0x20000588
 800b5bc:	10624dd3 	.word	0x10624dd3
 800b5c0:	e000e014 	.word	0xe000e014

0800b5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5d4 <vPortEnableVFP+0x10>
 800b5c8:	6801      	ldr	r1, [r0, #0]
 800b5ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5ce:	6001      	str	r1, [r0, #0]
 800b5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5d2:	bf00      	nop
 800b5d4:	e000ed88 	.word	0xe000ed88

0800b5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5de:	f3ef 8305 	mrs	r3, IPSR
 800b5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b0f      	cmp	r3, #15
 800b5e8:	d914      	bls.n	800b614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5ea:	4a17      	ldr	r2, [pc, #92]	; (800b648 <vPortValidateInterruptPriority+0x70>)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5f4:	4b15      	ldr	r3, [pc, #84]	; (800b64c <vPortValidateInterruptPriority+0x74>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	7afa      	ldrb	r2, [r7, #11]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d20a      	bcs.n	800b614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	607b      	str	r3, [r7, #4]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b614:	4b0e      	ldr	r3, [pc, #56]	; (800b650 <vPortValidateInterruptPriority+0x78>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b61c:	4b0d      	ldr	r3, [pc, #52]	; (800b654 <vPortValidateInterruptPriority+0x7c>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	429a      	cmp	r2, r3
 800b622:	d90a      	bls.n	800b63a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	603b      	str	r3, [r7, #0]
}
 800b636:	bf00      	nop
 800b638:	e7fe      	b.n	800b638 <vPortValidateInterruptPriority+0x60>
	}
 800b63a:	bf00      	nop
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	e000e3f0 	.word	0xe000e3f0
 800b64c:	20001db8 	.word	0x20001db8
 800b650:	e000ed0c 	.word	0xe000ed0c
 800b654:	20001dbc 	.word	0x20001dbc

0800b658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b660:	2300      	movs	r3, #0
 800b662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b664:	f7fe fd8e 	bl	800a184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b668:	4b5b      	ldr	r3, [pc, #364]	; (800b7d8 <pvPortMalloc+0x180>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d101      	bne.n	800b674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b670:	f000 f920 	bl	800b8b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b674:	4b59      	ldr	r3, [pc, #356]	; (800b7dc <pvPortMalloc+0x184>)
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4013      	ands	r3, r2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f040 8093 	bne.w	800b7a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d01d      	beq.n	800b6c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b688:	2208      	movs	r2, #8
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f003 0307 	and.w	r3, r3, #7
 800b696:	2b00      	cmp	r3, #0
 800b698:	d014      	beq.n	800b6c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f023 0307 	bic.w	r3, r3, #7
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00a      	beq.n	800b6c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	617b      	str	r3, [r7, #20]
}
 800b6c0:	bf00      	nop
 800b6c2:	e7fe      	b.n	800b6c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d06e      	beq.n	800b7a8 <pvPortMalloc+0x150>
 800b6ca:	4b45      	ldr	r3, [pc, #276]	; (800b7e0 <pvPortMalloc+0x188>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d869      	bhi.n	800b7a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6d4:	4b43      	ldr	r3, [pc, #268]	; (800b7e4 <pvPortMalloc+0x18c>)
 800b6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6d8:	4b42      	ldr	r3, [pc, #264]	; (800b7e4 <pvPortMalloc+0x18c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6de:	e004      	b.n	800b6ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d903      	bls.n	800b6fc <pvPortMalloc+0xa4>
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1f1      	bne.n	800b6e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6fc:	4b36      	ldr	r3, [pc, #216]	; (800b7d8 <pvPortMalloc+0x180>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b702:	429a      	cmp	r2, r3
 800b704:	d050      	beq.n	800b7a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2208      	movs	r2, #8
 800b70c:	4413      	add	r3, r2
 800b70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	1ad2      	subs	r2, r2, r3
 800b720:	2308      	movs	r3, #8
 800b722:	005b      	lsls	r3, r3, #1
 800b724:	429a      	cmp	r2, r3
 800b726:	d91f      	bls.n	800b768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00a      	beq.n	800b750 <pvPortMalloc+0xf8>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	613b      	str	r3, [r7, #16]
}
 800b74c:	bf00      	nop
 800b74e:	e7fe      	b.n	800b74e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	1ad2      	subs	r2, r2, r3
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b762:	69b8      	ldr	r0, [r7, #24]
 800b764:	f000 f908 	bl	800b978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b768:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <pvPortMalloc+0x188>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	4a1b      	ldr	r2, [pc, #108]	; (800b7e0 <pvPortMalloc+0x188>)
 800b774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b776:	4b1a      	ldr	r3, [pc, #104]	; (800b7e0 <pvPortMalloc+0x188>)
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	4b1b      	ldr	r3, [pc, #108]	; (800b7e8 <pvPortMalloc+0x190>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d203      	bcs.n	800b78a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b782:	4b17      	ldr	r3, [pc, #92]	; (800b7e0 <pvPortMalloc+0x188>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a18      	ldr	r2, [pc, #96]	; (800b7e8 <pvPortMalloc+0x190>)
 800b788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	4b13      	ldr	r3, [pc, #76]	; (800b7dc <pvPortMalloc+0x184>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	431a      	orrs	r2, r3
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b79e:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <pvPortMalloc+0x194>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	4a11      	ldr	r2, [pc, #68]	; (800b7ec <pvPortMalloc+0x194>)
 800b7a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7a8:	f7fe fcfa 	bl	800a1a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00a      	beq.n	800b7cc <pvPortMalloc+0x174>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	60fb      	str	r3, [r7, #12]
}
 800b7c8:	bf00      	nop
 800b7ca:	e7fe      	b.n	800b7ca <pvPortMalloc+0x172>
	return pvReturn;
 800b7cc:	69fb      	ldr	r3, [r7, #28]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3728      	adds	r7, #40	; 0x28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	200119e0 	.word	0x200119e0
 800b7dc:	200119f4 	.word	0x200119f4
 800b7e0:	200119e4 	.word	0x200119e4
 800b7e4:	200119d8 	.word	0x200119d8
 800b7e8:	200119e8 	.word	0x200119e8
 800b7ec:	200119ec 	.word	0x200119ec

0800b7f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d04d      	beq.n	800b89e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b802:	2308      	movs	r3, #8
 800b804:	425b      	negs	r3, r3
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4413      	add	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	4b24      	ldr	r3, [pc, #144]	; (800b8a8 <vPortFree+0xb8>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4013      	ands	r3, r2
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10a      	bne.n	800b834 <vPortFree+0x44>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	60fb      	str	r3, [r7, #12]
}
 800b830:	bf00      	nop
 800b832:	e7fe      	b.n	800b832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00a      	beq.n	800b852 <vPortFree+0x62>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	60bb      	str	r3, [r7, #8]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	685a      	ldr	r2, [r3, #4]
 800b856:	4b14      	ldr	r3, [pc, #80]	; (800b8a8 <vPortFree+0xb8>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4013      	ands	r3, r2
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d01e      	beq.n	800b89e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d11a      	bne.n	800b89e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	4b0e      	ldr	r3, [pc, #56]	; (800b8a8 <vPortFree+0xb8>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	43db      	mvns	r3, r3
 800b872:	401a      	ands	r2, r3
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b878:	f7fe fc84 	bl	800a184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <vPortFree+0xbc>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4413      	add	r3, r2
 800b886:	4a09      	ldr	r2, [pc, #36]	; (800b8ac <vPortFree+0xbc>)
 800b888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f000 f874 	bl	800b978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b890:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <vPortFree+0xc0>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	4a06      	ldr	r2, [pc, #24]	; (800b8b0 <vPortFree+0xc0>)
 800b898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b89a:	f7fe fc81 	bl	800a1a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b89e:	bf00      	nop
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200119f4 	.word	0x200119f4
 800b8ac:	200119e4 	.word	0x200119e4
 800b8b0:	200119f0 	.word	0x200119f0

0800b8b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8ba:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800b8be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8c0:	4b27      	ldr	r3, [pc, #156]	; (800b960 <prvHeapInit+0xac>)
 800b8c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f003 0307 	and.w	r3, r3, #7
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00c      	beq.n	800b8e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3307      	adds	r3, #7
 800b8d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f023 0307 	bic.w	r3, r3, #7
 800b8da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	4a1f      	ldr	r2, [pc, #124]	; (800b960 <prvHeapInit+0xac>)
 800b8e4:	4413      	add	r3, r2
 800b8e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8ec:	4a1d      	ldr	r2, [pc, #116]	; (800b964 <prvHeapInit+0xb0>)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8f2:	4b1c      	ldr	r3, [pc, #112]	; (800b964 <prvHeapInit+0xb0>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b900:	2208      	movs	r2, #8
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f023 0307 	bic.w	r3, r3, #7
 800b90e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4a15      	ldr	r2, [pc, #84]	; (800b968 <prvHeapInit+0xb4>)
 800b914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b916:	4b14      	ldr	r3, [pc, #80]	; (800b968 <prvHeapInit+0xb4>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2200      	movs	r2, #0
 800b91c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b91e:	4b12      	ldr	r3, [pc, #72]	; (800b968 <prvHeapInit+0xb4>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b934:	4b0c      	ldr	r3, [pc, #48]	; (800b968 <prvHeapInit+0xb4>)
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	4a0a      	ldr	r2, [pc, #40]	; (800b96c <prvHeapInit+0xb8>)
 800b942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	4a09      	ldr	r2, [pc, #36]	; (800b970 <prvHeapInit+0xbc>)
 800b94a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b94c:	4b09      	ldr	r3, [pc, #36]	; (800b974 <prvHeapInit+0xc0>)
 800b94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b952:	601a      	str	r2, [r3, #0]
}
 800b954:	bf00      	nop
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	20001dc0 	.word	0x20001dc0
 800b964:	200119d8 	.word	0x200119d8
 800b968:	200119e0 	.word	0x200119e0
 800b96c:	200119e8 	.word	0x200119e8
 800b970:	200119e4 	.word	0x200119e4
 800b974:	200119f4 	.word	0x200119f4

0800b978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b980:	4b28      	ldr	r3, [pc, #160]	; (800ba24 <prvInsertBlockIntoFreeList+0xac>)
 800b982:	60fb      	str	r3, [r7, #12]
 800b984:	e002      	b.n	800b98c <prvInsertBlockIntoFreeList+0x14>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	429a      	cmp	r2, r3
 800b994:	d8f7      	bhi.n	800b986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d108      	bne.n	800b9ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	441a      	add	r2, r3
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	441a      	add	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d118      	bne.n	800ba00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	4b15      	ldr	r3, [pc, #84]	; (800ba28 <prvInsertBlockIntoFreeList+0xb0>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d00d      	beq.n	800b9f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	441a      	add	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	e008      	b.n	800ba08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ba28 <prvInsertBlockIntoFreeList+0xb0>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	601a      	str	r2, [r3, #0]
 800b9fe:	e003      	b.n	800ba08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d002      	beq.n	800ba16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba16:	bf00      	nop
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	200119d8 	.word	0x200119d8
 800ba28:	200119e0 	.word	0x200119e0

0800ba2c <pow>:
 800ba2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2e:	ed2d 8b02 	vpush	{d8}
 800ba32:	eeb0 8a40 	vmov.f32	s16, s0
 800ba36:	eef0 8a60 	vmov.f32	s17, s1
 800ba3a:	ec55 4b11 	vmov	r4, r5, d1
 800ba3e:	f000 f8bb 	bl	800bbb8 <__ieee754_pow>
 800ba42:	4622      	mov	r2, r4
 800ba44:	462b      	mov	r3, r5
 800ba46:	4620      	mov	r0, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	ec57 6b10 	vmov	r6, r7, d0
 800ba4e:	f7f5 f86d 	bl	8000b2c <__aeabi_dcmpun>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d13b      	bne.n	800bace <pow+0xa2>
 800ba56:	ec51 0b18 	vmov	r0, r1, d8
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	f7f5 f833 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba62:	b1b8      	cbz	r0, 800ba94 <pow+0x68>
 800ba64:	2200      	movs	r2, #0
 800ba66:	2300      	movs	r3, #0
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	f7f5 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d146      	bne.n	800bb02 <pow+0xd6>
 800ba74:	ec45 4b10 	vmov	d0, r4, r5
 800ba78:	f000 f848 	bl	800bb0c <finite>
 800ba7c:	b338      	cbz	r0, 800bace <pow+0xa2>
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2300      	movs	r3, #0
 800ba82:	4620      	mov	r0, r4
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7f5 f829 	bl	8000adc <__aeabi_dcmplt>
 800ba8a:	b300      	cbz	r0, 800bace <pow+0xa2>
 800ba8c:	f001 fe3c 	bl	800d708 <__errno>
 800ba90:	2322      	movs	r3, #34	; 0x22
 800ba92:	e01b      	b.n	800bacc <pow+0xa0>
 800ba94:	ec47 6b10 	vmov	d0, r6, r7
 800ba98:	f000 f838 	bl	800bb0c <finite>
 800ba9c:	b9e0      	cbnz	r0, 800bad8 <pow+0xac>
 800ba9e:	eeb0 0a48 	vmov.f32	s0, s16
 800baa2:	eef0 0a68 	vmov.f32	s1, s17
 800baa6:	f000 f831 	bl	800bb0c <finite>
 800baaa:	b1a8      	cbz	r0, 800bad8 <pow+0xac>
 800baac:	ec45 4b10 	vmov	d0, r4, r5
 800bab0:	f000 f82c 	bl	800bb0c <finite>
 800bab4:	b180      	cbz	r0, 800bad8 <pow+0xac>
 800bab6:	4632      	mov	r2, r6
 800bab8:	463b      	mov	r3, r7
 800baba:	4630      	mov	r0, r6
 800babc:	4639      	mov	r1, r7
 800babe:	f7f5 f835 	bl	8000b2c <__aeabi_dcmpun>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d0e2      	beq.n	800ba8c <pow+0x60>
 800bac6:	f001 fe1f 	bl	800d708 <__errno>
 800baca:	2321      	movs	r3, #33	; 0x21
 800bacc:	6003      	str	r3, [r0, #0]
 800bace:	ecbd 8b02 	vpop	{d8}
 800bad2:	ec47 6b10 	vmov	d0, r6, r7
 800bad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	4630      	mov	r0, r6
 800bade:	4639      	mov	r1, r7
 800bae0:	f7f4 fff2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d0f2      	beq.n	800bace <pow+0xa2>
 800bae8:	eeb0 0a48 	vmov.f32	s0, s16
 800baec:	eef0 0a68 	vmov.f32	s1, s17
 800baf0:	f000 f80c 	bl	800bb0c <finite>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d0ea      	beq.n	800bace <pow+0xa2>
 800baf8:	ec45 4b10 	vmov	d0, r4, r5
 800bafc:	f000 f806 	bl	800bb0c <finite>
 800bb00:	e7c3      	b.n	800ba8a <pow+0x5e>
 800bb02:	4f01      	ldr	r7, [pc, #4]	; (800bb08 <pow+0xdc>)
 800bb04:	2600      	movs	r6, #0
 800bb06:	e7e2      	b.n	800bace <pow+0xa2>
 800bb08:	3ff00000 	.word	0x3ff00000

0800bb0c <finite>:
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	ed8d 0b00 	vstr	d0, [sp]
 800bb12:	9801      	ldr	r0, [sp, #4]
 800bb14:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bb18:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bb1c:	0fc0      	lsrs	r0, r0, #31
 800bb1e:	b002      	add	sp, #8
 800bb20:	4770      	bx	lr
	...

0800bb24 <round>:
 800bb24:	ec53 2b10 	vmov	r2, r3, d0
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bb2e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800bb32:	2813      	cmp	r0, #19
 800bb34:	ee10 5a10 	vmov	r5, s0
 800bb38:	4619      	mov	r1, r3
 800bb3a:	dc18      	bgt.n	800bb6e <round+0x4a>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	da09      	bge.n	800bb54 <round+0x30>
 800bb40:	3001      	adds	r0, #1
 800bb42:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800bb46:	d103      	bne.n	800bb50 <round+0x2c>
 800bb48:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bb4c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bb50:	2300      	movs	r3, #0
 800bb52:	e02a      	b.n	800bbaa <round+0x86>
 800bb54:	4c16      	ldr	r4, [pc, #88]	; (800bbb0 <round+0x8c>)
 800bb56:	4104      	asrs	r4, r0
 800bb58:	ea03 0604 	and.w	r6, r3, r4
 800bb5c:	4316      	orrs	r6, r2
 800bb5e:	d011      	beq.n	800bb84 <round+0x60>
 800bb60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb64:	4103      	asrs	r3, r0
 800bb66:	440b      	add	r3, r1
 800bb68:	ea23 0104 	bic.w	r1, r3, r4
 800bb6c:	e7f0      	b.n	800bb50 <round+0x2c>
 800bb6e:	2833      	cmp	r0, #51	; 0x33
 800bb70:	dd0b      	ble.n	800bb8a <round+0x66>
 800bb72:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bb76:	d105      	bne.n	800bb84 <round+0x60>
 800bb78:	ee10 0a10 	vmov	r0, s0
 800bb7c:	f7f4 fb86 	bl	800028c <__adddf3>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	ec43 2b10 	vmov	d0, r2, r3
 800bb88:	bd70      	pop	{r4, r5, r6, pc}
 800bb8a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800bb8e:	f04f 34ff 	mov.w	r4, #4294967295
 800bb92:	40f4      	lsrs	r4, r6
 800bb94:	4214      	tst	r4, r2
 800bb96:	d0f5      	beq.n	800bb84 <round+0x60>
 800bb98:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	4083      	lsls	r3, r0
 800bba0:	195b      	adds	r3, r3, r5
 800bba2:	bf28      	it	cs
 800bba4:	3101      	addcs	r1, #1
 800bba6:	ea23 0304 	bic.w	r3, r3, r4
 800bbaa:	461a      	mov	r2, r3
 800bbac:	460b      	mov	r3, r1
 800bbae:	e7e9      	b.n	800bb84 <round+0x60>
 800bbb0:	000fffff 	.word	0x000fffff
 800bbb4:	00000000 	.word	0x00000000

0800bbb8 <__ieee754_pow>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	ed2d 8b06 	vpush	{d8-d10}
 800bbc0:	b089      	sub	sp, #36	; 0x24
 800bbc2:	ed8d 1b00 	vstr	d1, [sp]
 800bbc6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bbca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bbce:	ea58 0102 	orrs.w	r1, r8, r2
 800bbd2:	ec57 6b10 	vmov	r6, r7, d0
 800bbd6:	d115      	bne.n	800bc04 <__ieee754_pow+0x4c>
 800bbd8:	19b3      	adds	r3, r6, r6
 800bbda:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bbde:	4152      	adcs	r2, r2
 800bbe0:	4299      	cmp	r1, r3
 800bbe2:	4b89      	ldr	r3, [pc, #548]	; (800be08 <__ieee754_pow+0x250>)
 800bbe4:	4193      	sbcs	r3, r2
 800bbe6:	f080 84d1 	bcs.w	800c58c <__ieee754_pow+0x9d4>
 800bbea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbee:	4630      	mov	r0, r6
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	f7f4 fb4b 	bl	800028c <__adddf3>
 800bbf6:	ec41 0b10 	vmov	d0, r0, r1
 800bbfa:	b009      	add	sp, #36	; 0x24
 800bbfc:	ecbd 8b06 	vpop	{d8-d10}
 800bc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc04:	4b81      	ldr	r3, [pc, #516]	; (800be0c <__ieee754_pow+0x254>)
 800bc06:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	ee10 aa10 	vmov	sl, s0
 800bc10:	463d      	mov	r5, r7
 800bc12:	dc06      	bgt.n	800bc22 <__ieee754_pow+0x6a>
 800bc14:	d101      	bne.n	800bc1a <__ieee754_pow+0x62>
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	d1e7      	bne.n	800bbea <__ieee754_pow+0x32>
 800bc1a:	4598      	cmp	r8, r3
 800bc1c:	dc01      	bgt.n	800bc22 <__ieee754_pow+0x6a>
 800bc1e:	d10f      	bne.n	800bc40 <__ieee754_pow+0x88>
 800bc20:	b172      	cbz	r2, 800bc40 <__ieee754_pow+0x88>
 800bc22:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bc26:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bc2a:	ea55 050a 	orrs.w	r5, r5, sl
 800bc2e:	d1dc      	bne.n	800bbea <__ieee754_pow+0x32>
 800bc30:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc34:	18db      	adds	r3, r3, r3
 800bc36:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bc3a:	4152      	adcs	r2, r2
 800bc3c:	429d      	cmp	r5, r3
 800bc3e:	e7d0      	b.n	800bbe2 <__ieee754_pow+0x2a>
 800bc40:	2d00      	cmp	r5, #0
 800bc42:	da3b      	bge.n	800bcbc <__ieee754_pow+0x104>
 800bc44:	4b72      	ldr	r3, [pc, #456]	; (800be10 <__ieee754_pow+0x258>)
 800bc46:	4598      	cmp	r8, r3
 800bc48:	dc51      	bgt.n	800bcee <__ieee754_pow+0x136>
 800bc4a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bc4e:	4598      	cmp	r8, r3
 800bc50:	f340 84ab 	ble.w	800c5aa <__ieee754_pow+0x9f2>
 800bc54:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bc58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc5c:	2b14      	cmp	r3, #20
 800bc5e:	dd0f      	ble.n	800bc80 <__ieee754_pow+0xc8>
 800bc60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bc64:	fa22 f103 	lsr.w	r1, r2, r3
 800bc68:	fa01 f303 	lsl.w	r3, r1, r3
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	f040 849c 	bne.w	800c5aa <__ieee754_pow+0x9f2>
 800bc72:	f001 0101 	and.w	r1, r1, #1
 800bc76:	f1c1 0302 	rsb	r3, r1, #2
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	b182      	cbz	r2, 800bca0 <__ieee754_pow+0xe8>
 800bc7e:	e05f      	b.n	800bd40 <__ieee754_pow+0x188>
 800bc80:	2a00      	cmp	r2, #0
 800bc82:	d15b      	bne.n	800bd3c <__ieee754_pow+0x184>
 800bc84:	f1c3 0314 	rsb	r3, r3, #20
 800bc88:	fa48 f103 	asr.w	r1, r8, r3
 800bc8c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc90:	4543      	cmp	r3, r8
 800bc92:	f040 8487 	bne.w	800c5a4 <__ieee754_pow+0x9ec>
 800bc96:	f001 0101 	and.w	r1, r1, #1
 800bc9a:	f1c1 0302 	rsb	r3, r1, #2
 800bc9e:	9304      	str	r3, [sp, #16]
 800bca0:	4b5c      	ldr	r3, [pc, #368]	; (800be14 <__ieee754_pow+0x25c>)
 800bca2:	4598      	cmp	r8, r3
 800bca4:	d132      	bne.n	800bd0c <__ieee754_pow+0x154>
 800bca6:	f1b9 0f00 	cmp.w	r9, #0
 800bcaa:	f280 8477 	bge.w	800c59c <__ieee754_pow+0x9e4>
 800bcae:	4959      	ldr	r1, [pc, #356]	; (800be14 <__ieee754_pow+0x25c>)
 800bcb0:	4632      	mov	r2, r6
 800bcb2:	463b      	mov	r3, r7
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f7f4 fdc9 	bl	800084c <__aeabi_ddiv>
 800bcba:	e79c      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	2a00      	cmp	r2, #0
 800bcc2:	d13d      	bne.n	800bd40 <__ieee754_pow+0x188>
 800bcc4:	4b51      	ldr	r3, [pc, #324]	; (800be0c <__ieee754_pow+0x254>)
 800bcc6:	4598      	cmp	r8, r3
 800bcc8:	d1ea      	bne.n	800bca0 <__ieee754_pow+0xe8>
 800bcca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bcce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bcd2:	ea53 030a 	orrs.w	r3, r3, sl
 800bcd6:	f000 8459 	beq.w	800c58c <__ieee754_pow+0x9d4>
 800bcda:	4b4f      	ldr	r3, [pc, #316]	; (800be18 <__ieee754_pow+0x260>)
 800bcdc:	429c      	cmp	r4, r3
 800bcde:	dd08      	ble.n	800bcf2 <__ieee754_pow+0x13a>
 800bce0:	f1b9 0f00 	cmp.w	r9, #0
 800bce4:	f2c0 8456 	blt.w	800c594 <__ieee754_pow+0x9dc>
 800bce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcec:	e783      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e7e5      	b.n	800bcbe <__ieee754_pow+0x106>
 800bcf2:	f1b9 0f00 	cmp.w	r9, #0
 800bcf6:	f04f 0000 	mov.w	r0, #0
 800bcfa:	f04f 0100 	mov.w	r1, #0
 800bcfe:	f6bf af7a 	bge.w	800bbf6 <__ieee754_pow+0x3e>
 800bd02:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bd06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bd0a:	e774      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bd0c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bd10:	d106      	bne.n	800bd20 <__ieee754_pow+0x168>
 800bd12:	4632      	mov	r2, r6
 800bd14:	463b      	mov	r3, r7
 800bd16:	4630      	mov	r0, r6
 800bd18:	4639      	mov	r1, r7
 800bd1a:	f7f4 fc6d 	bl	80005f8 <__aeabi_dmul>
 800bd1e:	e76a      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bd20:	4b3e      	ldr	r3, [pc, #248]	; (800be1c <__ieee754_pow+0x264>)
 800bd22:	4599      	cmp	r9, r3
 800bd24:	d10c      	bne.n	800bd40 <__ieee754_pow+0x188>
 800bd26:	2d00      	cmp	r5, #0
 800bd28:	db0a      	blt.n	800bd40 <__ieee754_pow+0x188>
 800bd2a:	ec47 6b10 	vmov	d0, r6, r7
 800bd2e:	b009      	add	sp, #36	; 0x24
 800bd30:	ecbd 8b06 	vpop	{d8-d10}
 800bd34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	f000 bd20 	b.w	800c77c <__ieee754_sqrt>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9304      	str	r3, [sp, #16]
 800bd40:	ec47 6b10 	vmov	d0, r6, r7
 800bd44:	f000 fc62 	bl	800c60c <fabs>
 800bd48:	ec51 0b10 	vmov	r0, r1, d0
 800bd4c:	f1ba 0f00 	cmp.w	sl, #0
 800bd50:	d129      	bne.n	800bda6 <__ieee754_pow+0x1ee>
 800bd52:	b124      	cbz	r4, 800bd5e <__ieee754_pow+0x1a6>
 800bd54:	4b2f      	ldr	r3, [pc, #188]	; (800be14 <__ieee754_pow+0x25c>)
 800bd56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d123      	bne.n	800bda6 <__ieee754_pow+0x1ee>
 800bd5e:	f1b9 0f00 	cmp.w	r9, #0
 800bd62:	da05      	bge.n	800bd70 <__ieee754_pow+0x1b8>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	2000      	movs	r0, #0
 800bd6a:	492a      	ldr	r1, [pc, #168]	; (800be14 <__ieee754_pow+0x25c>)
 800bd6c:	f7f4 fd6e 	bl	800084c <__aeabi_ddiv>
 800bd70:	2d00      	cmp	r5, #0
 800bd72:	f6bf af40 	bge.w	800bbf6 <__ieee754_pow+0x3e>
 800bd76:	9b04      	ldr	r3, [sp, #16]
 800bd78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bd7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bd80:	431c      	orrs	r4, r3
 800bd82:	d108      	bne.n	800bd96 <__ieee754_pow+0x1de>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	f7f4 fa7c 	bl	8000288 <__aeabi_dsub>
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	e78f      	b.n	800bcb6 <__ieee754_pow+0xfe>
 800bd96:	9b04      	ldr	r3, [sp, #16]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	f47f af2c 	bne.w	800bbf6 <__ieee754_pow+0x3e>
 800bd9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bda2:	4619      	mov	r1, r3
 800bda4:	e727      	b.n	800bbf6 <__ieee754_pow+0x3e>
 800bda6:	0feb      	lsrs	r3, r5, #31
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	9306      	str	r3, [sp, #24]
 800bdac:	9a06      	ldr	r2, [sp, #24]
 800bdae:	9b04      	ldr	r3, [sp, #16]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	d102      	bne.n	800bdba <__ieee754_pow+0x202>
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	463b      	mov	r3, r7
 800bdb8:	e7e6      	b.n	800bd88 <__ieee754_pow+0x1d0>
 800bdba:	4b19      	ldr	r3, [pc, #100]	; (800be20 <__ieee754_pow+0x268>)
 800bdbc:	4598      	cmp	r8, r3
 800bdbe:	f340 80fb 	ble.w	800bfb8 <__ieee754_pow+0x400>
 800bdc2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bdc6:	4598      	cmp	r8, r3
 800bdc8:	4b13      	ldr	r3, [pc, #76]	; (800be18 <__ieee754_pow+0x260>)
 800bdca:	dd0c      	ble.n	800bde6 <__ieee754_pow+0x22e>
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	dc0f      	bgt.n	800bdf0 <__ieee754_pow+0x238>
 800bdd0:	f1b9 0f00 	cmp.w	r9, #0
 800bdd4:	da0f      	bge.n	800bdf6 <__ieee754_pow+0x23e>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	b009      	add	sp, #36	; 0x24
 800bdda:	ecbd 8b06 	vpop	{d8-d10}
 800bdde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde2:	f000 bcc2 	b.w	800c76a <__math_oflow>
 800bde6:	429c      	cmp	r4, r3
 800bde8:	dbf2      	blt.n	800bdd0 <__ieee754_pow+0x218>
 800bdea:	4b0a      	ldr	r3, [pc, #40]	; (800be14 <__ieee754_pow+0x25c>)
 800bdec:	429c      	cmp	r4, r3
 800bdee:	dd19      	ble.n	800be24 <__ieee754_pow+0x26c>
 800bdf0:	f1b9 0f00 	cmp.w	r9, #0
 800bdf4:	dcef      	bgt.n	800bdd6 <__ieee754_pow+0x21e>
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	b009      	add	sp, #36	; 0x24
 800bdfa:	ecbd 8b06 	vpop	{d8-d10}
 800bdfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be02:	f000 bca9 	b.w	800c758 <__math_uflow>
 800be06:	bf00      	nop
 800be08:	fff00000 	.word	0xfff00000
 800be0c:	7ff00000 	.word	0x7ff00000
 800be10:	433fffff 	.word	0x433fffff
 800be14:	3ff00000 	.word	0x3ff00000
 800be18:	3fefffff 	.word	0x3fefffff
 800be1c:	3fe00000 	.word	0x3fe00000
 800be20:	41e00000 	.word	0x41e00000
 800be24:	4b60      	ldr	r3, [pc, #384]	; (800bfa8 <__ieee754_pow+0x3f0>)
 800be26:	2200      	movs	r2, #0
 800be28:	f7f4 fa2e 	bl	8000288 <__aeabi_dsub>
 800be2c:	a354      	add	r3, pc, #336	; (adr r3, 800bf80 <__ieee754_pow+0x3c8>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	4604      	mov	r4, r0
 800be34:	460d      	mov	r5, r1
 800be36:	f7f4 fbdf 	bl	80005f8 <__aeabi_dmul>
 800be3a:	a353      	add	r3, pc, #332	; (adr r3, 800bf88 <__ieee754_pow+0x3d0>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	4606      	mov	r6, r0
 800be42:	460f      	mov	r7, r1
 800be44:	4620      	mov	r0, r4
 800be46:	4629      	mov	r1, r5
 800be48:	f7f4 fbd6 	bl	80005f8 <__aeabi_dmul>
 800be4c:	4b57      	ldr	r3, [pc, #348]	; (800bfac <__ieee754_pow+0x3f4>)
 800be4e:	4682      	mov	sl, r0
 800be50:	468b      	mov	fp, r1
 800be52:	2200      	movs	r2, #0
 800be54:	4620      	mov	r0, r4
 800be56:	4629      	mov	r1, r5
 800be58:	f7f4 fbce 	bl	80005f8 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	a14b      	add	r1, pc, #300	; (adr r1, 800bf90 <__ieee754_pow+0x3d8>)
 800be62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be66:	f7f4 fa0f 	bl	8000288 <__aeabi_dsub>
 800be6a:	4622      	mov	r2, r4
 800be6c:	462b      	mov	r3, r5
 800be6e:	f7f4 fbc3 	bl	80005f8 <__aeabi_dmul>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	2000      	movs	r0, #0
 800be78:	494d      	ldr	r1, [pc, #308]	; (800bfb0 <__ieee754_pow+0x3f8>)
 800be7a:	f7f4 fa05 	bl	8000288 <__aeabi_dsub>
 800be7e:	4622      	mov	r2, r4
 800be80:	4680      	mov	r8, r0
 800be82:	4689      	mov	r9, r1
 800be84:	462b      	mov	r3, r5
 800be86:	4620      	mov	r0, r4
 800be88:	4629      	mov	r1, r5
 800be8a:	f7f4 fbb5 	bl	80005f8 <__aeabi_dmul>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4640      	mov	r0, r8
 800be94:	4649      	mov	r1, r9
 800be96:	f7f4 fbaf 	bl	80005f8 <__aeabi_dmul>
 800be9a:	a33f      	add	r3, pc, #252	; (adr r3, 800bf98 <__ieee754_pow+0x3e0>)
 800be9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea0:	f7f4 fbaa 	bl	80005f8 <__aeabi_dmul>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4650      	mov	r0, sl
 800beaa:	4659      	mov	r1, fp
 800beac:	f7f4 f9ec 	bl	8000288 <__aeabi_dsub>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	4680      	mov	r8, r0
 800beb6:	4689      	mov	r9, r1
 800beb8:	4630      	mov	r0, r6
 800beba:	4639      	mov	r1, r7
 800bebc:	f7f4 f9e6 	bl	800028c <__adddf3>
 800bec0:	2000      	movs	r0, #0
 800bec2:	4632      	mov	r2, r6
 800bec4:	463b      	mov	r3, r7
 800bec6:	4604      	mov	r4, r0
 800bec8:	460d      	mov	r5, r1
 800beca:	f7f4 f9dd 	bl	8000288 <__aeabi_dsub>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4640      	mov	r0, r8
 800bed4:	4649      	mov	r1, r9
 800bed6:	f7f4 f9d7 	bl	8000288 <__aeabi_dsub>
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	9a06      	ldr	r2, [sp, #24]
 800bede:	3b01      	subs	r3, #1
 800bee0:	4313      	orrs	r3, r2
 800bee2:	4682      	mov	sl, r0
 800bee4:	468b      	mov	fp, r1
 800bee6:	f040 81e7 	bne.w	800c2b8 <__ieee754_pow+0x700>
 800beea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bfa0 <__ieee754_pow+0x3e8>
 800beee:	eeb0 8a47 	vmov.f32	s16, s14
 800bef2:	eef0 8a67 	vmov.f32	s17, s15
 800bef6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800befa:	2600      	movs	r6, #0
 800befc:	4632      	mov	r2, r6
 800befe:	463b      	mov	r3, r7
 800bf00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf04:	f7f4 f9c0 	bl	8000288 <__aeabi_dsub>
 800bf08:	4622      	mov	r2, r4
 800bf0a:	462b      	mov	r3, r5
 800bf0c:	f7f4 fb74 	bl	80005f8 <__aeabi_dmul>
 800bf10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf14:	4680      	mov	r8, r0
 800bf16:	4689      	mov	r9, r1
 800bf18:	4650      	mov	r0, sl
 800bf1a:	4659      	mov	r1, fp
 800bf1c:	f7f4 fb6c 	bl	80005f8 <__aeabi_dmul>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4640      	mov	r0, r8
 800bf26:	4649      	mov	r1, r9
 800bf28:	f7f4 f9b0 	bl	800028c <__adddf3>
 800bf2c:	4632      	mov	r2, r6
 800bf2e:	463b      	mov	r3, r7
 800bf30:	4680      	mov	r8, r0
 800bf32:	4689      	mov	r9, r1
 800bf34:	4620      	mov	r0, r4
 800bf36:	4629      	mov	r1, r5
 800bf38:	f7f4 fb5e 	bl	80005f8 <__aeabi_dmul>
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4604      	mov	r4, r0
 800bf40:	460d      	mov	r5, r1
 800bf42:	4602      	mov	r2, r0
 800bf44:	4649      	mov	r1, r9
 800bf46:	4640      	mov	r0, r8
 800bf48:	f7f4 f9a0 	bl	800028c <__adddf3>
 800bf4c:	4b19      	ldr	r3, [pc, #100]	; (800bfb4 <__ieee754_pow+0x3fc>)
 800bf4e:	4299      	cmp	r1, r3
 800bf50:	ec45 4b19 	vmov	d9, r4, r5
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	468b      	mov	fp, r1
 800bf5a:	f340 82f0 	ble.w	800c53e <__ieee754_pow+0x986>
 800bf5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bf62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bf66:	4303      	orrs	r3, r0
 800bf68:	f000 81e4 	beq.w	800c334 <__ieee754_pow+0x77c>
 800bf6c:	ec51 0b18 	vmov	r0, r1, d8
 800bf70:	2200      	movs	r2, #0
 800bf72:	2300      	movs	r3, #0
 800bf74:	f7f4 fdb2 	bl	8000adc <__aeabi_dcmplt>
 800bf78:	3800      	subs	r0, #0
 800bf7a:	bf18      	it	ne
 800bf7c:	2001      	movne	r0, #1
 800bf7e:	e72b      	b.n	800bdd8 <__ieee754_pow+0x220>
 800bf80:	60000000 	.word	0x60000000
 800bf84:	3ff71547 	.word	0x3ff71547
 800bf88:	f85ddf44 	.word	0xf85ddf44
 800bf8c:	3e54ae0b 	.word	0x3e54ae0b
 800bf90:	55555555 	.word	0x55555555
 800bf94:	3fd55555 	.word	0x3fd55555
 800bf98:	652b82fe 	.word	0x652b82fe
 800bf9c:	3ff71547 	.word	0x3ff71547
 800bfa0:	00000000 	.word	0x00000000
 800bfa4:	bff00000 	.word	0xbff00000
 800bfa8:	3ff00000 	.word	0x3ff00000
 800bfac:	3fd00000 	.word	0x3fd00000
 800bfb0:	3fe00000 	.word	0x3fe00000
 800bfb4:	408fffff 	.word	0x408fffff
 800bfb8:	4bd5      	ldr	r3, [pc, #852]	; (800c310 <__ieee754_pow+0x758>)
 800bfba:	402b      	ands	r3, r5
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	b92b      	cbnz	r3, 800bfcc <__ieee754_pow+0x414>
 800bfc0:	4bd4      	ldr	r3, [pc, #848]	; (800c314 <__ieee754_pow+0x75c>)
 800bfc2:	f7f4 fb19 	bl	80005f8 <__aeabi_dmul>
 800bfc6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bfca:	460c      	mov	r4, r1
 800bfcc:	1523      	asrs	r3, r4, #20
 800bfce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bfd2:	4413      	add	r3, r2
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	4bd0      	ldr	r3, [pc, #832]	; (800c318 <__ieee754_pow+0x760>)
 800bfd8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bfdc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bfe0:	429c      	cmp	r4, r3
 800bfe2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bfe6:	dd08      	ble.n	800bffa <__ieee754_pow+0x442>
 800bfe8:	4bcc      	ldr	r3, [pc, #816]	; (800c31c <__ieee754_pow+0x764>)
 800bfea:	429c      	cmp	r4, r3
 800bfec:	f340 8162 	ble.w	800c2b4 <__ieee754_pow+0x6fc>
 800bff0:	9b05      	ldr	r3, [sp, #20]
 800bff2:	3301      	adds	r3, #1
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bffa:	2400      	movs	r4, #0
 800bffc:	00e3      	lsls	r3, r4, #3
 800bffe:	9307      	str	r3, [sp, #28]
 800c000:	4bc7      	ldr	r3, [pc, #796]	; (800c320 <__ieee754_pow+0x768>)
 800c002:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c006:	ed93 7b00 	vldr	d7, [r3]
 800c00a:	4629      	mov	r1, r5
 800c00c:	ec53 2b17 	vmov	r2, r3, d7
 800c010:	eeb0 9a47 	vmov.f32	s18, s14
 800c014:	eef0 9a67 	vmov.f32	s19, s15
 800c018:	4682      	mov	sl, r0
 800c01a:	f7f4 f935 	bl	8000288 <__aeabi_dsub>
 800c01e:	4652      	mov	r2, sl
 800c020:	4606      	mov	r6, r0
 800c022:	460f      	mov	r7, r1
 800c024:	462b      	mov	r3, r5
 800c026:	ec51 0b19 	vmov	r0, r1, d9
 800c02a:	f7f4 f92f 	bl	800028c <__adddf3>
 800c02e:	4602      	mov	r2, r0
 800c030:	460b      	mov	r3, r1
 800c032:	2000      	movs	r0, #0
 800c034:	49bb      	ldr	r1, [pc, #748]	; (800c324 <__ieee754_pow+0x76c>)
 800c036:	f7f4 fc09 	bl	800084c <__aeabi_ddiv>
 800c03a:	ec41 0b1a 	vmov	d10, r0, r1
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4630      	mov	r0, r6
 800c044:	4639      	mov	r1, r7
 800c046:	f7f4 fad7 	bl	80005f8 <__aeabi_dmul>
 800c04a:	2300      	movs	r3, #0
 800c04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c050:	9302      	str	r3, [sp, #8]
 800c052:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c056:	46ab      	mov	fp, r5
 800c058:	106d      	asrs	r5, r5, #1
 800c05a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c05e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c062:	ec41 0b18 	vmov	d8, r0, r1
 800c066:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c06a:	2200      	movs	r2, #0
 800c06c:	4640      	mov	r0, r8
 800c06e:	4649      	mov	r1, r9
 800c070:	4614      	mov	r4, r2
 800c072:	461d      	mov	r5, r3
 800c074:	f7f4 fac0 	bl	80005f8 <__aeabi_dmul>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4630      	mov	r0, r6
 800c07e:	4639      	mov	r1, r7
 800c080:	f7f4 f902 	bl	8000288 <__aeabi_dsub>
 800c084:	ec53 2b19 	vmov	r2, r3, d9
 800c088:	4606      	mov	r6, r0
 800c08a:	460f      	mov	r7, r1
 800c08c:	4620      	mov	r0, r4
 800c08e:	4629      	mov	r1, r5
 800c090:	f7f4 f8fa 	bl	8000288 <__aeabi_dsub>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4650      	mov	r0, sl
 800c09a:	4659      	mov	r1, fp
 800c09c:	f7f4 f8f4 	bl	8000288 <__aeabi_dsub>
 800c0a0:	4642      	mov	r2, r8
 800c0a2:	464b      	mov	r3, r9
 800c0a4:	f7f4 faa8 	bl	80005f8 <__aeabi_dmul>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	4639      	mov	r1, r7
 800c0b0:	f7f4 f8ea 	bl	8000288 <__aeabi_dsub>
 800c0b4:	ec53 2b1a 	vmov	r2, r3, d10
 800c0b8:	f7f4 fa9e 	bl	80005f8 <__aeabi_dmul>
 800c0bc:	ec53 2b18 	vmov	r2, r3, d8
 800c0c0:	ec41 0b19 	vmov	d9, r0, r1
 800c0c4:	ec51 0b18 	vmov	r0, r1, d8
 800c0c8:	f7f4 fa96 	bl	80005f8 <__aeabi_dmul>
 800c0cc:	a37c      	add	r3, pc, #496	; (adr r3, 800c2c0 <__ieee754_pow+0x708>)
 800c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	460d      	mov	r5, r1
 800c0d6:	f7f4 fa8f 	bl	80005f8 <__aeabi_dmul>
 800c0da:	a37b      	add	r3, pc, #492	; (adr r3, 800c2c8 <__ieee754_pow+0x710>)
 800c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e0:	f7f4 f8d4 	bl	800028c <__adddf3>
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	462b      	mov	r3, r5
 800c0e8:	f7f4 fa86 	bl	80005f8 <__aeabi_dmul>
 800c0ec:	a378      	add	r3, pc, #480	; (adr r3, 800c2d0 <__ieee754_pow+0x718>)
 800c0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f2:	f7f4 f8cb 	bl	800028c <__adddf3>
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	f7f4 fa7d 	bl	80005f8 <__aeabi_dmul>
 800c0fe:	a376      	add	r3, pc, #472	; (adr r3, 800c2d8 <__ieee754_pow+0x720>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 f8c2 	bl	800028c <__adddf3>
 800c108:	4622      	mov	r2, r4
 800c10a:	462b      	mov	r3, r5
 800c10c:	f7f4 fa74 	bl	80005f8 <__aeabi_dmul>
 800c110:	a373      	add	r3, pc, #460	; (adr r3, 800c2e0 <__ieee754_pow+0x728>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	f7f4 f8b9 	bl	800028c <__adddf3>
 800c11a:	4622      	mov	r2, r4
 800c11c:	462b      	mov	r3, r5
 800c11e:	f7f4 fa6b 	bl	80005f8 <__aeabi_dmul>
 800c122:	a371      	add	r3, pc, #452	; (adr r3, 800c2e8 <__ieee754_pow+0x730>)
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 f8b0 	bl	800028c <__adddf3>
 800c12c:	4622      	mov	r2, r4
 800c12e:	4606      	mov	r6, r0
 800c130:	460f      	mov	r7, r1
 800c132:	462b      	mov	r3, r5
 800c134:	4620      	mov	r0, r4
 800c136:	4629      	mov	r1, r5
 800c138:	f7f4 fa5e 	bl	80005f8 <__aeabi_dmul>
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	4630      	mov	r0, r6
 800c142:	4639      	mov	r1, r7
 800c144:	f7f4 fa58 	bl	80005f8 <__aeabi_dmul>
 800c148:	4642      	mov	r2, r8
 800c14a:	4604      	mov	r4, r0
 800c14c:	460d      	mov	r5, r1
 800c14e:	464b      	mov	r3, r9
 800c150:	ec51 0b18 	vmov	r0, r1, d8
 800c154:	f7f4 f89a 	bl	800028c <__adddf3>
 800c158:	ec53 2b19 	vmov	r2, r3, d9
 800c15c:	f7f4 fa4c 	bl	80005f8 <__aeabi_dmul>
 800c160:	4622      	mov	r2, r4
 800c162:	462b      	mov	r3, r5
 800c164:	f7f4 f892 	bl	800028c <__adddf3>
 800c168:	4642      	mov	r2, r8
 800c16a:	4682      	mov	sl, r0
 800c16c:	468b      	mov	fp, r1
 800c16e:	464b      	mov	r3, r9
 800c170:	4640      	mov	r0, r8
 800c172:	4649      	mov	r1, r9
 800c174:	f7f4 fa40 	bl	80005f8 <__aeabi_dmul>
 800c178:	4b6b      	ldr	r3, [pc, #428]	; (800c328 <__ieee754_pow+0x770>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	4606      	mov	r6, r0
 800c17e:	460f      	mov	r7, r1
 800c180:	f7f4 f884 	bl	800028c <__adddf3>
 800c184:	4652      	mov	r2, sl
 800c186:	465b      	mov	r3, fp
 800c188:	f7f4 f880 	bl	800028c <__adddf3>
 800c18c:	2000      	movs	r0, #0
 800c18e:	4604      	mov	r4, r0
 800c190:	460d      	mov	r5, r1
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	4640      	mov	r0, r8
 800c198:	4649      	mov	r1, r9
 800c19a:	f7f4 fa2d 	bl	80005f8 <__aeabi_dmul>
 800c19e:	4b62      	ldr	r3, [pc, #392]	; (800c328 <__ieee754_pow+0x770>)
 800c1a0:	4680      	mov	r8, r0
 800c1a2:	4689      	mov	r9, r1
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	f7f4 f86d 	bl	8000288 <__aeabi_dsub>
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	463b      	mov	r3, r7
 800c1b2:	f7f4 f869 	bl	8000288 <__aeabi_dsub>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4650      	mov	r0, sl
 800c1bc:	4659      	mov	r1, fp
 800c1be:	f7f4 f863 	bl	8000288 <__aeabi_dsub>
 800c1c2:	ec53 2b18 	vmov	r2, r3, d8
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	4606      	mov	r6, r0
 800c1ce:	460f      	mov	r7, r1
 800c1d0:	462b      	mov	r3, r5
 800c1d2:	ec51 0b19 	vmov	r0, r1, d9
 800c1d6:	f7f4 fa0f 	bl	80005f8 <__aeabi_dmul>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4630      	mov	r0, r6
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	f7f4 f853 	bl	800028c <__adddf3>
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	460f      	mov	r7, r1
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4640      	mov	r0, r8
 800c1f0:	4649      	mov	r1, r9
 800c1f2:	f7f4 f84b 	bl	800028c <__adddf3>
 800c1f6:	a33e      	add	r3, pc, #248	; (adr r3, 800c2f0 <__ieee754_pow+0x738>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	460d      	mov	r5, r1
 800c202:	f7f4 f9f9 	bl	80005f8 <__aeabi_dmul>
 800c206:	4642      	mov	r2, r8
 800c208:	ec41 0b18 	vmov	d8, r0, r1
 800c20c:	464b      	mov	r3, r9
 800c20e:	4620      	mov	r0, r4
 800c210:	4629      	mov	r1, r5
 800c212:	f7f4 f839 	bl	8000288 <__aeabi_dsub>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4630      	mov	r0, r6
 800c21c:	4639      	mov	r1, r7
 800c21e:	f7f4 f833 	bl	8000288 <__aeabi_dsub>
 800c222:	a335      	add	r3, pc, #212	; (adr r3, 800c2f8 <__ieee754_pow+0x740>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	f7f4 f9e6 	bl	80005f8 <__aeabi_dmul>
 800c22c:	a334      	add	r3, pc, #208	; (adr r3, 800c300 <__ieee754_pow+0x748>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	4606      	mov	r6, r0
 800c234:	460f      	mov	r7, r1
 800c236:	4620      	mov	r0, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	f7f4 f9dd 	bl	80005f8 <__aeabi_dmul>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4630      	mov	r0, r6
 800c244:	4639      	mov	r1, r7
 800c246:	f7f4 f821 	bl	800028c <__adddf3>
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	4b37      	ldr	r3, [pc, #220]	; (800c32c <__ieee754_pow+0x774>)
 800c24e:	4413      	add	r3, r2
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f81a 	bl	800028c <__adddf3>
 800c258:	4682      	mov	sl, r0
 800c25a:	9805      	ldr	r0, [sp, #20]
 800c25c:	468b      	mov	fp, r1
 800c25e:	f7f4 f961 	bl	8000524 <__aeabi_i2d>
 800c262:	9a07      	ldr	r2, [sp, #28]
 800c264:	4b32      	ldr	r3, [pc, #200]	; (800c330 <__ieee754_pow+0x778>)
 800c266:	4413      	add	r3, r2
 800c268:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c26c:	4606      	mov	r6, r0
 800c26e:	460f      	mov	r7, r1
 800c270:	4652      	mov	r2, sl
 800c272:	465b      	mov	r3, fp
 800c274:	ec51 0b18 	vmov	r0, r1, d8
 800c278:	f7f4 f808 	bl	800028c <__adddf3>
 800c27c:	4642      	mov	r2, r8
 800c27e:	464b      	mov	r3, r9
 800c280:	f7f4 f804 	bl	800028c <__adddf3>
 800c284:	4632      	mov	r2, r6
 800c286:	463b      	mov	r3, r7
 800c288:	f7f4 f800 	bl	800028c <__adddf3>
 800c28c:	2000      	movs	r0, #0
 800c28e:	4632      	mov	r2, r6
 800c290:	463b      	mov	r3, r7
 800c292:	4604      	mov	r4, r0
 800c294:	460d      	mov	r5, r1
 800c296:	f7f3 fff7 	bl	8000288 <__aeabi_dsub>
 800c29a:	4642      	mov	r2, r8
 800c29c:	464b      	mov	r3, r9
 800c29e:	f7f3 fff3 	bl	8000288 <__aeabi_dsub>
 800c2a2:	ec53 2b18 	vmov	r2, r3, d8
 800c2a6:	f7f3 ffef 	bl	8000288 <__aeabi_dsub>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4650      	mov	r0, sl
 800c2b0:	4659      	mov	r1, fp
 800c2b2:	e610      	b.n	800bed6 <__ieee754_pow+0x31e>
 800c2b4:	2401      	movs	r4, #1
 800c2b6:	e6a1      	b.n	800bffc <__ieee754_pow+0x444>
 800c2b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c308 <__ieee754_pow+0x750>
 800c2bc:	e617      	b.n	800beee <__ieee754_pow+0x336>
 800c2be:	bf00      	nop
 800c2c0:	4a454eef 	.word	0x4a454eef
 800c2c4:	3fca7e28 	.word	0x3fca7e28
 800c2c8:	93c9db65 	.word	0x93c9db65
 800c2cc:	3fcd864a 	.word	0x3fcd864a
 800c2d0:	a91d4101 	.word	0xa91d4101
 800c2d4:	3fd17460 	.word	0x3fd17460
 800c2d8:	518f264d 	.word	0x518f264d
 800c2dc:	3fd55555 	.word	0x3fd55555
 800c2e0:	db6fabff 	.word	0xdb6fabff
 800c2e4:	3fdb6db6 	.word	0x3fdb6db6
 800c2e8:	33333303 	.word	0x33333303
 800c2ec:	3fe33333 	.word	0x3fe33333
 800c2f0:	e0000000 	.word	0xe0000000
 800c2f4:	3feec709 	.word	0x3feec709
 800c2f8:	dc3a03fd 	.word	0xdc3a03fd
 800c2fc:	3feec709 	.word	0x3feec709
 800c300:	145b01f5 	.word	0x145b01f5
 800c304:	be3e2fe0 	.word	0xbe3e2fe0
 800c308:	00000000 	.word	0x00000000
 800c30c:	3ff00000 	.word	0x3ff00000
 800c310:	7ff00000 	.word	0x7ff00000
 800c314:	43400000 	.word	0x43400000
 800c318:	0003988e 	.word	0x0003988e
 800c31c:	000bb679 	.word	0x000bb679
 800c320:	080142b8 	.word	0x080142b8
 800c324:	3ff00000 	.word	0x3ff00000
 800c328:	40080000 	.word	0x40080000
 800c32c:	080142d8 	.word	0x080142d8
 800c330:	080142c8 	.word	0x080142c8
 800c334:	a3b3      	add	r3, pc, #716	; (adr r3, 800c604 <__ieee754_pow+0xa4c>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	4640      	mov	r0, r8
 800c33c:	4649      	mov	r1, r9
 800c33e:	f7f3 ffa5 	bl	800028c <__adddf3>
 800c342:	4622      	mov	r2, r4
 800c344:	ec41 0b1a 	vmov	d10, r0, r1
 800c348:	462b      	mov	r3, r5
 800c34a:	4630      	mov	r0, r6
 800c34c:	4639      	mov	r1, r7
 800c34e:	f7f3 ff9b 	bl	8000288 <__aeabi_dsub>
 800c352:	4602      	mov	r2, r0
 800c354:	460b      	mov	r3, r1
 800c356:	ec51 0b1a 	vmov	r0, r1, d10
 800c35a:	f7f4 fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800c35e:	2800      	cmp	r0, #0
 800c360:	f47f ae04 	bne.w	800bf6c <__ieee754_pow+0x3b4>
 800c364:	4aa2      	ldr	r2, [pc, #648]	; (800c5f0 <__ieee754_pow+0xa38>)
 800c366:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c36a:	4293      	cmp	r3, r2
 800c36c:	f340 8107 	ble.w	800c57e <__ieee754_pow+0x9c6>
 800c370:	151b      	asrs	r3, r3, #20
 800c372:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c376:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c37a:	fa4a fa03 	asr.w	sl, sl, r3
 800c37e:	44da      	add	sl, fp
 800c380:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c384:	489b      	ldr	r0, [pc, #620]	; (800c5f4 <__ieee754_pow+0xa3c>)
 800c386:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c38a:	4108      	asrs	r0, r1
 800c38c:	ea00 030a 	and.w	r3, r0, sl
 800c390:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c394:	f1c1 0114 	rsb	r1, r1, #20
 800c398:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c39c:	fa4a fa01 	asr.w	sl, sl, r1
 800c3a0:	f1bb 0f00 	cmp.w	fp, #0
 800c3a4:	f04f 0200 	mov.w	r2, #0
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	bfb8      	it	lt
 800c3ae:	f1ca 0a00 	rsblt	sl, sl, #0
 800c3b2:	f7f3 ff69 	bl	8000288 <__aeabi_dsub>
 800c3b6:	ec41 0b19 	vmov	d9, r0, r1
 800c3ba:	4642      	mov	r2, r8
 800c3bc:	464b      	mov	r3, r9
 800c3be:	ec51 0b19 	vmov	r0, r1, d9
 800c3c2:	f7f3 ff63 	bl	800028c <__adddf3>
 800c3c6:	a37a      	add	r3, pc, #488	; (adr r3, 800c5b0 <__ieee754_pow+0x9f8>)
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	f7f4 f911 	bl	80005f8 <__aeabi_dmul>
 800c3d6:	ec53 2b19 	vmov	r2, r3, d9
 800c3da:	4606      	mov	r6, r0
 800c3dc:	460f      	mov	r7, r1
 800c3de:	4620      	mov	r0, r4
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	f7f3 ff51 	bl	8000288 <__aeabi_dsub>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f3 ff4b 	bl	8000288 <__aeabi_dsub>
 800c3f2:	a371      	add	r3, pc, #452	; (adr r3, 800c5b8 <__ieee754_pow+0xa00>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7f4 f8fe 	bl	80005f8 <__aeabi_dmul>
 800c3fc:	a370      	add	r3, pc, #448	; (adr r3, 800c5c0 <__ieee754_pow+0xa08>)
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	4680      	mov	r8, r0
 800c404:	4689      	mov	r9, r1
 800c406:	4620      	mov	r0, r4
 800c408:	4629      	mov	r1, r5
 800c40a:	f7f4 f8f5 	bl	80005f8 <__aeabi_dmul>
 800c40e:	4602      	mov	r2, r0
 800c410:	460b      	mov	r3, r1
 800c412:	4640      	mov	r0, r8
 800c414:	4649      	mov	r1, r9
 800c416:	f7f3 ff39 	bl	800028c <__adddf3>
 800c41a:	4604      	mov	r4, r0
 800c41c:	460d      	mov	r5, r1
 800c41e:	4602      	mov	r2, r0
 800c420:	460b      	mov	r3, r1
 800c422:	4630      	mov	r0, r6
 800c424:	4639      	mov	r1, r7
 800c426:	f7f3 ff31 	bl	800028c <__adddf3>
 800c42a:	4632      	mov	r2, r6
 800c42c:	463b      	mov	r3, r7
 800c42e:	4680      	mov	r8, r0
 800c430:	4689      	mov	r9, r1
 800c432:	f7f3 ff29 	bl	8000288 <__aeabi_dsub>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	4620      	mov	r0, r4
 800c43c:	4629      	mov	r1, r5
 800c43e:	f7f3 ff23 	bl	8000288 <__aeabi_dsub>
 800c442:	4642      	mov	r2, r8
 800c444:	4606      	mov	r6, r0
 800c446:	460f      	mov	r7, r1
 800c448:	464b      	mov	r3, r9
 800c44a:	4640      	mov	r0, r8
 800c44c:	4649      	mov	r1, r9
 800c44e:	f7f4 f8d3 	bl	80005f8 <__aeabi_dmul>
 800c452:	a35d      	add	r3, pc, #372	; (adr r3, 800c5c8 <__ieee754_pow+0xa10>)
 800c454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c458:	4604      	mov	r4, r0
 800c45a:	460d      	mov	r5, r1
 800c45c:	f7f4 f8cc 	bl	80005f8 <__aeabi_dmul>
 800c460:	a35b      	add	r3, pc, #364	; (adr r3, 800c5d0 <__ieee754_pow+0xa18>)
 800c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c466:	f7f3 ff0f 	bl	8000288 <__aeabi_dsub>
 800c46a:	4622      	mov	r2, r4
 800c46c:	462b      	mov	r3, r5
 800c46e:	f7f4 f8c3 	bl	80005f8 <__aeabi_dmul>
 800c472:	a359      	add	r3, pc, #356	; (adr r3, 800c5d8 <__ieee754_pow+0xa20>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f3 ff08 	bl	800028c <__adddf3>
 800c47c:	4622      	mov	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 f8ba 	bl	80005f8 <__aeabi_dmul>
 800c484:	a356      	add	r3, pc, #344	; (adr r3, 800c5e0 <__ieee754_pow+0xa28>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f7f3 fefd 	bl	8000288 <__aeabi_dsub>
 800c48e:	4622      	mov	r2, r4
 800c490:	462b      	mov	r3, r5
 800c492:	f7f4 f8b1 	bl	80005f8 <__aeabi_dmul>
 800c496:	a354      	add	r3, pc, #336	; (adr r3, 800c5e8 <__ieee754_pow+0xa30>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	f7f3 fef6 	bl	800028c <__adddf3>
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	f7f4 f8a8 	bl	80005f8 <__aeabi_dmul>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	f7f3 feea 	bl	8000288 <__aeabi_dsub>
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	4640      	mov	r0, r8
 800c4be:	4649      	mov	r1, r9
 800c4c0:	f7f4 f89a 	bl	80005f8 <__aeabi_dmul>
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	ec41 0b19 	vmov	d9, r0, r1
 800c4ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7f3 fed9 	bl	8000288 <__aeabi_dsub>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	460b      	mov	r3, r1
 800c4da:	ec51 0b19 	vmov	r0, r1, d9
 800c4de:	f7f4 f9b5 	bl	800084c <__aeabi_ddiv>
 800c4e2:	4632      	mov	r2, r6
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	460d      	mov	r5, r1
 800c4e8:	463b      	mov	r3, r7
 800c4ea:	4640      	mov	r0, r8
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	f7f4 f883 	bl	80005f8 <__aeabi_dmul>
 800c4f2:	4632      	mov	r2, r6
 800c4f4:	463b      	mov	r3, r7
 800c4f6:	f7f3 fec9 	bl	800028c <__adddf3>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	4620      	mov	r0, r4
 800c500:	4629      	mov	r1, r5
 800c502:	f7f3 fec1 	bl	8000288 <__aeabi_dsub>
 800c506:	4642      	mov	r2, r8
 800c508:	464b      	mov	r3, r9
 800c50a:	f7f3 febd 	bl	8000288 <__aeabi_dsub>
 800c50e:	460b      	mov	r3, r1
 800c510:	4602      	mov	r2, r0
 800c512:	4939      	ldr	r1, [pc, #228]	; (800c5f8 <__ieee754_pow+0xa40>)
 800c514:	2000      	movs	r0, #0
 800c516:	f7f3 feb7 	bl	8000288 <__aeabi_dsub>
 800c51a:	ec41 0b10 	vmov	d0, r0, r1
 800c51e:	ee10 3a90 	vmov	r3, s1
 800c522:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c52a:	da2b      	bge.n	800c584 <__ieee754_pow+0x9cc>
 800c52c:	4650      	mov	r0, sl
 800c52e:	f000 f877 	bl	800c620 <scalbn>
 800c532:	ec51 0b10 	vmov	r0, r1, d0
 800c536:	ec53 2b18 	vmov	r2, r3, d8
 800c53a:	f7ff bbee 	b.w	800bd1a <__ieee754_pow+0x162>
 800c53e:	4b2f      	ldr	r3, [pc, #188]	; (800c5fc <__ieee754_pow+0xa44>)
 800c540:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c544:	429e      	cmp	r6, r3
 800c546:	f77f af0d 	ble.w	800c364 <__ieee754_pow+0x7ac>
 800c54a:	4b2d      	ldr	r3, [pc, #180]	; (800c600 <__ieee754_pow+0xa48>)
 800c54c:	440b      	add	r3, r1
 800c54e:	4303      	orrs	r3, r0
 800c550:	d009      	beq.n	800c566 <__ieee754_pow+0x9ae>
 800c552:	ec51 0b18 	vmov	r0, r1, d8
 800c556:	2200      	movs	r2, #0
 800c558:	2300      	movs	r3, #0
 800c55a:	f7f4 fabf 	bl	8000adc <__aeabi_dcmplt>
 800c55e:	3800      	subs	r0, #0
 800c560:	bf18      	it	ne
 800c562:	2001      	movne	r0, #1
 800c564:	e448      	b.n	800bdf8 <__ieee754_pow+0x240>
 800c566:	4622      	mov	r2, r4
 800c568:	462b      	mov	r3, r5
 800c56a:	f7f3 fe8d 	bl	8000288 <__aeabi_dsub>
 800c56e:	4642      	mov	r2, r8
 800c570:	464b      	mov	r3, r9
 800c572:	f7f4 fac7 	bl	8000b04 <__aeabi_dcmpge>
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f aef4 	beq.w	800c364 <__ieee754_pow+0x7ac>
 800c57c:	e7e9      	b.n	800c552 <__ieee754_pow+0x99a>
 800c57e:	f04f 0a00 	mov.w	sl, #0
 800c582:	e71a      	b.n	800c3ba <__ieee754_pow+0x802>
 800c584:	ec51 0b10 	vmov	r0, r1, d0
 800c588:	4619      	mov	r1, r3
 800c58a:	e7d4      	b.n	800c536 <__ieee754_pow+0x97e>
 800c58c:	491a      	ldr	r1, [pc, #104]	; (800c5f8 <__ieee754_pow+0xa40>)
 800c58e:	2000      	movs	r0, #0
 800c590:	f7ff bb31 	b.w	800bbf6 <__ieee754_pow+0x3e>
 800c594:	2000      	movs	r0, #0
 800c596:	2100      	movs	r1, #0
 800c598:	f7ff bb2d 	b.w	800bbf6 <__ieee754_pow+0x3e>
 800c59c:	4630      	mov	r0, r6
 800c59e:	4639      	mov	r1, r7
 800c5a0:	f7ff bb29 	b.w	800bbf6 <__ieee754_pow+0x3e>
 800c5a4:	9204      	str	r2, [sp, #16]
 800c5a6:	f7ff bb7b 	b.w	800bca0 <__ieee754_pow+0xe8>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f7ff bb65 	b.w	800bc7a <__ieee754_pow+0xc2>
 800c5b0:	00000000 	.word	0x00000000
 800c5b4:	3fe62e43 	.word	0x3fe62e43
 800c5b8:	fefa39ef 	.word	0xfefa39ef
 800c5bc:	3fe62e42 	.word	0x3fe62e42
 800c5c0:	0ca86c39 	.word	0x0ca86c39
 800c5c4:	be205c61 	.word	0xbe205c61
 800c5c8:	72bea4d0 	.word	0x72bea4d0
 800c5cc:	3e663769 	.word	0x3e663769
 800c5d0:	c5d26bf1 	.word	0xc5d26bf1
 800c5d4:	3ebbbd41 	.word	0x3ebbbd41
 800c5d8:	af25de2c 	.word	0xaf25de2c
 800c5dc:	3f11566a 	.word	0x3f11566a
 800c5e0:	16bebd93 	.word	0x16bebd93
 800c5e4:	3f66c16c 	.word	0x3f66c16c
 800c5e8:	5555553e 	.word	0x5555553e
 800c5ec:	3fc55555 	.word	0x3fc55555
 800c5f0:	3fe00000 	.word	0x3fe00000
 800c5f4:	fff00000 	.word	0xfff00000
 800c5f8:	3ff00000 	.word	0x3ff00000
 800c5fc:	4090cbff 	.word	0x4090cbff
 800c600:	3f6f3400 	.word	0x3f6f3400
 800c604:	652b82fe 	.word	0x652b82fe
 800c608:	3c971547 	.word	0x3c971547

0800c60c <fabs>:
 800c60c:	ec51 0b10 	vmov	r0, r1, d0
 800c610:	ee10 2a10 	vmov	r2, s0
 800c614:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c618:	ec43 2b10 	vmov	d0, r2, r3
 800c61c:	4770      	bx	lr
	...

0800c620 <scalbn>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	ec55 4b10 	vmov	r4, r5, d0
 800c626:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c62a:	4606      	mov	r6, r0
 800c62c:	462b      	mov	r3, r5
 800c62e:	b999      	cbnz	r1, 800c658 <scalbn+0x38>
 800c630:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c634:	4323      	orrs	r3, r4
 800c636:	d03f      	beq.n	800c6b8 <scalbn+0x98>
 800c638:	4b35      	ldr	r3, [pc, #212]	; (800c710 <scalbn+0xf0>)
 800c63a:	4629      	mov	r1, r5
 800c63c:	ee10 0a10 	vmov	r0, s0
 800c640:	2200      	movs	r2, #0
 800c642:	f7f3 ffd9 	bl	80005f8 <__aeabi_dmul>
 800c646:	4b33      	ldr	r3, [pc, #204]	; (800c714 <scalbn+0xf4>)
 800c648:	429e      	cmp	r6, r3
 800c64a:	4604      	mov	r4, r0
 800c64c:	460d      	mov	r5, r1
 800c64e:	da10      	bge.n	800c672 <scalbn+0x52>
 800c650:	a327      	add	r3, pc, #156	; (adr r3, 800c6f0 <scalbn+0xd0>)
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	e01f      	b.n	800c698 <scalbn+0x78>
 800c658:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c65c:	4291      	cmp	r1, r2
 800c65e:	d10c      	bne.n	800c67a <scalbn+0x5a>
 800c660:	ee10 2a10 	vmov	r2, s0
 800c664:	4620      	mov	r0, r4
 800c666:	4629      	mov	r1, r5
 800c668:	f7f3 fe10 	bl	800028c <__adddf3>
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	e022      	b.n	800c6b8 <scalbn+0x98>
 800c672:	460b      	mov	r3, r1
 800c674:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c678:	3936      	subs	r1, #54	; 0x36
 800c67a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c67e:	4296      	cmp	r6, r2
 800c680:	dd0d      	ble.n	800c69e <scalbn+0x7e>
 800c682:	2d00      	cmp	r5, #0
 800c684:	a11c      	add	r1, pc, #112	; (adr r1, 800c6f8 <scalbn+0xd8>)
 800c686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c68a:	da02      	bge.n	800c692 <scalbn+0x72>
 800c68c:	a11c      	add	r1, pc, #112	; (adr r1, 800c700 <scalbn+0xe0>)
 800c68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c692:	a319      	add	r3, pc, #100	; (adr r3, 800c6f8 <scalbn+0xd8>)
 800c694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c698:	f7f3 ffae 	bl	80005f8 <__aeabi_dmul>
 800c69c:	e7e6      	b.n	800c66c <scalbn+0x4c>
 800c69e:	1872      	adds	r2, r6, r1
 800c6a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c6a4:	428a      	cmp	r2, r1
 800c6a6:	dcec      	bgt.n	800c682 <scalbn+0x62>
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	dd08      	ble.n	800c6be <scalbn+0x9e>
 800c6ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6b8:	ec45 4b10 	vmov	d0, r4, r5
 800c6bc:	bd70      	pop	{r4, r5, r6, pc}
 800c6be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6c2:	da08      	bge.n	800c6d6 <scalbn+0xb6>
 800c6c4:	2d00      	cmp	r5, #0
 800c6c6:	a10a      	add	r1, pc, #40	; (adr r1, 800c6f0 <scalbn+0xd0>)
 800c6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6cc:	dac0      	bge.n	800c650 <scalbn+0x30>
 800c6ce:	a10e      	add	r1, pc, #56	; (adr r1, 800c708 <scalbn+0xe8>)
 800c6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d4:	e7bc      	b.n	800c650 <scalbn+0x30>
 800c6d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6da:	3236      	adds	r2, #54	; 0x36
 800c6dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <scalbn+0xf8>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	e7d5      	b.n	800c698 <scalbn+0x78>
 800c6ec:	f3af 8000 	nop.w
 800c6f0:	c2f8f359 	.word	0xc2f8f359
 800c6f4:	01a56e1f 	.word	0x01a56e1f
 800c6f8:	8800759c 	.word	0x8800759c
 800c6fc:	7e37e43c 	.word	0x7e37e43c
 800c700:	8800759c 	.word	0x8800759c
 800c704:	fe37e43c 	.word	0xfe37e43c
 800c708:	c2f8f359 	.word	0xc2f8f359
 800c70c:	81a56e1f 	.word	0x81a56e1f
 800c710:	43500000 	.word	0x43500000
 800c714:	ffff3cb0 	.word	0xffff3cb0
 800c718:	3c900000 	.word	0x3c900000

0800c71c <with_errno>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	4604      	mov	r4, r0
 800c720:	460d      	mov	r5, r1
 800c722:	4616      	mov	r6, r2
 800c724:	f000 fff0 	bl	800d708 <__errno>
 800c728:	4629      	mov	r1, r5
 800c72a:	6006      	str	r6, [r0, #0]
 800c72c:	4620      	mov	r0, r4
 800c72e:	bd70      	pop	{r4, r5, r6, pc}

0800c730 <xflow>:
 800c730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c732:	4614      	mov	r4, r2
 800c734:	461d      	mov	r5, r3
 800c736:	b108      	cbz	r0, 800c73c <xflow+0xc>
 800c738:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c73c:	e9cd 2300 	strd	r2, r3, [sp]
 800c740:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7f3 ff56 	bl	80005f8 <__aeabi_dmul>
 800c74c:	2222      	movs	r2, #34	; 0x22
 800c74e:	b003      	add	sp, #12
 800c750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c754:	f7ff bfe2 	b.w	800c71c <with_errno>

0800c758 <__math_uflow>:
 800c758:	b508      	push	{r3, lr}
 800c75a:	2200      	movs	r2, #0
 800c75c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c760:	f7ff ffe6 	bl	800c730 <xflow>
 800c764:	ec41 0b10 	vmov	d0, r0, r1
 800c768:	bd08      	pop	{r3, pc}

0800c76a <__math_oflow>:
 800c76a:	b508      	push	{r3, lr}
 800c76c:	2200      	movs	r2, #0
 800c76e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c772:	f7ff ffdd 	bl	800c730 <xflow>
 800c776:	ec41 0b10 	vmov	d0, r0, r1
 800c77a:	bd08      	pop	{r3, pc}

0800c77c <__ieee754_sqrt>:
 800c77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c780:	ec55 4b10 	vmov	r4, r5, d0
 800c784:	4e67      	ldr	r6, [pc, #412]	; (800c924 <__ieee754_sqrt+0x1a8>)
 800c786:	43ae      	bics	r6, r5
 800c788:	ee10 0a10 	vmov	r0, s0
 800c78c:	ee10 2a10 	vmov	r2, s0
 800c790:	4629      	mov	r1, r5
 800c792:	462b      	mov	r3, r5
 800c794:	d10d      	bne.n	800c7b2 <__ieee754_sqrt+0x36>
 800c796:	f7f3 ff2f 	bl	80005f8 <__aeabi_dmul>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4620      	mov	r0, r4
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	f7f3 fd73 	bl	800028c <__adddf3>
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	460d      	mov	r5, r1
 800c7aa:	ec45 4b10 	vmov	d0, r4, r5
 800c7ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b2:	2d00      	cmp	r5, #0
 800c7b4:	dc0b      	bgt.n	800c7ce <__ieee754_sqrt+0x52>
 800c7b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c7ba:	4326      	orrs	r6, r4
 800c7bc:	d0f5      	beq.n	800c7aa <__ieee754_sqrt+0x2e>
 800c7be:	b135      	cbz	r5, 800c7ce <__ieee754_sqrt+0x52>
 800c7c0:	f7f3 fd62 	bl	8000288 <__aeabi_dsub>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	f7f4 f840 	bl	800084c <__aeabi_ddiv>
 800c7cc:	e7eb      	b.n	800c7a6 <__ieee754_sqrt+0x2a>
 800c7ce:	1509      	asrs	r1, r1, #20
 800c7d0:	f000 808d 	beq.w	800c8ee <__ieee754_sqrt+0x172>
 800c7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c7dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7e0:	07c9      	lsls	r1, r1, #31
 800c7e2:	bf5c      	itt	pl
 800c7e4:	005b      	lslpl	r3, r3, #1
 800c7e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c7ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c7ee:	bf58      	it	pl
 800c7f0:	0052      	lslpl	r2, r2, #1
 800c7f2:	2500      	movs	r5, #0
 800c7f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c7f8:	1076      	asrs	r6, r6, #1
 800c7fa:	0052      	lsls	r2, r2, #1
 800c7fc:	f04f 0e16 	mov.w	lr, #22
 800c800:	46ac      	mov	ip, r5
 800c802:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c806:	eb0c 0001 	add.w	r0, ip, r1
 800c80a:	4298      	cmp	r0, r3
 800c80c:	bfde      	ittt	le
 800c80e:	1a1b      	suble	r3, r3, r0
 800c810:	eb00 0c01 	addle.w	ip, r0, r1
 800c814:	186d      	addle	r5, r5, r1
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	f1be 0e01 	subs.w	lr, lr, #1
 800c81c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c820:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c824:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c828:	d1ed      	bne.n	800c806 <__ieee754_sqrt+0x8a>
 800c82a:	4674      	mov	r4, lr
 800c82c:	2720      	movs	r7, #32
 800c82e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c832:	4563      	cmp	r3, ip
 800c834:	eb01 000e 	add.w	r0, r1, lr
 800c838:	dc02      	bgt.n	800c840 <__ieee754_sqrt+0xc4>
 800c83a:	d113      	bne.n	800c864 <__ieee754_sqrt+0xe8>
 800c83c:	4290      	cmp	r0, r2
 800c83e:	d811      	bhi.n	800c864 <__ieee754_sqrt+0xe8>
 800c840:	2800      	cmp	r0, #0
 800c842:	eb00 0e01 	add.w	lr, r0, r1
 800c846:	da57      	bge.n	800c8f8 <__ieee754_sqrt+0x17c>
 800c848:	f1be 0f00 	cmp.w	lr, #0
 800c84c:	db54      	blt.n	800c8f8 <__ieee754_sqrt+0x17c>
 800c84e:	f10c 0801 	add.w	r8, ip, #1
 800c852:	eba3 030c 	sub.w	r3, r3, ip
 800c856:	4290      	cmp	r0, r2
 800c858:	bf88      	it	hi
 800c85a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c85e:	1a12      	subs	r2, r2, r0
 800c860:	440c      	add	r4, r1
 800c862:	46c4      	mov	ip, r8
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	3f01      	subs	r7, #1
 800c868:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c86c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c870:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c874:	d1dd      	bne.n	800c832 <__ieee754_sqrt+0xb6>
 800c876:	4313      	orrs	r3, r2
 800c878:	d01b      	beq.n	800c8b2 <__ieee754_sqrt+0x136>
 800c87a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c928 <__ieee754_sqrt+0x1ac>
 800c87e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c92c <__ieee754_sqrt+0x1b0>
 800c882:	e9da 0100 	ldrd	r0, r1, [sl]
 800c886:	e9db 2300 	ldrd	r2, r3, [fp]
 800c88a:	f7f3 fcfd 	bl	8000288 <__aeabi_dsub>
 800c88e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4640      	mov	r0, r8
 800c898:	4649      	mov	r1, r9
 800c89a:	f7f4 f929 	bl	8000af0 <__aeabi_dcmple>
 800c89e:	b140      	cbz	r0, 800c8b2 <__ieee754_sqrt+0x136>
 800c8a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c8a4:	e9da 0100 	ldrd	r0, r1, [sl]
 800c8a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800c8ac:	d126      	bne.n	800c8fc <__ieee754_sqrt+0x180>
 800c8ae:	3501      	adds	r5, #1
 800c8b0:	463c      	mov	r4, r7
 800c8b2:	106a      	asrs	r2, r5, #1
 800c8b4:	0863      	lsrs	r3, r4, #1
 800c8b6:	07e9      	lsls	r1, r5, #31
 800c8b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c8bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c8c0:	bf48      	it	mi
 800c8c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c8c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c8ca:	461c      	mov	r4, r3
 800c8cc:	e76d      	b.n	800c7aa <__ieee754_sqrt+0x2e>
 800c8ce:	0ad3      	lsrs	r3, r2, #11
 800c8d0:	3815      	subs	r0, #21
 800c8d2:	0552      	lsls	r2, r2, #21
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d0fa      	beq.n	800c8ce <__ieee754_sqrt+0x152>
 800c8d8:	02dc      	lsls	r4, r3, #11
 800c8da:	d50a      	bpl.n	800c8f2 <__ieee754_sqrt+0x176>
 800c8dc:	f1c1 0420 	rsb	r4, r1, #32
 800c8e0:	fa22 f404 	lsr.w	r4, r2, r4
 800c8e4:	1e4d      	subs	r5, r1, #1
 800c8e6:	408a      	lsls	r2, r1
 800c8e8:	4323      	orrs	r3, r4
 800c8ea:	1b41      	subs	r1, r0, r5
 800c8ec:	e772      	b.n	800c7d4 <__ieee754_sqrt+0x58>
 800c8ee:	4608      	mov	r0, r1
 800c8f0:	e7f0      	b.n	800c8d4 <__ieee754_sqrt+0x158>
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	3101      	adds	r1, #1
 800c8f6:	e7ef      	b.n	800c8d8 <__ieee754_sqrt+0x15c>
 800c8f8:	46e0      	mov	r8, ip
 800c8fa:	e7aa      	b.n	800c852 <__ieee754_sqrt+0xd6>
 800c8fc:	f7f3 fcc6 	bl	800028c <__adddf3>
 800c900:	e9da 8900 	ldrd	r8, r9, [sl]
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	4640      	mov	r0, r8
 800c90a:	4649      	mov	r1, r9
 800c90c:	f7f4 f8e6 	bl	8000adc <__aeabi_dcmplt>
 800c910:	b120      	cbz	r0, 800c91c <__ieee754_sqrt+0x1a0>
 800c912:	1ca0      	adds	r0, r4, #2
 800c914:	bf08      	it	eq
 800c916:	3501      	addeq	r5, #1
 800c918:	3402      	adds	r4, #2
 800c91a:	e7ca      	b.n	800c8b2 <__ieee754_sqrt+0x136>
 800c91c:	3401      	adds	r4, #1
 800c91e:	f024 0401 	bic.w	r4, r4, #1
 800c922:	e7c6      	b.n	800c8b2 <__ieee754_sqrt+0x136>
 800c924:	7ff00000 	.word	0x7ff00000
 800c928:	20000598 	.word	0x20000598
 800c92c:	200005a0 	.word	0x200005a0

0800c930 <__itoa>:
 800c930:	1e93      	subs	r3, r2, #2
 800c932:	2b22      	cmp	r3, #34	; 0x22
 800c934:	b510      	push	{r4, lr}
 800c936:	460c      	mov	r4, r1
 800c938:	d904      	bls.n	800c944 <__itoa+0x14>
 800c93a:	2300      	movs	r3, #0
 800c93c:	700b      	strb	r3, [r1, #0]
 800c93e:	461c      	mov	r4, r3
 800c940:	4620      	mov	r0, r4
 800c942:	bd10      	pop	{r4, pc}
 800c944:	2a0a      	cmp	r2, #10
 800c946:	d109      	bne.n	800c95c <__itoa+0x2c>
 800c948:	2800      	cmp	r0, #0
 800c94a:	da07      	bge.n	800c95c <__itoa+0x2c>
 800c94c:	232d      	movs	r3, #45	; 0x2d
 800c94e:	700b      	strb	r3, [r1, #0]
 800c950:	4240      	negs	r0, r0
 800c952:	2101      	movs	r1, #1
 800c954:	4421      	add	r1, r4
 800c956:	f000 f805 	bl	800c964 <__utoa>
 800c95a:	e7f1      	b.n	800c940 <__itoa+0x10>
 800c95c:	2100      	movs	r1, #0
 800c95e:	e7f9      	b.n	800c954 <__itoa+0x24>

0800c960 <itoa>:
 800c960:	f7ff bfe6 	b.w	800c930 <__itoa>

0800c964 <__utoa>:
 800c964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c966:	4c1f      	ldr	r4, [pc, #124]	; (800c9e4 <__utoa+0x80>)
 800c968:	b08b      	sub	sp, #44	; 0x2c
 800c96a:	4605      	mov	r5, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	466e      	mov	r6, sp
 800c970:	f104 0c20 	add.w	ip, r4, #32
 800c974:	6820      	ldr	r0, [r4, #0]
 800c976:	6861      	ldr	r1, [r4, #4]
 800c978:	4637      	mov	r7, r6
 800c97a:	c703      	stmia	r7!, {r0, r1}
 800c97c:	3408      	adds	r4, #8
 800c97e:	4564      	cmp	r4, ip
 800c980:	463e      	mov	r6, r7
 800c982:	d1f7      	bne.n	800c974 <__utoa+0x10>
 800c984:	7921      	ldrb	r1, [r4, #4]
 800c986:	7139      	strb	r1, [r7, #4]
 800c988:	1e91      	subs	r1, r2, #2
 800c98a:	6820      	ldr	r0, [r4, #0]
 800c98c:	6038      	str	r0, [r7, #0]
 800c98e:	2922      	cmp	r1, #34	; 0x22
 800c990:	f04f 0100 	mov.w	r1, #0
 800c994:	d904      	bls.n	800c9a0 <__utoa+0x3c>
 800c996:	7019      	strb	r1, [r3, #0]
 800c998:	460b      	mov	r3, r1
 800c99a:	4618      	mov	r0, r3
 800c99c:	b00b      	add	sp, #44	; 0x2c
 800c99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9a0:	1e58      	subs	r0, r3, #1
 800c9a2:	4684      	mov	ip, r0
 800c9a4:	fbb5 f7f2 	udiv	r7, r5, r2
 800c9a8:	fb02 5617 	mls	r6, r2, r7, r5
 800c9ac:	3628      	adds	r6, #40	; 0x28
 800c9ae:	446e      	add	r6, sp
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c9b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c9ba:	462e      	mov	r6, r5
 800c9bc:	42b2      	cmp	r2, r6
 800c9be:	f101 0101 	add.w	r1, r1, #1
 800c9c2:	463d      	mov	r5, r7
 800c9c4:	d9ee      	bls.n	800c9a4 <__utoa+0x40>
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	545a      	strb	r2, [r3, r1]
 800c9ca:	1919      	adds	r1, r3, r4
 800c9cc:	1aa5      	subs	r5, r4, r2
 800c9ce:	42aa      	cmp	r2, r5
 800c9d0:	dae3      	bge.n	800c99a <__utoa+0x36>
 800c9d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c9d6:	780e      	ldrb	r6, [r1, #0]
 800c9d8:	7006      	strb	r6, [r0, #0]
 800c9da:	3201      	adds	r2, #1
 800c9dc:	f801 5901 	strb.w	r5, [r1], #-1
 800c9e0:	e7f4      	b.n	800c9cc <__utoa+0x68>
 800c9e2:	bf00      	nop
 800c9e4:	080142e8 	.word	0x080142e8

0800c9e8 <__cvt>:
 800c9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ec:	ec55 4b10 	vmov	r4, r5, d0
 800c9f0:	2d00      	cmp	r5, #0
 800c9f2:	460e      	mov	r6, r1
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	462b      	mov	r3, r5
 800c9f8:	bfbb      	ittet	lt
 800c9fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c9fe:	461d      	movlt	r5, r3
 800ca00:	2300      	movge	r3, #0
 800ca02:	232d      	movlt	r3, #45	; 0x2d
 800ca04:	700b      	strb	r3, [r1, #0]
 800ca06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca0c:	4691      	mov	r9, r2
 800ca0e:	f023 0820 	bic.w	r8, r3, #32
 800ca12:	bfbc      	itt	lt
 800ca14:	4622      	movlt	r2, r4
 800ca16:	4614      	movlt	r4, r2
 800ca18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca1c:	d005      	beq.n	800ca2a <__cvt+0x42>
 800ca1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca22:	d100      	bne.n	800ca26 <__cvt+0x3e>
 800ca24:	3601      	adds	r6, #1
 800ca26:	2102      	movs	r1, #2
 800ca28:	e000      	b.n	800ca2c <__cvt+0x44>
 800ca2a:	2103      	movs	r1, #3
 800ca2c:	ab03      	add	r3, sp, #12
 800ca2e:	9301      	str	r3, [sp, #4]
 800ca30:	ab02      	add	r3, sp, #8
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	ec45 4b10 	vmov	d0, r4, r5
 800ca38:	4653      	mov	r3, sl
 800ca3a:	4632      	mov	r2, r6
 800ca3c:	f000 ff50 	bl	800d8e0 <_dtoa_r>
 800ca40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca44:	4607      	mov	r7, r0
 800ca46:	d102      	bne.n	800ca4e <__cvt+0x66>
 800ca48:	f019 0f01 	tst.w	r9, #1
 800ca4c:	d022      	beq.n	800ca94 <__cvt+0xac>
 800ca4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca52:	eb07 0906 	add.w	r9, r7, r6
 800ca56:	d110      	bne.n	800ca7a <__cvt+0x92>
 800ca58:	783b      	ldrb	r3, [r7, #0]
 800ca5a:	2b30      	cmp	r3, #48	; 0x30
 800ca5c:	d10a      	bne.n	800ca74 <__cvt+0x8c>
 800ca5e:	2200      	movs	r2, #0
 800ca60:	2300      	movs	r3, #0
 800ca62:	4620      	mov	r0, r4
 800ca64:	4629      	mov	r1, r5
 800ca66:	f7f4 f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca6a:	b918      	cbnz	r0, 800ca74 <__cvt+0x8c>
 800ca6c:	f1c6 0601 	rsb	r6, r6, #1
 800ca70:	f8ca 6000 	str.w	r6, [sl]
 800ca74:	f8da 3000 	ldr.w	r3, [sl]
 800ca78:	4499      	add	r9, r3
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7f4 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca86:	b108      	cbz	r0, 800ca8c <__cvt+0xa4>
 800ca88:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca8c:	2230      	movs	r2, #48	; 0x30
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	454b      	cmp	r3, r9
 800ca92:	d307      	bcc.n	800caa4 <__cvt+0xbc>
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca98:	1bdb      	subs	r3, r3, r7
 800ca9a:	4638      	mov	r0, r7
 800ca9c:	6013      	str	r3, [r2, #0]
 800ca9e:	b004      	add	sp, #16
 800caa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caa4:	1c59      	adds	r1, r3, #1
 800caa6:	9103      	str	r1, [sp, #12]
 800caa8:	701a      	strb	r2, [r3, #0]
 800caaa:	e7f0      	b.n	800ca8e <__cvt+0xa6>

0800caac <__exponent>:
 800caac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caae:	4603      	mov	r3, r0
 800cab0:	2900      	cmp	r1, #0
 800cab2:	bfb8      	it	lt
 800cab4:	4249      	neglt	r1, r1
 800cab6:	f803 2b02 	strb.w	r2, [r3], #2
 800caba:	bfb4      	ite	lt
 800cabc:	222d      	movlt	r2, #45	; 0x2d
 800cabe:	222b      	movge	r2, #43	; 0x2b
 800cac0:	2909      	cmp	r1, #9
 800cac2:	7042      	strb	r2, [r0, #1]
 800cac4:	dd2a      	ble.n	800cb1c <__exponent+0x70>
 800cac6:	f10d 0207 	add.w	r2, sp, #7
 800caca:	4617      	mov	r7, r2
 800cacc:	260a      	movs	r6, #10
 800cace:	4694      	mov	ip, r2
 800cad0:	fb91 f5f6 	sdiv	r5, r1, r6
 800cad4:	fb06 1415 	mls	r4, r6, r5, r1
 800cad8:	3430      	adds	r4, #48	; 0x30
 800cada:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cade:	460c      	mov	r4, r1
 800cae0:	2c63      	cmp	r4, #99	; 0x63
 800cae2:	f102 32ff 	add.w	r2, r2, #4294967295
 800cae6:	4629      	mov	r1, r5
 800cae8:	dcf1      	bgt.n	800cace <__exponent+0x22>
 800caea:	3130      	adds	r1, #48	; 0x30
 800caec:	f1ac 0402 	sub.w	r4, ip, #2
 800caf0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800caf4:	1c41      	adds	r1, r0, #1
 800caf6:	4622      	mov	r2, r4
 800caf8:	42ba      	cmp	r2, r7
 800cafa:	d30a      	bcc.n	800cb12 <__exponent+0x66>
 800cafc:	f10d 0209 	add.w	r2, sp, #9
 800cb00:	eba2 020c 	sub.w	r2, r2, ip
 800cb04:	42bc      	cmp	r4, r7
 800cb06:	bf88      	it	hi
 800cb08:	2200      	movhi	r2, #0
 800cb0a:	4413      	add	r3, r2
 800cb0c:	1a18      	subs	r0, r3, r0
 800cb0e:	b003      	add	sp, #12
 800cb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb12:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cb16:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cb1a:	e7ed      	b.n	800caf8 <__exponent+0x4c>
 800cb1c:	2330      	movs	r3, #48	; 0x30
 800cb1e:	3130      	adds	r1, #48	; 0x30
 800cb20:	7083      	strb	r3, [r0, #2]
 800cb22:	70c1      	strb	r1, [r0, #3]
 800cb24:	1d03      	adds	r3, r0, #4
 800cb26:	e7f1      	b.n	800cb0c <__exponent+0x60>

0800cb28 <_printf_float>:
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	ed2d 8b02 	vpush	{d8}
 800cb30:	b08d      	sub	sp, #52	; 0x34
 800cb32:	460c      	mov	r4, r1
 800cb34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb38:	4616      	mov	r6, r2
 800cb3a:	461f      	mov	r7, r3
 800cb3c:	4605      	mov	r5, r0
 800cb3e:	f000 fd43 	bl	800d5c8 <_localeconv_r>
 800cb42:	f8d0 a000 	ldr.w	sl, [r0]
 800cb46:	4650      	mov	r0, sl
 800cb48:	f7f3 fb92 	bl	8000270 <strlen>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	9305      	str	r3, [sp, #20]
 800cb54:	f8d8 3000 	ldr.w	r3, [r8]
 800cb58:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cb5c:	3307      	adds	r3, #7
 800cb5e:	f023 0307 	bic.w	r3, r3, #7
 800cb62:	f103 0208 	add.w	r2, r3, #8
 800cb66:	f8c8 2000 	str.w	r2, [r8]
 800cb6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb72:	9307      	str	r3, [sp, #28]
 800cb74:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb78:	ee08 0a10 	vmov	s16, r0
 800cb7c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cb80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb84:	4b9e      	ldr	r3, [pc, #632]	; (800ce00 <_printf_float+0x2d8>)
 800cb86:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8a:	f7f3 ffcf 	bl	8000b2c <__aeabi_dcmpun>
 800cb8e:	bb88      	cbnz	r0, 800cbf4 <_printf_float+0xcc>
 800cb90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb94:	4b9a      	ldr	r3, [pc, #616]	; (800ce00 <_printf_float+0x2d8>)
 800cb96:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9a:	f7f3 ffa9 	bl	8000af0 <__aeabi_dcmple>
 800cb9e:	bb48      	cbnz	r0, 800cbf4 <_printf_float+0xcc>
 800cba0:	2200      	movs	r2, #0
 800cba2:	2300      	movs	r3, #0
 800cba4:	4640      	mov	r0, r8
 800cba6:	4649      	mov	r1, r9
 800cba8:	f7f3 ff98 	bl	8000adc <__aeabi_dcmplt>
 800cbac:	b110      	cbz	r0, 800cbb4 <_printf_float+0x8c>
 800cbae:	232d      	movs	r3, #45	; 0x2d
 800cbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbb4:	4a93      	ldr	r2, [pc, #588]	; (800ce04 <_printf_float+0x2dc>)
 800cbb6:	4b94      	ldr	r3, [pc, #592]	; (800ce08 <_printf_float+0x2e0>)
 800cbb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cbbc:	bf94      	ite	ls
 800cbbe:	4690      	movls	r8, r2
 800cbc0:	4698      	movhi	r8, r3
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	6123      	str	r3, [r4, #16]
 800cbc6:	9b05      	ldr	r3, [sp, #20]
 800cbc8:	f023 0304 	bic.w	r3, r3, #4
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	f04f 0900 	mov.w	r9, #0
 800cbd2:	9700      	str	r7, [sp, #0]
 800cbd4:	4633      	mov	r3, r6
 800cbd6:	aa0b      	add	r2, sp, #44	; 0x2c
 800cbd8:	4621      	mov	r1, r4
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f000 f9da 	bl	800cf94 <_printf_common>
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	f040 8090 	bne.w	800cd06 <_printf_float+0x1de>
 800cbe6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbea:	b00d      	add	sp, #52	; 0x34
 800cbec:	ecbd 8b02 	vpop	{d8}
 800cbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf4:	4642      	mov	r2, r8
 800cbf6:	464b      	mov	r3, r9
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	f7f3 ff96 	bl	8000b2c <__aeabi_dcmpun>
 800cc00:	b140      	cbz	r0, 800cc14 <_printf_float+0xec>
 800cc02:	464b      	mov	r3, r9
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	bfbc      	itt	lt
 800cc08:	232d      	movlt	r3, #45	; 0x2d
 800cc0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc0e:	4a7f      	ldr	r2, [pc, #508]	; (800ce0c <_printf_float+0x2e4>)
 800cc10:	4b7f      	ldr	r3, [pc, #508]	; (800ce10 <_printf_float+0x2e8>)
 800cc12:	e7d1      	b.n	800cbb8 <_printf_float+0x90>
 800cc14:	6863      	ldr	r3, [r4, #4]
 800cc16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc1a:	9206      	str	r2, [sp, #24]
 800cc1c:	1c5a      	adds	r2, r3, #1
 800cc1e:	d13f      	bne.n	800cca0 <_printf_float+0x178>
 800cc20:	2306      	movs	r3, #6
 800cc22:	6063      	str	r3, [r4, #4]
 800cc24:	9b05      	ldr	r3, [sp, #20]
 800cc26:	6861      	ldr	r1, [r4, #4]
 800cc28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	9303      	str	r3, [sp, #12]
 800cc30:	ab0a      	add	r3, sp, #40	; 0x28
 800cc32:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cc36:	ab09      	add	r3, sp, #36	; 0x24
 800cc38:	ec49 8b10 	vmov	d0, r8, r9
 800cc3c:	9300      	str	r3, [sp, #0]
 800cc3e:	6022      	str	r2, [r4, #0]
 800cc40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc44:	4628      	mov	r0, r5
 800cc46:	f7ff fecf 	bl	800c9e8 <__cvt>
 800cc4a:	9b06      	ldr	r3, [sp, #24]
 800cc4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc4e:	2b47      	cmp	r3, #71	; 0x47
 800cc50:	4680      	mov	r8, r0
 800cc52:	d108      	bne.n	800cc66 <_printf_float+0x13e>
 800cc54:	1cc8      	adds	r0, r1, #3
 800cc56:	db02      	blt.n	800cc5e <_printf_float+0x136>
 800cc58:	6863      	ldr	r3, [r4, #4]
 800cc5a:	4299      	cmp	r1, r3
 800cc5c:	dd41      	ble.n	800cce2 <_printf_float+0x1ba>
 800cc5e:	f1ab 0302 	sub.w	r3, fp, #2
 800cc62:	fa5f fb83 	uxtb.w	fp, r3
 800cc66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc6a:	d820      	bhi.n	800ccae <_printf_float+0x186>
 800cc6c:	3901      	subs	r1, #1
 800cc6e:	465a      	mov	r2, fp
 800cc70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cc74:	9109      	str	r1, [sp, #36]	; 0x24
 800cc76:	f7ff ff19 	bl	800caac <__exponent>
 800cc7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc7c:	1813      	adds	r3, r2, r0
 800cc7e:	2a01      	cmp	r2, #1
 800cc80:	4681      	mov	r9, r0
 800cc82:	6123      	str	r3, [r4, #16]
 800cc84:	dc02      	bgt.n	800cc8c <_printf_float+0x164>
 800cc86:	6822      	ldr	r2, [r4, #0]
 800cc88:	07d2      	lsls	r2, r2, #31
 800cc8a:	d501      	bpl.n	800cc90 <_printf_float+0x168>
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	6123      	str	r3, [r4, #16]
 800cc90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d09c      	beq.n	800cbd2 <_printf_float+0xaa>
 800cc98:	232d      	movs	r3, #45	; 0x2d
 800cc9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc9e:	e798      	b.n	800cbd2 <_printf_float+0xaa>
 800cca0:	9a06      	ldr	r2, [sp, #24]
 800cca2:	2a47      	cmp	r2, #71	; 0x47
 800cca4:	d1be      	bne.n	800cc24 <_printf_float+0xfc>
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1bc      	bne.n	800cc24 <_printf_float+0xfc>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e7b9      	b.n	800cc22 <_printf_float+0xfa>
 800ccae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ccb2:	d118      	bne.n	800cce6 <_printf_float+0x1be>
 800ccb4:	2900      	cmp	r1, #0
 800ccb6:	6863      	ldr	r3, [r4, #4]
 800ccb8:	dd0b      	ble.n	800ccd2 <_printf_float+0x1aa>
 800ccba:	6121      	str	r1, [r4, #16]
 800ccbc:	b913      	cbnz	r3, 800ccc4 <_printf_float+0x19c>
 800ccbe:	6822      	ldr	r2, [r4, #0]
 800ccc0:	07d0      	lsls	r0, r2, #31
 800ccc2:	d502      	bpl.n	800ccca <_printf_float+0x1a2>
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	440b      	add	r3, r1
 800ccc8:	6123      	str	r3, [r4, #16]
 800ccca:	65a1      	str	r1, [r4, #88]	; 0x58
 800cccc:	f04f 0900 	mov.w	r9, #0
 800ccd0:	e7de      	b.n	800cc90 <_printf_float+0x168>
 800ccd2:	b913      	cbnz	r3, 800ccda <_printf_float+0x1b2>
 800ccd4:	6822      	ldr	r2, [r4, #0]
 800ccd6:	07d2      	lsls	r2, r2, #31
 800ccd8:	d501      	bpl.n	800ccde <_printf_float+0x1b6>
 800ccda:	3302      	adds	r3, #2
 800ccdc:	e7f4      	b.n	800ccc8 <_printf_float+0x1a0>
 800ccde:	2301      	movs	r3, #1
 800cce0:	e7f2      	b.n	800ccc8 <_printf_float+0x1a0>
 800cce2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cce8:	4299      	cmp	r1, r3
 800ccea:	db05      	blt.n	800ccf8 <_printf_float+0x1d0>
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	6121      	str	r1, [r4, #16]
 800ccf0:	07d8      	lsls	r0, r3, #31
 800ccf2:	d5ea      	bpl.n	800ccca <_printf_float+0x1a2>
 800ccf4:	1c4b      	adds	r3, r1, #1
 800ccf6:	e7e7      	b.n	800ccc8 <_printf_float+0x1a0>
 800ccf8:	2900      	cmp	r1, #0
 800ccfa:	bfd4      	ite	le
 800ccfc:	f1c1 0202 	rsble	r2, r1, #2
 800cd00:	2201      	movgt	r2, #1
 800cd02:	4413      	add	r3, r2
 800cd04:	e7e0      	b.n	800ccc8 <_printf_float+0x1a0>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	055a      	lsls	r2, r3, #21
 800cd0a:	d407      	bmi.n	800cd1c <_printf_float+0x1f4>
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	4642      	mov	r2, r8
 800cd10:	4631      	mov	r1, r6
 800cd12:	4628      	mov	r0, r5
 800cd14:	47b8      	blx	r7
 800cd16:	3001      	adds	r0, #1
 800cd18:	d12c      	bne.n	800cd74 <_printf_float+0x24c>
 800cd1a:	e764      	b.n	800cbe6 <_printf_float+0xbe>
 800cd1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd20:	f240 80e0 	bls.w	800cee4 <_printf_float+0x3bc>
 800cd24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd28:	2200      	movs	r2, #0
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f7f3 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d034      	beq.n	800cd9e <_printf_float+0x276>
 800cd34:	4a37      	ldr	r2, [pc, #220]	; (800ce14 <_printf_float+0x2ec>)
 800cd36:	2301      	movs	r3, #1
 800cd38:	4631      	mov	r1, r6
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	47b8      	blx	r7
 800cd3e:	3001      	adds	r0, #1
 800cd40:	f43f af51 	beq.w	800cbe6 <_printf_float+0xbe>
 800cd44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	db02      	blt.n	800cd52 <_printf_float+0x22a>
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	07d8      	lsls	r0, r3, #31
 800cd50:	d510      	bpl.n	800cd74 <_printf_float+0x24c>
 800cd52:	ee18 3a10 	vmov	r3, s16
 800cd56:	4652      	mov	r2, sl
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	47b8      	blx	r7
 800cd5e:	3001      	adds	r0, #1
 800cd60:	f43f af41 	beq.w	800cbe6 <_printf_float+0xbe>
 800cd64:	f04f 0800 	mov.w	r8, #0
 800cd68:	f104 091a 	add.w	r9, r4, #26
 800cd6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	4543      	cmp	r3, r8
 800cd72:	dc09      	bgt.n	800cd88 <_printf_float+0x260>
 800cd74:	6823      	ldr	r3, [r4, #0]
 800cd76:	079b      	lsls	r3, r3, #30
 800cd78:	f100 8107 	bmi.w	800cf8a <_printf_float+0x462>
 800cd7c:	68e0      	ldr	r0, [r4, #12]
 800cd7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd80:	4298      	cmp	r0, r3
 800cd82:	bfb8      	it	lt
 800cd84:	4618      	movlt	r0, r3
 800cd86:	e730      	b.n	800cbea <_printf_float+0xc2>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	464a      	mov	r2, r9
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4628      	mov	r0, r5
 800cd90:	47b8      	blx	r7
 800cd92:	3001      	adds	r0, #1
 800cd94:	f43f af27 	beq.w	800cbe6 <_printf_float+0xbe>
 800cd98:	f108 0801 	add.w	r8, r8, #1
 800cd9c:	e7e6      	b.n	800cd6c <_printf_float+0x244>
 800cd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	dc39      	bgt.n	800ce18 <_printf_float+0x2f0>
 800cda4:	4a1b      	ldr	r2, [pc, #108]	; (800ce14 <_printf_float+0x2ec>)
 800cda6:	2301      	movs	r3, #1
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4628      	mov	r0, r5
 800cdac:	47b8      	blx	r7
 800cdae:	3001      	adds	r0, #1
 800cdb0:	f43f af19 	beq.w	800cbe6 <_printf_float+0xbe>
 800cdb4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	d102      	bne.n	800cdc2 <_printf_float+0x29a>
 800cdbc:	6823      	ldr	r3, [r4, #0]
 800cdbe:	07d9      	lsls	r1, r3, #31
 800cdc0:	d5d8      	bpl.n	800cd74 <_printf_float+0x24c>
 800cdc2:	ee18 3a10 	vmov	r3, s16
 800cdc6:	4652      	mov	r2, sl
 800cdc8:	4631      	mov	r1, r6
 800cdca:	4628      	mov	r0, r5
 800cdcc:	47b8      	blx	r7
 800cdce:	3001      	adds	r0, #1
 800cdd0:	f43f af09 	beq.w	800cbe6 <_printf_float+0xbe>
 800cdd4:	f04f 0900 	mov.w	r9, #0
 800cdd8:	f104 0a1a 	add.w	sl, r4, #26
 800cddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdde:	425b      	negs	r3, r3
 800cde0:	454b      	cmp	r3, r9
 800cde2:	dc01      	bgt.n	800cde8 <_printf_float+0x2c0>
 800cde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cde6:	e792      	b.n	800cd0e <_printf_float+0x1e6>
 800cde8:	2301      	movs	r3, #1
 800cdea:	4652      	mov	r2, sl
 800cdec:	4631      	mov	r1, r6
 800cdee:	4628      	mov	r0, r5
 800cdf0:	47b8      	blx	r7
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	f43f aef7 	beq.w	800cbe6 <_printf_float+0xbe>
 800cdf8:	f109 0901 	add.w	r9, r9, #1
 800cdfc:	e7ee      	b.n	800cddc <_printf_float+0x2b4>
 800cdfe:	bf00      	nop
 800ce00:	7fefffff 	.word	0x7fefffff
 800ce04:	0801430d 	.word	0x0801430d
 800ce08:	08014311 	.word	0x08014311
 800ce0c:	08014315 	.word	0x08014315
 800ce10:	08014319 	.word	0x08014319
 800ce14:	0801431d 	.word	0x0801431d
 800ce18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	bfa8      	it	ge
 800ce20:	461a      	movge	r2, r3
 800ce22:	2a00      	cmp	r2, #0
 800ce24:	4691      	mov	r9, r2
 800ce26:	dc37      	bgt.n	800ce98 <_printf_float+0x370>
 800ce28:	f04f 0b00 	mov.w	fp, #0
 800ce2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce30:	f104 021a 	add.w	r2, r4, #26
 800ce34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce36:	9305      	str	r3, [sp, #20]
 800ce38:	eba3 0309 	sub.w	r3, r3, r9
 800ce3c:	455b      	cmp	r3, fp
 800ce3e:	dc33      	bgt.n	800cea8 <_printf_float+0x380>
 800ce40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce44:	429a      	cmp	r2, r3
 800ce46:	db3b      	blt.n	800cec0 <_printf_float+0x398>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	07da      	lsls	r2, r3, #31
 800ce4c:	d438      	bmi.n	800cec0 <_printf_float+0x398>
 800ce4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce52:	eba2 0903 	sub.w	r9, r2, r3
 800ce56:	9b05      	ldr	r3, [sp, #20]
 800ce58:	1ad2      	subs	r2, r2, r3
 800ce5a:	4591      	cmp	r9, r2
 800ce5c:	bfa8      	it	ge
 800ce5e:	4691      	movge	r9, r2
 800ce60:	f1b9 0f00 	cmp.w	r9, #0
 800ce64:	dc35      	bgt.n	800ced2 <_printf_float+0x3aa>
 800ce66:	f04f 0800 	mov.w	r8, #0
 800ce6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce6e:	f104 0a1a 	add.w	sl, r4, #26
 800ce72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce76:	1a9b      	subs	r3, r3, r2
 800ce78:	eba3 0309 	sub.w	r3, r3, r9
 800ce7c:	4543      	cmp	r3, r8
 800ce7e:	f77f af79 	ble.w	800cd74 <_printf_float+0x24c>
 800ce82:	2301      	movs	r3, #1
 800ce84:	4652      	mov	r2, sl
 800ce86:	4631      	mov	r1, r6
 800ce88:	4628      	mov	r0, r5
 800ce8a:	47b8      	blx	r7
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	f43f aeaa 	beq.w	800cbe6 <_printf_float+0xbe>
 800ce92:	f108 0801 	add.w	r8, r8, #1
 800ce96:	e7ec      	b.n	800ce72 <_printf_float+0x34a>
 800ce98:	4613      	mov	r3, r2
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4642      	mov	r2, r8
 800ce9e:	4628      	mov	r0, r5
 800cea0:	47b8      	blx	r7
 800cea2:	3001      	adds	r0, #1
 800cea4:	d1c0      	bne.n	800ce28 <_printf_float+0x300>
 800cea6:	e69e      	b.n	800cbe6 <_printf_float+0xbe>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	4631      	mov	r1, r6
 800ceac:	4628      	mov	r0, r5
 800ceae:	9205      	str	r2, [sp, #20]
 800ceb0:	47b8      	blx	r7
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	f43f ae97 	beq.w	800cbe6 <_printf_float+0xbe>
 800ceb8:	9a05      	ldr	r2, [sp, #20]
 800ceba:	f10b 0b01 	add.w	fp, fp, #1
 800cebe:	e7b9      	b.n	800ce34 <_printf_float+0x30c>
 800cec0:	ee18 3a10 	vmov	r3, s16
 800cec4:	4652      	mov	r2, sl
 800cec6:	4631      	mov	r1, r6
 800cec8:	4628      	mov	r0, r5
 800ceca:	47b8      	blx	r7
 800cecc:	3001      	adds	r0, #1
 800cece:	d1be      	bne.n	800ce4e <_printf_float+0x326>
 800ced0:	e689      	b.n	800cbe6 <_printf_float+0xbe>
 800ced2:	9a05      	ldr	r2, [sp, #20]
 800ced4:	464b      	mov	r3, r9
 800ced6:	4442      	add	r2, r8
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	d1c1      	bne.n	800ce66 <_printf_float+0x33e>
 800cee2:	e680      	b.n	800cbe6 <_printf_float+0xbe>
 800cee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cee6:	2a01      	cmp	r2, #1
 800cee8:	dc01      	bgt.n	800ceee <_printf_float+0x3c6>
 800ceea:	07db      	lsls	r3, r3, #31
 800ceec:	d53a      	bpl.n	800cf64 <_printf_float+0x43c>
 800ceee:	2301      	movs	r3, #1
 800cef0:	4642      	mov	r2, r8
 800cef2:	4631      	mov	r1, r6
 800cef4:	4628      	mov	r0, r5
 800cef6:	47b8      	blx	r7
 800cef8:	3001      	adds	r0, #1
 800cefa:	f43f ae74 	beq.w	800cbe6 <_printf_float+0xbe>
 800cefe:	ee18 3a10 	vmov	r3, s16
 800cf02:	4652      	mov	r2, sl
 800cf04:	4631      	mov	r1, r6
 800cf06:	4628      	mov	r0, r5
 800cf08:	47b8      	blx	r7
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	f43f ae6b 	beq.w	800cbe6 <_printf_float+0xbe>
 800cf10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf14:	2200      	movs	r2, #0
 800cf16:	2300      	movs	r3, #0
 800cf18:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cf1c:	f7f3 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf20:	b9d8      	cbnz	r0, 800cf5a <_printf_float+0x432>
 800cf22:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cf26:	f108 0201 	add.w	r2, r8, #1
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	47b8      	blx	r7
 800cf30:	3001      	adds	r0, #1
 800cf32:	d10e      	bne.n	800cf52 <_printf_float+0x42a>
 800cf34:	e657      	b.n	800cbe6 <_printf_float+0xbe>
 800cf36:	2301      	movs	r3, #1
 800cf38:	4652      	mov	r2, sl
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	47b8      	blx	r7
 800cf40:	3001      	adds	r0, #1
 800cf42:	f43f ae50 	beq.w	800cbe6 <_printf_float+0xbe>
 800cf46:	f108 0801 	add.w	r8, r8, #1
 800cf4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	4543      	cmp	r3, r8
 800cf50:	dcf1      	bgt.n	800cf36 <_printf_float+0x40e>
 800cf52:	464b      	mov	r3, r9
 800cf54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf58:	e6da      	b.n	800cd10 <_printf_float+0x1e8>
 800cf5a:	f04f 0800 	mov.w	r8, #0
 800cf5e:	f104 0a1a 	add.w	sl, r4, #26
 800cf62:	e7f2      	b.n	800cf4a <_printf_float+0x422>
 800cf64:	2301      	movs	r3, #1
 800cf66:	4642      	mov	r2, r8
 800cf68:	e7df      	b.n	800cf2a <_printf_float+0x402>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	464a      	mov	r2, r9
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4628      	mov	r0, r5
 800cf72:	47b8      	blx	r7
 800cf74:	3001      	adds	r0, #1
 800cf76:	f43f ae36 	beq.w	800cbe6 <_printf_float+0xbe>
 800cf7a:	f108 0801 	add.w	r8, r8, #1
 800cf7e:	68e3      	ldr	r3, [r4, #12]
 800cf80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf82:	1a5b      	subs	r3, r3, r1
 800cf84:	4543      	cmp	r3, r8
 800cf86:	dcf0      	bgt.n	800cf6a <_printf_float+0x442>
 800cf88:	e6f8      	b.n	800cd7c <_printf_float+0x254>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	f104 0919 	add.w	r9, r4, #25
 800cf92:	e7f4      	b.n	800cf7e <_printf_float+0x456>

0800cf94 <_printf_common>:
 800cf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf98:	4616      	mov	r6, r2
 800cf9a:	4699      	mov	r9, r3
 800cf9c:	688a      	ldr	r2, [r1, #8]
 800cf9e:	690b      	ldr	r3, [r1, #16]
 800cfa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	bfb8      	it	lt
 800cfa8:	4613      	movlt	r3, r2
 800cfaa:	6033      	str	r3, [r6, #0]
 800cfac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfb0:	4607      	mov	r7, r0
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	b10a      	cbz	r2, 800cfba <_printf_common+0x26>
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	6033      	str	r3, [r6, #0]
 800cfba:	6823      	ldr	r3, [r4, #0]
 800cfbc:	0699      	lsls	r1, r3, #26
 800cfbe:	bf42      	ittt	mi
 800cfc0:	6833      	ldrmi	r3, [r6, #0]
 800cfc2:	3302      	addmi	r3, #2
 800cfc4:	6033      	strmi	r3, [r6, #0]
 800cfc6:	6825      	ldr	r5, [r4, #0]
 800cfc8:	f015 0506 	ands.w	r5, r5, #6
 800cfcc:	d106      	bne.n	800cfdc <_printf_common+0x48>
 800cfce:	f104 0a19 	add.w	sl, r4, #25
 800cfd2:	68e3      	ldr	r3, [r4, #12]
 800cfd4:	6832      	ldr	r2, [r6, #0]
 800cfd6:	1a9b      	subs	r3, r3, r2
 800cfd8:	42ab      	cmp	r3, r5
 800cfda:	dc26      	bgt.n	800d02a <_printf_common+0x96>
 800cfdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfe0:	1e13      	subs	r3, r2, #0
 800cfe2:	6822      	ldr	r2, [r4, #0]
 800cfe4:	bf18      	it	ne
 800cfe6:	2301      	movne	r3, #1
 800cfe8:	0692      	lsls	r2, r2, #26
 800cfea:	d42b      	bmi.n	800d044 <_printf_common+0xb0>
 800cfec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cff0:	4649      	mov	r1, r9
 800cff2:	4638      	mov	r0, r7
 800cff4:	47c0      	blx	r8
 800cff6:	3001      	adds	r0, #1
 800cff8:	d01e      	beq.n	800d038 <_printf_common+0xa4>
 800cffa:	6823      	ldr	r3, [r4, #0]
 800cffc:	6922      	ldr	r2, [r4, #16]
 800cffe:	f003 0306 	and.w	r3, r3, #6
 800d002:	2b04      	cmp	r3, #4
 800d004:	bf02      	ittt	eq
 800d006:	68e5      	ldreq	r5, [r4, #12]
 800d008:	6833      	ldreq	r3, [r6, #0]
 800d00a:	1aed      	subeq	r5, r5, r3
 800d00c:	68a3      	ldr	r3, [r4, #8]
 800d00e:	bf0c      	ite	eq
 800d010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d014:	2500      	movne	r5, #0
 800d016:	4293      	cmp	r3, r2
 800d018:	bfc4      	itt	gt
 800d01a:	1a9b      	subgt	r3, r3, r2
 800d01c:	18ed      	addgt	r5, r5, r3
 800d01e:	2600      	movs	r6, #0
 800d020:	341a      	adds	r4, #26
 800d022:	42b5      	cmp	r5, r6
 800d024:	d11a      	bne.n	800d05c <_printf_common+0xc8>
 800d026:	2000      	movs	r0, #0
 800d028:	e008      	b.n	800d03c <_printf_common+0xa8>
 800d02a:	2301      	movs	r3, #1
 800d02c:	4652      	mov	r2, sl
 800d02e:	4649      	mov	r1, r9
 800d030:	4638      	mov	r0, r7
 800d032:	47c0      	blx	r8
 800d034:	3001      	adds	r0, #1
 800d036:	d103      	bne.n	800d040 <_printf_common+0xac>
 800d038:	f04f 30ff 	mov.w	r0, #4294967295
 800d03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d040:	3501      	adds	r5, #1
 800d042:	e7c6      	b.n	800cfd2 <_printf_common+0x3e>
 800d044:	18e1      	adds	r1, r4, r3
 800d046:	1c5a      	adds	r2, r3, #1
 800d048:	2030      	movs	r0, #48	; 0x30
 800d04a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d04e:	4422      	add	r2, r4
 800d050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d058:	3302      	adds	r3, #2
 800d05a:	e7c7      	b.n	800cfec <_printf_common+0x58>
 800d05c:	2301      	movs	r3, #1
 800d05e:	4622      	mov	r2, r4
 800d060:	4649      	mov	r1, r9
 800d062:	4638      	mov	r0, r7
 800d064:	47c0      	blx	r8
 800d066:	3001      	adds	r0, #1
 800d068:	d0e6      	beq.n	800d038 <_printf_common+0xa4>
 800d06a:	3601      	adds	r6, #1
 800d06c:	e7d9      	b.n	800d022 <_printf_common+0x8e>
	...

0800d070 <_printf_i>:
 800d070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d074:	7e0f      	ldrb	r7, [r1, #24]
 800d076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d078:	2f78      	cmp	r7, #120	; 0x78
 800d07a:	4691      	mov	r9, r2
 800d07c:	4680      	mov	r8, r0
 800d07e:	460c      	mov	r4, r1
 800d080:	469a      	mov	sl, r3
 800d082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d086:	d807      	bhi.n	800d098 <_printf_i+0x28>
 800d088:	2f62      	cmp	r7, #98	; 0x62
 800d08a:	d80a      	bhi.n	800d0a2 <_printf_i+0x32>
 800d08c:	2f00      	cmp	r7, #0
 800d08e:	f000 80d4 	beq.w	800d23a <_printf_i+0x1ca>
 800d092:	2f58      	cmp	r7, #88	; 0x58
 800d094:	f000 80c0 	beq.w	800d218 <_printf_i+0x1a8>
 800d098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0a0:	e03a      	b.n	800d118 <_printf_i+0xa8>
 800d0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0a6:	2b15      	cmp	r3, #21
 800d0a8:	d8f6      	bhi.n	800d098 <_printf_i+0x28>
 800d0aa:	a101      	add	r1, pc, #4	; (adr r1, 800d0b0 <_printf_i+0x40>)
 800d0ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0b0:	0800d109 	.word	0x0800d109
 800d0b4:	0800d11d 	.word	0x0800d11d
 800d0b8:	0800d099 	.word	0x0800d099
 800d0bc:	0800d099 	.word	0x0800d099
 800d0c0:	0800d099 	.word	0x0800d099
 800d0c4:	0800d099 	.word	0x0800d099
 800d0c8:	0800d11d 	.word	0x0800d11d
 800d0cc:	0800d099 	.word	0x0800d099
 800d0d0:	0800d099 	.word	0x0800d099
 800d0d4:	0800d099 	.word	0x0800d099
 800d0d8:	0800d099 	.word	0x0800d099
 800d0dc:	0800d221 	.word	0x0800d221
 800d0e0:	0800d149 	.word	0x0800d149
 800d0e4:	0800d1db 	.word	0x0800d1db
 800d0e8:	0800d099 	.word	0x0800d099
 800d0ec:	0800d099 	.word	0x0800d099
 800d0f0:	0800d243 	.word	0x0800d243
 800d0f4:	0800d099 	.word	0x0800d099
 800d0f8:	0800d149 	.word	0x0800d149
 800d0fc:	0800d099 	.word	0x0800d099
 800d100:	0800d099 	.word	0x0800d099
 800d104:	0800d1e3 	.word	0x0800d1e3
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	1d1a      	adds	r2, r3, #4
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	602a      	str	r2, [r5, #0]
 800d110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d118:	2301      	movs	r3, #1
 800d11a:	e09f      	b.n	800d25c <_printf_i+0x1ec>
 800d11c:	6820      	ldr	r0, [r4, #0]
 800d11e:	682b      	ldr	r3, [r5, #0]
 800d120:	0607      	lsls	r7, r0, #24
 800d122:	f103 0104 	add.w	r1, r3, #4
 800d126:	6029      	str	r1, [r5, #0]
 800d128:	d501      	bpl.n	800d12e <_printf_i+0xbe>
 800d12a:	681e      	ldr	r6, [r3, #0]
 800d12c:	e003      	b.n	800d136 <_printf_i+0xc6>
 800d12e:	0646      	lsls	r6, r0, #25
 800d130:	d5fb      	bpl.n	800d12a <_printf_i+0xba>
 800d132:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d136:	2e00      	cmp	r6, #0
 800d138:	da03      	bge.n	800d142 <_printf_i+0xd2>
 800d13a:	232d      	movs	r3, #45	; 0x2d
 800d13c:	4276      	negs	r6, r6
 800d13e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d142:	485a      	ldr	r0, [pc, #360]	; (800d2ac <_printf_i+0x23c>)
 800d144:	230a      	movs	r3, #10
 800d146:	e012      	b.n	800d16e <_printf_i+0xfe>
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	6820      	ldr	r0, [r4, #0]
 800d14c:	1d19      	adds	r1, r3, #4
 800d14e:	6029      	str	r1, [r5, #0]
 800d150:	0605      	lsls	r5, r0, #24
 800d152:	d501      	bpl.n	800d158 <_printf_i+0xe8>
 800d154:	681e      	ldr	r6, [r3, #0]
 800d156:	e002      	b.n	800d15e <_printf_i+0xee>
 800d158:	0641      	lsls	r1, r0, #25
 800d15a:	d5fb      	bpl.n	800d154 <_printf_i+0xe4>
 800d15c:	881e      	ldrh	r6, [r3, #0]
 800d15e:	4853      	ldr	r0, [pc, #332]	; (800d2ac <_printf_i+0x23c>)
 800d160:	2f6f      	cmp	r7, #111	; 0x6f
 800d162:	bf0c      	ite	eq
 800d164:	2308      	moveq	r3, #8
 800d166:	230a      	movne	r3, #10
 800d168:	2100      	movs	r1, #0
 800d16a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d16e:	6865      	ldr	r5, [r4, #4]
 800d170:	60a5      	str	r5, [r4, #8]
 800d172:	2d00      	cmp	r5, #0
 800d174:	bfa2      	ittt	ge
 800d176:	6821      	ldrge	r1, [r4, #0]
 800d178:	f021 0104 	bicge.w	r1, r1, #4
 800d17c:	6021      	strge	r1, [r4, #0]
 800d17e:	b90e      	cbnz	r6, 800d184 <_printf_i+0x114>
 800d180:	2d00      	cmp	r5, #0
 800d182:	d04b      	beq.n	800d21c <_printf_i+0x1ac>
 800d184:	4615      	mov	r5, r2
 800d186:	fbb6 f1f3 	udiv	r1, r6, r3
 800d18a:	fb03 6711 	mls	r7, r3, r1, r6
 800d18e:	5dc7      	ldrb	r7, [r0, r7]
 800d190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d194:	4637      	mov	r7, r6
 800d196:	42bb      	cmp	r3, r7
 800d198:	460e      	mov	r6, r1
 800d19a:	d9f4      	bls.n	800d186 <_printf_i+0x116>
 800d19c:	2b08      	cmp	r3, #8
 800d19e:	d10b      	bne.n	800d1b8 <_printf_i+0x148>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	07de      	lsls	r6, r3, #31
 800d1a4:	d508      	bpl.n	800d1b8 <_printf_i+0x148>
 800d1a6:	6923      	ldr	r3, [r4, #16]
 800d1a8:	6861      	ldr	r1, [r4, #4]
 800d1aa:	4299      	cmp	r1, r3
 800d1ac:	bfde      	ittt	le
 800d1ae:	2330      	movle	r3, #48	; 0x30
 800d1b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d1b8:	1b52      	subs	r2, r2, r5
 800d1ba:	6122      	str	r2, [r4, #16]
 800d1bc:	f8cd a000 	str.w	sl, [sp]
 800d1c0:	464b      	mov	r3, r9
 800d1c2:	aa03      	add	r2, sp, #12
 800d1c4:	4621      	mov	r1, r4
 800d1c6:	4640      	mov	r0, r8
 800d1c8:	f7ff fee4 	bl	800cf94 <_printf_common>
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	d14a      	bne.n	800d266 <_printf_i+0x1f6>
 800d1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d4:	b004      	add	sp, #16
 800d1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	f043 0320 	orr.w	r3, r3, #32
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	4833      	ldr	r0, [pc, #204]	; (800d2b0 <_printf_i+0x240>)
 800d1e4:	2778      	movs	r7, #120	; 0x78
 800d1e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d1ea:	6823      	ldr	r3, [r4, #0]
 800d1ec:	6829      	ldr	r1, [r5, #0]
 800d1ee:	061f      	lsls	r7, r3, #24
 800d1f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1f4:	d402      	bmi.n	800d1fc <_printf_i+0x18c>
 800d1f6:	065f      	lsls	r7, r3, #25
 800d1f8:	bf48      	it	mi
 800d1fa:	b2b6      	uxthmi	r6, r6
 800d1fc:	07df      	lsls	r7, r3, #31
 800d1fe:	bf48      	it	mi
 800d200:	f043 0320 	orrmi.w	r3, r3, #32
 800d204:	6029      	str	r1, [r5, #0]
 800d206:	bf48      	it	mi
 800d208:	6023      	strmi	r3, [r4, #0]
 800d20a:	b91e      	cbnz	r6, 800d214 <_printf_i+0x1a4>
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	f023 0320 	bic.w	r3, r3, #32
 800d212:	6023      	str	r3, [r4, #0]
 800d214:	2310      	movs	r3, #16
 800d216:	e7a7      	b.n	800d168 <_printf_i+0xf8>
 800d218:	4824      	ldr	r0, [pc, #144]	; (800d2ac <_printf_i+0x23c>)
 800d21a:	e7e4      	b.n	800d1e6 <_printf_i+0x176>
 800d21c:	4615      	mov	r5, r2
 800d21e:	e7bd      	b.n	800d19c <_printf_i+0x12c>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	6826      	ldr	r6, [r4, #0]
 800d224:	6961      	ldr	r1, [r4, #20]
 800d226:	1d18      	adds	r0, r3, #4
 800d228:	6028      	str	r0, [r5, #0]
 800d22a:	0635      	lsls	r5, r6, #24
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	d501      	bpl.n	800d234 <_printf_i+0x1c4>
 800d230:	6019      	str	r1, [r3, #0]
 800d232:	e002      	b.n	800d23a <_printf_i+0x1ca>
 800d234:	0670      	lsls	r0, r6, #25
 800d236:	d5fb      	bpl.n	800d230 <_printf_i+0x1c0>
 800d238:	8019      	strh	r1, [r3, #0]
 800d23a:	2300      	movs	r3, #0
 800d23c:	6123      	str	r3, [r4, #16]
 800d23e:	4615      	mov	r5, r2
 800d240:	e7bc      	b.n	800d1bc <_printf_i+0x14c>
 800d242:	682b      	ldr	r3, [r5, #0]
 800d244:	1d1a      	adds	r2, r3, #4
 800d246:	602a      	str	r2, [r5, #0]
 800d248:	681d      	ldr	r5, [r3, #0]
 800d24a:	6862      	ldr	r2, [r4, #4]
 800d24c:	2100      	movs	r1, #0
 800d24e:	4628      	mov	r0, r5
 800d250:	f7f2 ffbe 	bl	80001d0 <memchr>
 800d254:	b108      	cbz	r0, 800d25a <_printf_i+0x1ea>
 800d256:	1b40      	subs	r0, r0, r5
 800d258:	6060      	str	r0, [r4, #4]
 800d25a:	6863      	ldr	r3, [r4, #4]
 800d25c:	6123      	str	r3, [r4, #16]
 800d25e:	2300      	movs	r3, #0
 800d260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d264:	e7aa      	b.n	800d1bc <_printf_i+0x14c>
 800d266:	6923      	ldr	r3, [r4, #16]
 800d268:	462a      	mov	r2, r5
 800d26a:	4649      	mov	r1, r9
 800d26c:	4640      	mov	r0, r8
 800d26e:	47d0      	blx	sl
 800d270:	3001      	adds	r0, #1
 800d272:	d0ad      	beq.n	800d1d0 <_printf_i+0x160>
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	079b      	lsls	r3, r3, #30
 800d278:	d413      	bmi.n	800d2a2 <_printf_i+0x232>
 800d27a:	68e0      	ldr	r0, [r4, #12]
 800d27c:	9b03      	ldr	r3, [sp, #12]
 800d27e:	4298      	cmp	r0, r3
 800d280:	bfb8      	it	lt
 800d282:	4618      	movlt	r0, r3
 800d284:	e7a6      	b.n	800d1d4 <_printf_i+0x164>
 800d286:	2301      	movs	r3, #1
 800d288:	4632      	mov	r2, r6
 800d28a:	4649      	mov	r1, r9
 800d28c:	4640      	mov	r0, r8
 800d28e:	47d0      	blx	sl
 800d290:	3001      	adds	r0, #1
 800d292:	d09d      	beq.n	800d1d0 <_printf_i+0x160>
 800d294:	3501      	adds	r5, #1
 800d296:	68e3      	ldr	r3, [r4, #12]
 800d298:	9903      	ldr	r1, [sp, #12]
 800d29a:	1a5b      	subs	r3, r3, r1
 800d29c:	42ab      	cmp	r3, r5
 800d29e:	dcf2      	bgt.n	800d286 <_printf_i+0x216>
 800d2a0:	e7eb      	b.n	800d27a <_printf_i+0x20a>
 800d2a2:	2500      	movs	r5, #0
 800d2a4:	f104 0619 	add.w	r6, r4, #25
 800d2a8:	e7f5      	b.n	800d296 <_printf_i+0x226>
 800d2aa:	bf00      	nop
 800d2ac:	0801431f 	.word	0x0801431f
 800d2b0:	08014330 	.word	0x08014330

0800d2b4 <std>:
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	b510      	push	{r4, lr}
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2c2:	6083      	str	r3, [r0, #8]
 800d2c4:	8181      	strh	r1, [r0, #12]
 800d2c6:	6643      	str	r3, [r0, #100]	; 0x64
 800d2c8:	81c2      	strh	r2, [r0, #14]
 800d2ca:	6183      	str	r3, [r0, #24]
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	2208      	movs	r2, #8
 800d2d0:	305c      	adds	r0, #92	; 0x5c
 800d2d2:	f000 f914 	bl	800d4fe <memset>
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	; (800d30c <std+0x58>)
 800d2d8:	6263      	str	r3, [r4, #36]	; 0x24
 800d2da:	4b0d      	ldr	r3, [pc, #52]	; (800d310 <std+0x5c>)
 800d2dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d2de:	4b0d      	ldr	r3, [pc, #52]	; (800d314 <std+0x60>)
 800d2e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d2e2:	4b0d      	ldr	r3, [pc, #52]	; (800d318 <std+0x64>)
 800d2e4:	6323      	str	r3, [r4, #48]	; 0x30
 800d2e6:	4b0d      	ldr	r3, [pc, #52]	; (800d31c <std+0x68>)
 800d2e8:	6224      	str	r4, [r4, #32]
 800d2ea:	429c      	cmp	r4, r3
 800d2ec:	d006      	beq.n	800d2fc <std+0x48>
 800d2ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d2f2:	4294      	cmp	r4, r2
 800d2f4:	d002      	beq.n	800d2fc <std+0x48>
 800d2f6:	33d0      	adds	r3, #208	; 0xd0
 800d2f8:	429c      	cmp	r4, r3
 800d2fa:	d105      	bne.n	800d308 <std+0x54>
 800d2fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d304:	f000 ba2a 	b.w	800d75c <__retarget_lock_init_recursive>
 800d308:	bd10      	pop	{r4, pc}
 800d30a:	bf00      	nop
 800d30c:	0800d479 	.word	0x0800d479
 800d310:	0800d49b 	.word	0x0800d49b
 800d314:	0800d4d3 	.word	0x0800d4d3
 800d318:	0800d4f7 	.word	0x0800d4f7
 800d31c:	200119f8 	.word	0x200119f8

0800d320 <stdio_exit_handler>:
 800d320:	4a02      	ldr	r2, [pc, #8]	; (800d32c <stdio_exit_handler+0xc>)
 800d322:	4903      	ldr	r1, [pc, #12]	; (800d330 <stdio_exit_handler+0x10>)
 800d324:	4803      	ldr	r0, [pc, #12]	; (800d334 <stdio_exit_handler+0x14>)
 800d326:	f000 b869 	b.w	800d3fc <_fwalk_sglue>
 800d32a:	bf00      	nop
 800d32c:	200005a8 	.word	0x200005a8
 800d330:	0800f179 	.word	0x0800f179
 800d334:	200005b4 	.word	0x200005b4

0800d338 <cleanup_stdio>:
 800d338:	6841      	ldr	r1, [r0, #4]
 800d33a:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <cleanup_stdio+0x34>)
 800d33c:	4299      	cmp	r1, r3
 800d33e:	b510      	push	{r4, lr}
 800d340:	4604      	mov	r4, r0
 800d342:	d001      	beq.n	800d348 <cleanup_stdio+0x10>
 800d344:	f001 ff18 	bl	800f178 <_fflush_r>
 800d348:	68a1      	ldr	r1, [r4, #8]
 800d34a:	4b09      	ldr	r3, [pc, #36]	; (800d370 <cleanup_stdio+0x38>)
 800d34c:	4299      	cmp	r1, r3
 800d34e:	d002      	beq.n	800d356 <cleanup_stdio+0x1e>
 800d350:	4620      	mov	r0, r4
 800d352:	f001 ff11 	bl	800f178 <_fflush_r>
 800d356:	68e1      	ldr	r1, [r4, #12]
 800d358:	4b06      	ldr	r3, [pc, #24]	; (800d374 <cleanup_stdio+0x3c>)
 800d35a:	4299      	cmp	r1, r3
 800d35c:	d004      	beq.n	800d368 <cleanup_stdio+0x30>
 800d35e:	4620      	mov	r0, r4
 800d360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d364:	f001 bf08 	b.w	800f178 <_fflush_r>
 800d368:	bd10      	pop	{r4, pc}
 800d36a:	bf00      	nop
 800d36c:	200119f8 	.word	0x200119f8
 800d370:	20011a60 	.word	0x20011a60
 800d374:	20011ac8 	.word	0x20011ac8

0800d378 <global_stdio_init.part.0>:
 800d378:	b510      	push	{r4, lr}
 800d37a:	4b0b      	ldr	r3, [pc, #44]	; (800d3a8 <global_stdio_init.part.0+0x30>)
 800d37c:	4c0b      	ldr	r4, [pc, #44]	; (800d3ac <global_stdio_init.part.0+0x34>)
 800d37e:	4a0c      	ldr	r2, [pc, #48]	; (800d3b0 <global_stdio_init.part.0+0x38>)
 800d380:	601a      	str	r2, [r3, #0]
 800d382:	4620      	mov	r0, r4
 800d384:	2200      	movs	r2, #0
 800d386:	2104      	movs	r1, #4
 800d388:	f7ff ff94 	bl	800d2b4 <std>
 800d38c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d390:	2201      	movs	r2, #1
 800d392:	2109      	movs	r1, #9
 800d394:	f7ff ff8e 	bl	800d2b4 <std>
 800d398:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d39c:	2202      	movs	r2, #2
 800d39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3a2:	2112      	movs	r1, #18
 800d3a4:	f7ff bf86 	b.w	800d2b4 <std>
 800d3a8:	20011b30 	.word	0x20011b30
 800d3ac:	200119f8 	.word	0x200119f8
 800d3b0:	0800d321 	.word	0x0800d321

0800d3b4 <__sfp_lock_acquire>:
 800d3b4:	4801      	ldr	r0, [pc, #4]	; (800d3bc <__sfp_lock_acquire+0x8>)
 800d3b6:	f000 b9d2 	b.w	800d75e <__retarget_lock_acquire_recursive>
 800d3ba:	bf00      	nop
 800d3bc:	20011b39 	.word	0x20011b39

0800d3c0 <__sfp_lock_release>:
 800d3c0:	4801      	ldr	r0, [pc, #4]	; (800d3c8 <__sfp_lock_release+0x8>)
 800d3c2:	f000 b9cd 	b.w	800d760 <__retarget_lock_release_recursive>
 800d3c6:	bf00      	nop
 800d3c8:	20011b39 	.word	0x20011b39

0800d3cc <__sinit>:
 800d3cc:	b510      	push	{r4, lr}
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	f7ff fff0 	bl	800d3b4 <__sfp_lock_acquire>
 800d3d4:	6a23      	ldr	r3, [r4, #32]
 800d3d6:	b11b      	cbz	r3, 800d3e0 <__sinit+0x14>
 800d3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3dc:	f7ff bff0 	b.w	800d3c0 <__sfp_lock_release>
 800d3e0:	4b04      	ldr	r3, [pc, #16]	; (800d3f4 <__sinit+0x28>)
 800d3e2:	6223      	str	r3, [r4, #32]
 800d3e4:	4b04      	ldr	r3, [pc, #16]	; (800d3f8 <__sinit+0x2c>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1f5      	bne.n	800d3d8 <__sinit+0xc>
 800d3ec:	f7ff ffc4 	bl	800d378 <global_stdio_init.part.0>
 800d3f0:	e7f2      	b.n	800d3d8 <__sinit+0xc>
 800d3f2:	bf00      	nop
 800d3f4:	0800d339 	.word	0x0800d339
 800d3f8:	20011b30 	.word	0x20011b30

0800d3fc <_fwalk_sglue>:
 800d3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d400:	4607      	mov	r7, r0
 800d402:	4688      	mov	r8, r1
 800d404:	4614      	mov	r4, r2
 800d406:	2600      	movs	r6, #0
 800d408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d40c:	f1b9 0901 	subs.w	r9, r9, #1
 800d410:	d505      	bpl.n	800d41e <_fwalk_sglue+0x22>
 800d412:	6824      	ldr	r4, [r4, #0]
 800d414:	2c00      	cmp	r4, #0
 800d416:	d1f7      	bne.n	800d408 <_fwalk_sglue+0xc>
 800d418:	4630      	mov	r0, r6
 800d41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d41e:	89ab      	ldrh	r3, [r5, #12]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d907      	bls.n	800d434 <_fwalk_sglue+0x38>
 800d424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d428:	3301      	adds	r3, #1
 800d42a:	d003      	beq.n	800d434 <_fwalk_sglue+0x38>
 800d42c:	4629      	mov	r1, r5
 800d42e:	4638      	mov	r0, r7
 800d430:	47c0      	blx	r8
 800d432:	4306      	orrs	r6, r0
 800d434:	3568      	adds	r5, #104	; 0x68
 800d436:	e7e9      	b.n	800d40c <_fwalk_sglue+0x10>

0800d438 <siprintf>:
 800d438:	b40e      	push	{r1, r2, r3}
 800d43a:	b500      	push	{lr}
 800d43c:	b09c      	sub	sp, #112	; 0x70
 800d43e:	ab1d      	add	r3, sp, #116	; 0x74
 800d440:	9002      	str	r0, [sp, #8]
 800d442:	9006      	str	r0, [sp, #24]
 800d444:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d448:	4809      	ldr	r0, [pc, #36]	; (800d470 <siprintf+0x38>)
 800d44a:	9107      	str	r1, [sp, #28]
 800d44c:	9104      	str	r1, [sp, #16]
 800d44e:	4909      	ldr	r1, [pc, #36]	; (800d474 <siprintf+0x3c>)
 800d450:	f853 2b04 	ldr.w	r2, [r3], #4
 800d454:	9105      	str	r1, [sp, #20]
 800d456:	6800      	ldr	r0, [r0, #0]
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	a902      	add	r1, sp, #8
 800d45c:	f001 fd08 	bl	800ee70 <_svfiprintf_r>
 800d460:	9b02      	ldr	r3, [sp, #8]
 800d462:	2200      	movs	r2, #0
 800d464:	701a      	strb	r2, [r3, #0]
 800d466:	b01c      	add	sp, #112	; 0x70
 800d468:	f85d eb04 	ldr.w	lr, [sp], #4
 800d46c:	b003      	add	sp, #12
 800d46e:	4770      	bx	lr
 800d470:	20000600 	.word	0x20000600
 800d474:	ffff0208 	.word	0xffff0208

0800d478 <__sread>:
 800d478:	b510      	push	{r4, lr}
 800d47a:	460c      	mov	r4, r1
 800d47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d480:	f000 f91e 	bl	800d6c0 <_read_r>
 800d484:	2800      	cmp	r0, #0
 800d486:	bfab      	itete	ge
 800d488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d48a:	89a3      	ldrhlt	r3, [r4, #12]
 800d48c:	181b      	addge	r3, r3, r0
 800d48e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d492:	bfac      	ite	ge
 800d494:	6563      	strge	r3, [r4, #84]	; 0x54
 800d496:	81a3      	strhlt	r3, [r4, #12]
 800d498:	bd10      	pop	{r4, pc}

0800d49a <__swrite>:
 800d49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d49e:	461f      	mov	r7, r3
 800d4a0:	898b      	ldrh	r3, [r1, #12]
 800d4a2:	05db      	lsls	r3, r3, #23
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	460c      	mov	r4, r1
 800d4a8:	4616      	mov	r6, r2
 800d4aa:	d505      	bpl.n	800d4b8 <__swrite+0x1e>
 800d4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f000 f8f2 	bl	800d69c <_lseek_r>
 800d4b8:	89a3      	ldrh	r3, [r4, #12]
 800d4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4c2:	81a3      	strh	r3, [r4, #12]
 800d4c4:	4632      	mov	r2, r6
 800d4c6:	463b      	mov	r3, r7
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ce:	f000 b909 	b.w	800d6e4 <_write_r>

0800d4d2 <__sseek>:
 800d4d2:	b510      	push	{r4, lr}
 800d4d4:	460c      	mov	r4, r1
 800d4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4da:	f000 f8df 	bl	800d69c <_lseek_r>
 800d4de:	1c43      	adds	r3, r0, #1
 800d4e0:	89a3      	ldrh	r3, [r4, #12]
 800d4e2:	bf15      	itete	ne
 800d4e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4ee:	81a3      	strheq	r3, [r4, #12]
 800d4f0:	bf18      	it	ne
 800d4f2:	81a3      	strhne	r3, [r4, #12]
 800d4f4:	bd10      	pop	{r4, pc}

0800d4f6 <__sclose>:
 800d4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4fa:	f000 b869 	b.w	800d5d0 <_close_r>

0800d4fe <memset>:
 800d4fe:	4402      	add	r2, r0
 800d500:	4603      	mov	r3, r0
 800d502:	4293      	cmp	r3, r2
 800d504:	d100      	bne.n	800d508 <memset+0xa>
 800d506:	4770      	bx	lr
 800d508:	f803 1b01 	strb.w	r1, [r3], #1
 800d50c:	e7f9      	b.n	800d502 <memset+0x4>
	...

0800d510 <strtok>:
 800d510:	4b16      	ldr	r3, [pc, #88]	; (800d56c <strtok+0x5c>)
 800d512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d514:	681e      	ldr	r6, [r3, #0]
 800d516:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800d518:	4605      	mov	r5, r0
 800d51a:	b9fc      	cbnz	r4, 800d55c <strtok+0x4c>
 800d51c:	2050      	movs	r0, #80	; 0x50
 800d51e:	9101      	str	r1, [sp, #4]
 800d520:	f001 f81c 	bl	800e55c <malloc>
 800d524:	9901      	ldr	r1, [sp, #4]
 800d526:	6470      	str	r0, [r6, #68]	; 0x44
 800d528:	4602      	mov	r2, r0
 800d52a:	b920      	cbnz	r0, 800d536 <strtok+0x26>
 800d52c:	4b10      	ldr	r3, [pc, #64]	; (800d570 <strtok+0x60>)
 800d52e:	4811      	ldr	r0, [pc, #68]	; (800d574 <strtok+0x64>)
 800d530:	215b      	movs	r1, #91	; 0x5b
 800d532:	f000 f92d 	bl	800d790 <__assert_func>
 800d536:	e9c0 4400 	strd	r4, r4, [r0]
 800d53a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d53e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d542:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d546:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d54a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d54e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d552:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d556:	6184      	str	r4, [r0, #24]
 800d558:	7704      	strb	r4, [r0, #28]
 800d55a:	6244      	str	r4, [r0, #36]	; 0x24
 800d55c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800d55e:	2301      	movs	r3, #1
 800d560:	4628      	mov	r0, r5
 800d562:	b002      	add	sp, #8
 800d564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d568:	f000 b806 	b.w	800d578 <__strtok_r>
 800d56c:	20000600 	.word	0x20000600
 800d570:	08014341 	.word	0x08014341
 800d574:	08014358 	.word	0x08014358

0800d578 <__strtok_r>:
 800d578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d57a:	b908      	cbnz	r0, 800d580 <__strtok_r+0x8>
 800d57c:	6810      	ldr	r0, [r2, #0]
 800d57e:	b188      	cbz	r0, 800d5a4 <__strtok_r+0x2c>
 800d580:	4604      	mov	r4, r0
 800d582:	4620      	mov	r0, r4
 800d584:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d588:	460f      	mov	r7, r1
 800d58a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d58e:	b91e      	cbnz	r6, 800d598 <__strtok_r+0x20>
 800d590:	b965      	cbnz	r5, 800d5ac <__strtok_r+0x34>
 800d592:	6015      	str	r5, [r2, #0]
 800d594:	4628      	mov	r0, r5
 800d596:	e005      	b.n	800d5a4 <__strtok_r+0x2c>
 800d598:	42b5      	cmp	r5, r6
 800d59a:	d1f6      	bne.n	800d58a <__strtok_r+0x12>
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1f0      	bne.n	800d582 <__strtok_r+0xa>
 800d5a0:	6014      	str	r4, [r2, #0]
 800d5a2:	7003      	strb	r3, [r0, #0]
 800d5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5a6:	461c      	mov	r4, r3
 800d5a8:	e00c      	b.n	800d5c4 <__strtok_r+0x4c>
 800d5aa:	b915      	cbnz	r5, 800d5b2 <__strtok_r+0x3a>
 800d5ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d5b0:	460e      	mov	r6, r1
 800d5b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d5b6:	42ab      	cmp	r3, r5
 800d5b8:	d1f7      	bne.n	800d5aa <__strtok_r+0x32>
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0f3      	beq.n	800d5a6 <__strtok_r+0x2e>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d5c4:	6014      	str	r4, [r2, #0]
 800d5c6:	e7ed      	b.n	800d5a4 <__strtok_r+0x2c>

0800d5c8 <_localeconv_r>:
 800d5c8:	4800      	ldr	r0, [pc, #0]	; (800d5cc <_localeconv_r+0x4>)
 800d5ca:	4770      	bx	lr
 800d5cc:	200006f4 	.word	0x200006f4

0800d5d0 <_close_r>:
 800d5d0:	b538      	push	{r3, r4, r5, lr}
 800d5d2:	4d06      	ldr	r5, [pc, #24]	; (800d5ec <_close_r+0x1c>)
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	4608      	mov	r0, r1
 800d5da:	602b      	str	r3, [r5, #0]
 800d5dc:	f7f6 fc0f 	bl	8003dfe <_close>
 800d5e0:	1c43      	adds	r3, r0, #1
 800d5e2:	d102      	bne.n	800d5ea <_close_r+0x1a>
 800d5e4:	682b      	ldr	r3, [r5, #0]
 800d5e6:	b103      	cbz	r3, 800d5ea <_close_r+0x1a>
 800d5e8:	6023      	str	r3, [r4, #0]
 800d5ea:	bd38      	pop	{r3, r4, r5, pc}
 800d5ec:	20011b34 	.word	0x20011b34

0800d5f0 <_reclaim_reent>:
 800d5f0:	4b29      	ldr	r3, [pc, #164]	; (800d698 <_reclaim_reent+0xa8>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4283      	cmp	r3, r0
 800d5f6:	b570      	push	{r4, r5, r6, lr}
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	d04b      	beq.n	800d694 <_reclaim_reent+0xa4>
 800d5fc:	69c3      	ldr	r3, [r0, #28]
 800d5fe:	b143      	cbz	r3, 800d612 <_reclaim_reent+0x22>
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d144      	bne.n	800d690 <_reclaim_reent+0xa0>
 800d606:	69e3      	ldr	r3, [r4, #28]
 800d608:	6819      	ldr	r1, [r3, #0]
 800d60a:	b111      	cbz	r1, 800d612 <_reclaim_reent+0x22>
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 ff59 	bl	800e4c4 <_free_r>
 800d612:	6961      	ldr	r1, [r4, #20]
 800d614:	b111      	cbz	r1, 800d61c <_reclaim_reent+0x2c>
 800d616:	4620      	mov	r0, r4
 800d618:	f000 ff54 	bl	800e4c4 <_free_r>
 800d61c:	69e1      	ldr	r1, [r4, #28]
 800d61e:	b111      	cbz	r1, 800d626 <_reclaim_reent+0x36>
 800d620:	4620      	mov	r0, r4
 800d622:	f000 ff4f 	bl	800e4c4 <_free_r>
 800d626:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d628:	b111      	cbz	r1, 800d630 <_reclaim_reent+0x40>
 800d62a:	4620      	mov	r0, r4
 800d62c:	f000 ff4a 	bl	800e4c4 <_free_r>
 800d630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d632:	b111      	cbz	r1, 800d63a <_reclaim_reent+0x4a>
 800d634:	4620      	mov	r0, r4
 800d636:	f000 ff45 	bl	800e4c4 <_free_r>
 800d63a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d63c:	b111      	cbz	r1, 800d644 <_reclaim_reent+0x54>
 800d63e:	4620      	mov	r0, r4
 800d640:	f000 ff40 	bl	800e4c4 <_free_r>
 800d644:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d646:	b111      	cbz	r1, 800d64e <_reclaim_reent+0x5e>
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 ff3b 	bl	800e4c4 <_free_r>
 800d64e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d650:	b111      	cbz	r1, 800d658 <_reclaim_reent+0x68>
 800d652:	4620      	mov	r0, r4
 800d654:	f000 ff36 	bl	800e4c4 <_free_r>
 800d658:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d65a:	b111      	cbz	r1, 800d662 <_reclaim_reent+0x72>
 800d65c:	4620      	mov	r0, r4
 800d65e:	f000 ff31 	bl	800e4c4 <_free_r>
 800d662:	6a23      	ldr	r3, [r4, #32]
 800d664:	b1b3      	cbz	r3, 800d694 <_reclaim_reent+0xa4>
 800d666:	4620      	mov	r0, r4
 800d668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d66c:	4718      	bx	r3
 800d66e:	5949      	ldr	r1, [r1, r5]
 800d670:	b941      	cbnz	r1, 800d684 <_reclaim_reent+0x94>
 800d672:	3504      	adds	r5, #4
 800d674:	69e3      	ldr	r3, [r4, #28]
 800d676:	2d80      	cmp	r5, #128	; 0x80
 800d678:	68d9      	ldr	r1, [r3, #12]
 800d67a:	d1f8      	bne.n	800d66e <_reclaim_reent+0x7e>
 800d67c:	4620      	mov	r0, r4
 800d67e:	f000 ff21 	bl	800e4c4 <_free_r>
 800d682:	e7c0      	b.n	800d606 <_reclaim_reent+0x16>
 800d684:	680e      	ldr	r6, [r1, #0]
 800d686:	4620      	mov	r0, r4
 800d688:	f000 ff1c 	bl	800e4c4 <_free_r>
 800d68c:	4631      	mov	r1, r6
 800d68e:	e7ef      	b.n	800d670 <_reclaim_reent+0x80>
 800d690:	2500      	movs	r5, #0
 800d692:	e7ef      	b.n	800d674 <_reclaim_reent+0x84>
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	bf00      	nop
 800d698:	20000600 	.word	0x20000600

0800d69c <_lseek_r>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4d07      	ldr	r5, [pc, #28]	; (800d6bc <_lseek_r+0x20>)
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	4608      	mov	r0, r1
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	602a      	str	r2, [r5, #0]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	f7f6 fbce 	bl	8003e4c <_lseek>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d102      	bne.n	800d6ba <_lseek_r+0x1e>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	b103      	cbz	r3, 800d6ba <_lseek_r+0x1e>
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	20011b34 	.word	0x20011b34

0800d6c0 <_read_r>:
 800d6c0:	b538      	push	{r3, r4, r5, lr}
 800d6c2:	4d07      	ldr	r5, [pc, #28]	; (800d6e0 <_read_r+0x20>)
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	4608      	mov	r0, r1
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	602a      	str	r2, [r5, #0]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	f7f6 fb5c 	bl	8003d8c <_read>
 800d6d4:	1c43      	adds	r3, r0, #1
 800d6d6:	d102      	bne.n	800d6de <_read_r+0x1e>
 800d6d8:	682b      	ldr	r3, [r5, #0]
 800d6da:	b103      	cbz	r3, 800d6de <_read_r+0x1e>
 800d6dc:	6023      	str	r3, [r4, #0]
 800d6de:	bd38      	pop	{r3, r4, r5, pc}
 800d6e0:	20011b34 	.word	0x20011b34

0800d6e4 <_write_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	4d07      	ldr	r5, [pc, #28]	; (800d704 <_write_r+0x20>)
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	4608      	mov	r0, r1
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	602a      	str	r2, [r5, #0]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	f7f6 fb67 	bl	8003dc6 <_write>
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	d102      	bne.n	800d702 <_write_r+0x1e>
 800d6fc:	682b      	ldr	r3, [r5, #0]
 800d6fe:	b103      	cbz	r3, 800d702 <_write_r+0x1e>
 800d700:	6023      	str	r3, [r4, #0]
 800d702:	bd38      	pop	{r3, r4, r5, pc}
 800d704:	20011b34 	.word	0x20011b34

0800d708 <__errno>:
 800d708:	4b01      	ldr	r3, [pc, #4]	; (800d710 <__errno+0x8>)
 800d70a:	6818      	ldr	r0, [r3, #0]
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	20000600 	.word	0x20000600

0800d714 <__libc_init_array>:
 800d714:	b570      	push	{r4, r5, r6, lr}
 800d716:	4d0d      	ldr	r5, [pc, #52]	; (800d74c <__libc_init_array+0x38>)
 800d718:	4c0d      	ldr	r4, [pc, #52]	; (800d750 <__libc_init_array+0x3c>)
 800d71a:	1b64      	subs	r4, r4, r5
 800d71c:	10a4      	asrs	r4, r4, #2
 800d71e:	2600      	movs	r6, #0
 800d720:	42a6      	cmp	r6, r4
 800d722:	d109      	bne.n	800d738 <__libc_init_array+0x24>
 800d724:	4d0b      	ldr	r5, [pc, #44]	; (800d754 <__libc_init_array+0x40>)
 800d726:	4c0c      	ldr	r4, [pc, #48]	; (800d758 <__libc_init_array+0x44>)
 800d728:	f002 f89e 	bl	800f868 <_init>
 800d72c:	1b64      	subs	r4, r4, r5
 800d72e:	10a4      	asrs	r4, r4, #2
 800d730:	2600      	movs	r6, #0
 800d732:	42a6      	cmp	r6, r4
 800d734:	d105      	bne.n	800d742 <__libc_init_array+0x2e>
 800d736:	bd70      	pop	{r4, r5, r6, pc}
 800d738:	f855 3b04 	ldr.w	r3, [r5], #4
 800d73c:	4798      	blx	r3
 800d73e:	3601      	adds	r6, #1
 800d740:	e7ee      	b.n	800d720 <__libc_init_array+0xc>
 800d742:	f855 3b04 	ldr.w	r3, [r5], #4
 800d746:	4798      	blx	r3
 800d748:	3601      	adds	r6, #1
 800d74a:	e7f2      	b.n	800d732 <__libc_init_array+0x1e>
 800d74c:	080146e0 	.word	0x080146e0
 800d750:	080146e0 	.word	0x080146e0
 800d754:	080146e0 	.word	0x080146e0
 800d758:	080146e4 	.word	0x080146e4

0800d75c <__retarget_lock_init_recursive>:
 800d75c:	4770      	bx	lr

0800d75e <__retarget_lock_acquire_recursive>:
 800d75e:	4770      	bx	lr

0800d760 <__retarget_lock_release_recursive>:
 800d760:	4770      	bx	lr

0800d762 <strcpy>:
 800d762:	4603      	mov	r3, r0
 800d764:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d768:	f803 2b01 	strb.w	r2, [r3], #1
 800d76c:	2a00      	cmp	r2, #0
 800d76e:	d1f9      	bne.n	800d764 <strcpy+0x2>
 800d770:	4770      	bx	lr

0800d772 <memcpy>:
 800d772:	440a      	add	r2, r1
 800d774:	4291      	cmp	r1, r2
 800d776:	f100 33ff 	add.w	r3, r0, #4294967295
 800d77a:	d100      	bne.n	800d77e <memcpy+0xc>
 800d77c:	4770      	bx	lr
 800d77e:	b510      	push	{r4, lr}
 800d780:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d784:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d788:	4291      	cmp	r1, r2
 800d78a:	d1f9      	bne.n	800d780 <memcpy+0xe>
 800d78c:	bd10      	pop	{r4, pc}
	...

0800d790 <__assert_func>:
 800d790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d792:	4614      	mov	r4, r2
 800d794:	461a      	mov	r2, r3
 800d796:	4b09      	ldr	r3, [pc, #36]	; (800d7bc <__assert_func+0x2c>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4605      	mov	r5, r0
 800d79c:	68d8      	ldr	r0, [r3, #12]
 800d79e:	b14c      	cbz	r4, 800d7b4 <__assert_func+0x24>
 800d7a0:	4b07      	ldr	r3, [pc, #28]	; (800d7c0 <__assert_func+0x30>)
 800d7a2:	9100      	str	r1, [sp, #0]
 800d7a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7a8:	4906      	ldr	r1, [pc, #24]	; (800d7c4 <__assert_func+0x34>)
 800d7aa:	462b      	mov	r3, r5
 800d7ac:	f001 fd0c 	bl	800f1c8 <fiprintf>
 800d7b0:	f001 fddc 	bl	800f36c <abort>
 800d7b4:	4b04      	ldr	r3, [pc, #16]	; (800d7c8 <__assert_func+0x38>)
 800d7b6:	461c      	mov	r4, r3
 800d7b8:	e7f3      	b.n	800d7a2 <__assert_func+0x12>
 800d7ba:	bf00      	nop
 800d7bc:	20000600 	.word	0x20000600
 800d7c0:	080143b2 	.word	0x080143b2
 800d7c4:	080143bf 	.word	0x080143bf
 800d7c8:	080143ed 	.word	0x080143ed

0800d7cc <quorem>:
 800d7cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	6903      	ldr	r3, [r0, #16]
 800d7d2:	690c      	ldr	r4, [r1, #16]
 800d7d4:	42a3      	cmp	r3, r4
 800d7d6:	4607      	mov	r7, r0
 800d7d8:	db7e      	blt.n	800d8d8 <quorem+0x10c>
 800d7da:	3c01      	subs	r4, #1
 800d7dc:	f101 0814 	add.w	r8, r1, #20
 800d7e0:	f100 0514 	add.w	r5, r0, #20
 800d7e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800d802:	d331      	bcc.n	800d868 <quorem+0x9c>
 800d804:	f04f 0e00 	mov.w	lr, #0
 800d808:	4640      	mov	r0, r8
 800d80a:	46ac      	mov	ip, r5
 800d80c:	46f2      	mov	sl, lr
 800d80e:	f850 2b04 	ldr.w	r2, [r0], #4
 800d812:	b293      	uxth	r3, r2
 800d814:	fb06 e303 	mla	r3, r6, r3, lr
 800d818:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d81c:	0c1a      	lsrs	r2, r3, #16
 800d81e:	b29b      	uxth	r3, r3
 800d820:	ebaa 0303 	sub.w	r3, sl, r3
 800d824:	f8dc a000 	ldr.w	sl, [ip]
 800d828:	fa13 f38a 	uxtah	r3, r3, sl
 800d82c:	fb06 220e 	mla	r2, r6, lr, r2
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	9b00      	ldr	r3, [sp, #0]
 800d834:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d838:	b292      	uxth	r2, r2
 800d83a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d83e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d842:	f8bd 3000 	ldrh.w	r3, [sp]
 800d846:	4581      	cmp	r9, r0
 800d848:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d84c:	f84c 3b04 	str.w	r3, [ip], #4
 800d850:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d854:	d2db      	bcs.n	800d80e <quorem+0x42>
 800d856:	f855 300b 	ldr.w	r3, [r5, fp]
 800d85a:	b92b      	cbnz	r3, 800d868 <quorem+0x9c>
 800d85c:	9b01      	ldr	r3, [sp, #4]
 800d85e:	3b04      	subs	r3, #4
 800d860:	429d      	cmp	r5, r3
 800d862:	461a      	mov	r2, r3
 800d864:	d32c      	bcc.n	800d8c0 <quorem+0xf4>
 800d866:	613c      	str	r4, [r7, #16]
 800d868:	4638      	mov	r0, r7
 800d86a:	f001 f9a7 	bl	800ebbc <__mcmp>
 800d86e:	2800      	cmp	r0, #0
 800d870:	db22      	blt.n	800d8b8 <quorem+0xec>
 800d872:	3601      	adds	r6, #1
 800d874:	4629      	mov	r1, r5
 800d876:	2000      	movs	r0, #0
 800d878:	f858 2b04 	ldr.w	r2, [r8], #4
 800d87c:	f8d1 c000 	ldr.w	ip, [r1]
 800d880:	b293      	uxth	r3, r2
 800d882:	1ac3      	subs	r3, r0, r3
 800d884:	0c12      	lsrs	r2, r2, #16
 800d886:	fa13 f38c 	uxtah	r3, r3, ip
 800d88a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d88e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d892:	b29b      	uxth	r3, r3
 800d894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d898:	45c1      	cmp	r9, r8
 800d89a:	f841 3b04 	str.w	r3, [r1], #4
 800d89e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d8a2:	d2e9      	bcs.n	800d878 <quorem+0xac>
 800d8a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8ac:	b922      	cbnz	r2, 800d8b8 <quorem+0xec>
 800d8ae:	3b04      	subs	r3, #4
 800d8b0:	429d      	cmp	r5, r3
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	d30a      	bcc.n	800d8cc <quorem+0x100>
 800d8b6:	613c      	str	r4, [r7, #16]
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	b003      	add	sp, #12
 800d8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c0:	6812      	ldr	r2, [r2, #0]
 800d8c2:	3b04      	subs	r3, #4
 800d8c4:	2a00      	cmp	r2, #0
 800d8c6:	d1ce      	bne.n	800d866 <quorem+0x9a>
 800d8c8:	3c01      	subs	r4, #1
 800d8ca:	e7c9      	b.n	800d860 <quorem+0x94>
 800d8cc:	6812      	ldr	r2, [r2, #0]
 800d8ce:	3b04      	subs	r3, #4
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	d1f0      	bne.n	800d8b6 <quorem+0xea>
 800d8d4:	3c01      	subs	r4, #1
 800d8d6:	e7eb      	b.n	800d8b0 <quorem+0xe4>
 800d8d8:	2000      	movs	r0, #0
 800d8da:	e7ee      	b.n	800d8ba <quorem+0xee>
 800d8dc:	0000      	movs	r0, r0
	...

0800d8e0 <_dtoa_r>:
 800d8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e4:	ed2d 8b04 	vpush	{d8-d9}
 800d8e8:	69c5      	ldr	r5, [r0, #28]
 800d8ea:	b093      	sub	sp, #76	; 0x4c
 800d8ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8f0:	ec57 6b10 	vmov	r6, r7, d0
 800d8f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d8f8:	9107      	str	r1, [sp, #28]
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	920a      	str	r2, [sp, #40]	; 0x28
 800d8fe:	930d      	str	r3, [sp, #52]	; 0x34
 800d900:	b975      	cbnz	r5, 800d920 <_dtoa_r+0x40>
 800d902:	2010      	movs	r0, #16
 800d904:	f000 fe2a 	bl	800e55c <malloc>
 800d908:	4602      	mov	r2, r0
 800d90a:	61e0      	str	r0, [r4, #28]
 800d90c:	b920      	cbnz	r0, 800d918 <_dtoa_r+0x38>
 800d90e:	4bae      	ldr	r3, [pc, #696]	; (800dbc8 <_dtoa_r+0x2e8>)
 800d910:	21ef      	movs	r1, #239	; 0xef
 800d912:	48ae      	ldr	r0, [pc, #696]	; (800dbcc <_dtoa_r+0x2ec>)
 800d914:	f7ff ff3c 	bl	800d790 <__assert_func>
 800d918:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d91c:	6005      	str	r5, [r0, #0]
 800d91e:	60c5      	str	r5, [r0, #12]
 800d920:	69e3      	ldr	r3, [r4, #28]
 800d922:	6819      	ldr	r1, [r3, #0]
 800d924:	b151      	cbz	r1, 800d93c <_dtoa_r+0x5c>
 800d926:	685a      	ldr	r2, [r3, #4]
 800d928:	604a      	str	r2, [r1, #4]
 800d92a:	2301      	movs	r3, #1
 800d92c:	4093      	lsls	r3, r2
 800d92e:	608b      	str	r3, [r1, #8]
 800d930:	4620      	mov	r0, r4
 800d932:	f000 ff07 	bl	800e744 <_Bfree>
 800d936:	69e3      	ldr	r3, [r4, #28]
 800d938:	2200      	movs	r2, #0
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	1e3b      	subs	r3, r7, #0
 800d93e:	bfbb      	ittet	lt
 800d940:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d944:	9303      	strlt	r3, [sp, #12]
 800d946:	2300      	movge	r3, #0
 800d948:	2201      	movlt	r2, #1
 800d94a:	bfac      	ite	ge
 800d94c:	f8c8 3000 	strge.w	r3, [r8]
 800d950:	f8c8 2000 	strlt.w	r2, [r8]
 800d954:	4b9e      	ldr	r3, [pc, #632]	; (800dbd0 <_dtoa_r+0x2f0>)
 800d956:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d95a:	ea33 0308 	bics.w	r3, r3, r8
 800d95e:	d11b      	bne.n	800d998 <_dtoa_r+0xb8>
 800d960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d962:	f242 730f 	movw	r3, #9999	; 0x270f
 800d966:	6013      	str	r3, [r2, #0]
 800d968:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d96c:	4333      	orrs	r3, r6
 800d96e:	f000 8593 	beq.w	800e498 <_dtoa_r+0xbb8>
 800d972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d974:	b963      	cbnz	r3, 800d990 <_dtoa_r+0xb0>
 800d976:	4b97      	ldr	r3, [pc, #604]	; (800dbd4 <_dtoa_r+0x2f4>)
 800d978:	e027      	b.n	800d9ca <_dtoa_r+0xea>
 800d97a:	4b97      	ldr	r3, [pc, #604]	; (800dbd8 <_dtoa_r+0x2f8>)
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	3308      	adds	r3, #8
 800d980:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d982:	6013      	str	r3, [r2, #0]
 800d984:	9800      	ldr	r0, [sp, #0]
 800d986:	b013      	add	sp, #76	; 0x4c
 800d988:	ecbd 8b04 	vpop	{d8-d9}
 800d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d990:	4b90      	ldr	r3, [pc, #576]	; (800dbd4 <_dtoa_r+0x2f4>)
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	3303      	adds	r3, #3
 800d996:	e7f3      	b.n	800d980 <_dtoa_r+0xa0>
 800d998:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d99c:	2200      	movs	r2, #0
 800d99e:	ec51 0b17 	vmov	r0, r1, d7
 800d9a2:	eeb0 8a47 	vmov.f32	s16, s14
 800d9a6:	eef0 8a67 	vmov.f32	s17, s15
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	f7f3 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9b0:	4681      	mov	r9, r0
 800d9b2:	b160      	cbz	r0, 800d9ce <_dtoa_r+0xee>
 800d9b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 8568 	beq.w	800e492 <_dtoa_r+0xbb2>
 800d9c2:	4b86      	ldr	r3, [pc, #536]	; (800dbdc <_dtoa_r+0x2fc>)
 800d9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d9c6:	6013      	str	r3, [r2, #0]
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	e7da      	b.n	800d984 <_dtoa_r+0xa4>
 800d9ce:	aa10      	add	r2, sp, #64	; 0x40
 800d9d0:	a911      	add	r1, sp, #68	; 0x44
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d8:	eef0 0a68 	vmov.f32	s1, s17
 800d9dc:	f001 f994 	bl	800ed08 <__d2b>
 800d9e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d9e4:	4682      	mov	sl, r0
 800d9e6:	2d00      	cmp	r5, #0
 800d9e8:	d07f      	beq.n	800daea <_dtoa_r+0x20a>
 800d9ea:	ee18 3a90 	vmov	r3, s17
 800d9ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d9f6:	ec51 0b18 	vmov	r0, r1, d8
 800d9fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d9fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800da02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800da06:	4619      	mov	r1, r3
 800da08:	2200      	movs	r2, #0
 800da0a:	4b75      	ldr	r3, [pc, #468]	; (800dbe0 <_dtoa_r+0x300>)
 800da0c:	f7f2 fc3c 	bl	8000288 <__aeabi_dsub>
 800da10:	a367      	add	r3, pc, #412	; (adr r3, 800dbb0 <_dtoa_r+0x2d0>)
 800da12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da16:	f7f2 fdef 	bl	80005f8 <__aeabi_dmul>
 800da1a:	a367      	add	r3, pc, #412	; (adr r3, 800dbb8 <_dtoa_r+0x2d8>)
 800da1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da20:	f7f2 fc34 	bl	800028c <__adddf3>
 800da24:	4606      	mov	r6, r0
 800da26:	4628      	mov	r0, r5
 800da28:	460f      	mov	r7, r1
 800da2a:	f7f2 fd7b 	bl	8000524 <__aeabi_i2d>
 800da2e:	a364      	add	r3, pc, #400	; (adr r3, 800dbc0 <_dtoa_r+0x2e0>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	f7f2 fde0 	bl	80005f8 <__aeabi_dmul>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4630      	mov	r0, r6
 800da3e:	4639      	mov	r1, r7
 800da40:	f7f2 fc24 	bl	800028c <__adddf3>
 800da44:	4606      	mov	r6, r0
 800da46:	460f      	mov	r7, r1
 800da48:	f7f3 f886 	bl	8000b58 <__aeabi_d2iz>
 800da4c:	2200      	movs	r2, #0
 800da4e:	4683      	mov	fp, r0
 800da50:	2300      	movs	r3, #0
 800da52:	4630      	mov	r0, r6
 800da54:	4639      	mov	r1, r7
 800da56:	f7f3 f841 	bl	8000adc <__aeabi_dcmplt>
 800da5a:	b148      	cbz	r0, 800da70 <_dtoa_r+0x190>
 800da5c:	4658      	mov	r0, fp
 800da5e:	f7f2 fd61 	bl	8000524 <__aeabi_i2d>
 800da62:	4632      	mov	r2, r6
 800da64:	463b      	mov	r3, r7
 800da66:	f7f3 f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 800da6a:	b908      	cbnz	r0, 800da70 <_dtoa_r+0x190>
 800da6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da70:	f1bb 0f16 	cmp.w	fp, #22
 800da74:	d857      	bhi.n	800db26 <_dtoa_r+0x246>
 800da76:	4b5b      	ldr	r3, [pc, #364]	; (800dbe4 <_dtoa_r+0x304>)
 800da78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	ec51 0b18 	vmov	r0, r1, d8
 800da84:	f7f3 f82a 	bl	8000adc <__aeabi_dcmplt>
 800da88:	2800      	cmp	r0, #0
 800da8a:	d04e      	beq.n	800db2a <_dtoa_r+0x24a>
 800da8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da90:	2300      	movs	r3, #0
 800da92:	930c      	str	r3, [sp, #48]	; 0x30
 800da94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da96:	1b5b      	subs	r3, r3, r5
 800da98:	1e5a      	subs	r2, r3, #1
 800da9a:	bf45      	ittet	mi
 800da9c:	f1c3 0301 	rsbmi	r3, r3, #1
 800daa0:	9305      	strmi	r3, [sp, #20]
 800daa2:	2300      	movpl	r3, #0
 800daa4:	2300      	movmi	r3, #0
 800daa6:	9206      	str	r2, [sp, #24]
 800daa8:	bf54      	ite	pl
 800daaa:	9305      	strpl	r3, [sp, #20]
 800daac:	9306      	strmi	r3, [sp, #24]
 800daae:	f1bb 0f00 	cmp.w	fp, #0
 800dab2:	db3c      	blt.n	800db2e <_dtoa_r+0x24e>
 800dab4:	9b06      	ldr	r3, [sp, #24]
 800dab6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800daba:	445b      	add	r3, fp
 800dabc:	9306      	str	r3, [sp, #24]
 800dabe:	2300      	movs	r3, #0
 800dac0:	9308      	str	r3, [sp, #32]
 800dac2:	9b07      	ldr	r3, [sp, #28]
 800dac4:	2b09      	cmp	r3, #9
 800dac6:	d868      	bhi.n	800db9a <_dtoa_r+0x2ba>
 800dac8:	2b05      	cmp	r3, #5
 800daca:	bfc4      	itt	gt
 800dacc:	3b04      	subgt	r3, #4
 800dace:	9307      	strgt	r3, [sp, #28]
 800dad0:	9b07      	ldr	r3, [sp, #28]
 800dad2:	f1a3 0302 	sub.w	r3, r3, #2
 800dad6:	bfcc      	ite	gt
 800dad8:	2500      	movgt	r5, #0
 800dada:	2501      	movle	r5, #1
 800dadc:	2b03      	cmp	r3, #3
 800dade:	f200 8085 	bhi.w	800dbec <_dtoa_r+0x30c>
 800dae2:	e8df f003 	tbb	[pc, r3]
 800dae6:	3b2e      	.short	0x3b2e
 800dae8:	5839      	.short	0x5839
 800daea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800daee:	441d      	add	r5, r3
 800daf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800daf4:	2b20      	cmp	r3, #32
 800daf6:	bfc1      	itttt	gt
 800daf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dafc:	fa08 f803 	lslgt.w	r8, r8, r3
 800db00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800db04:	fa26 f303 	lsrgt.w	r3, r6, r3
 800db08:	bfd6      	itet	le
 800db0a:	f1c3 0320 	rsble	r3, r3, #32
 800db0e:	ea48 0003 	orrgt.w	r0, r8, r3
 800db12:	fa06 f003 	lslle.w	r0, r6, r3
 800db16:	f7f2 fcf5 	bl	8000504 <__aeabi_ui2d>
 800db1a:	2201      	movs	r2, #1
 800db1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800db20:	3d01      	subs	r5, #1
 800db22:	920e      	str	r2, [sp, #56]	; 0x38
 800db24:	e76f      	b.n	800da06 <_dtoa_r+0x126>
 800db26:	2301      	movs	r3, #1
 800db28:	e7b3      	b.n	800da92 <_dtoa_r+0x1b2>
 800db2a:	900c      	str	r0, [sp, #48]	; 0x30
 800db2c:	e7b2      	b.n	800da94 <_dtoa_r+0x1b4>
 800db2e:	9b05      	ldr	r3, [sp, #20]
 800db30:	eba3 030b 	sub.w	r3, r3, fp
 800db34:	9305      	str	r3, [sp, #20]
 800db36:	f1cb 0300 	rsb	r3, fp, #0
 800db3a:	9308      	str	r3, [sp, #32]
 800db3c:	2300      	movs	r3, #0
 800db3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800db40:	e7bf      	b.n	800dac2 <_dtoa_r+0x1e2>
 800db42:	2300      	movs	r3, #0
 800db44:	9309      	str	r3, [sp, #36]	; 0x24
 800db46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db48:	2b00      	cmp	r3, #0
 800db4a:	dc52      	bgt.n	800dbf2 <_dtoa_r+0x312>
 800db4c:	2301      	movs	r3, #1
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	9304      	str	r3, [sp, #16]
 800db52:	461a      	mov	r2, r3
 800db54:	920a      	str	r2, [sp, #40]	; 0x28
 800db56:	e00b      	b.n	800db70 <_dtoa_r+0x290>
 800db58:	2301      	movs	r3, #1
 800db5a:	e7f3      	b.n	800db44 <_dtoa_r+0x264>
 800db5c:	2300      	movs	r3, #0
 800db5e:	9309      	str	r3, [sp, #36]	; 0x24
 800db60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db62:	445b      	add	r3, fp
 800db64:	9301      	str	r3, [sp, #4]
 800db66:	3301      	adds	r3, #1
 800db68:	2b01      	cmp	r3, #1
 800db6a:	9304      	str	r3, [sp, #16]
 800db6c:	bfb8      	it	lt
 800db6e:	2301      	movlt	r3, #1
 800db70:	69e0      	ldr	r0, [r4, #28]
 800db72:	2100      	movs	r1, #0
 800db74:	2204      	movs	r2, #4
 800db76:	f102 0614 	add.w	r6, r2, #20
 800db7a:	429e      	cmp	r6, r3
 800db7c:	d93d      	bls.n	800dbfa <_dtoa_r+0x31a>
 800db7e:	6041      	str	r1, [r0, #4]
 800db80:	4620      	mov	r0, r4
 800db82:	f000 fd9f 	bl	800e6c4 <_Balloc>
 800db86:	9000      	str	r0, [sp, #0]
 800db88:	2800      	cmp	r0, #0
 800db8a:	d139      	bne.n	800dc00 <_dtoa_r+0x320>
 800db8c:	4b16      	ldr	r3, [pc, #88]	; (800dbe8 <_dtoa_r+0x308>)
 800db8e:	4602      	mov	r2, r0
 800db90:	f240 11af 	movw	r1, #431	; 0x1af
 800db94:	e6bd      	b.n	800d912 <_dtoa_r+0x32>
 800db96:	2301      	movs	r3, #1
 800db98:	e7e1      	b.n	800db5e <_dtoa_r+0x27e>
 800db9a:	2501      	movs	r5, #1
 800db9c:	2300      	movs	r3, #0
 800db9e:	9307      	str	r3, [sp, #28]
 800dba0:	9509      	str	r5, [sp, #36]	; 0x24
 800dba2:	f04f 33ff 	mov.w	r3, #4294967295
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	9304      	str	r3, [sp, #16]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	2312      	movs	r3, #18
 800dbae:	e7d1      	b.n	800db54 <_dtoa_r+0x274>
 800dbb0:	636f4361 	.word	0x636f4361
 800dbb4:	3fd287a7 	.word	0x3fd287a7
 800dbb8:	8b60c8b3 	.word	0x8b60c8b3
 800dbbc:	3fc68a28 	.word	0x3fc68a28
 800dbc0:	509f79fb 	.word	0x509f79fb
 800dbc4:	3fd34413 	.word	0x3fd34413
 800dbc8:	08014341 	.word	0x08014341
 800dbcc:	080143fb 	.word	0x080143fb
 800dbd0:	7ff00000 	.word	0x7ff00000
 800dbd4:	080143f7 	.word	0x080143f7
 800dbd8:	080143ee 	.word	0x080143ee
 800dbdc:	0801431e 	.word	0x0801431e
 800dbe0:	3ff80000 	.word	0x3ff80000
 800dbe4:	080144e8 	.word	0x080144e8
 800dbe8:	08014453 	.word	0x08014453
 800dbec:	2301      	movs	r3, #1
 800dbee:	9309      	str	r3, [sp, #36]	; 0x24
 800dbf0:	e7d7      	b.n	800dba2 <_dtoa_r+0x2c2>
 800dbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbf4:	9301      	str	r3, [sp, #4]
 800dbf6:	9304      	str	r3, [sp, #16]
 800dbf8:	e7ba      	b.n	800db70 <_dtoa_r+0x290>
 800dbfa:	3101      	adds	r1, #1
 800dbfc:	0052      	lsls	r2, r2, #1
 800dbfe:	e7ba      	b.n	800db76 <_dtoa_r+0x296>
 800dc00:	69e3      	ldr	r3, [r4, #28]
 800dc02:	9a00      	ldr	r2, [sp, #0]
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	9b04      	ldr	r3, [sp, #16]
 800dc08:	2b0e      	cmp	r3, #14
 800dc0a:	f200 80a8 	bhi.w	800dd5e <_dtoa_r+0x47e>
 800dc0e:	2d00      	cmp	r5, #0
 800dc10:	f000 80a5 	beq.w	800dd5e <_dtoa_r+0x47e>
 800dc14:	f1bb 0f00 	cmp.w	fp, #0
 800dc18:	dd38      	ble.n	800dc8c <_dtoa_r+0x3ac>
 800dc1a:	4bc0      	ldr	r3, [pc, #768]	; (800df1c <_dtoa_r+0x63c>)
 800dc1c:	f00b 020f 	and.w	r2, fp, #15
 800dc20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dc28:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dc2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dc30:	d019      	beq.n	800dc66 <_dtoa_r+0x386>
 800dc32:	4bbb      	ldr	r3, [pc, #748]	; (800df20 <_dtoa_r+0x640>)
 800dc34:	ec51 0b18 	vmov	r0, r1, d8
 800dc38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc3c:	f7f2 fe06 	bl	800084c <__aeabi_ddiv>
 800dc40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc44:	f008 080f 	and.w	r8, r8, #15
 800dc48:	2503      	movs	r5, #3
 800dc4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800df20 <_dtoa_r+0x640>
 800dc4e:	f1b8 0f00 	cmp.w	r8, #0
 800dc52:	d10a      	bne.n	800dc6a <_dtoa_r+0x38a>
 800dc54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc58:	4632      	mov	r2, r6
 800dc5a:	463b      	mov	r3, r7
 800dc5c:	f7f2 fdf6 	bl	800084c <__aeabi_ddiv>
 800dc60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc64:	e02b      	b.n	800dcbe <_dtoa_r+0x3de>
 800dc66:	2502      	movs	r5, #2
 800dc68:	e7ef      	b.n	800dc4a <_dtoa_r+0x36a>
 800dc6a:	f018 0f01 	tst.w	r8, #1
 800dc6e:	d008      	beq.n	800dc82 <_dtoa_r+0x3a2>
 800dc70:	4630      	mov	r0, r6
 800dc72:	4639      	mov	r1, r7
 800dc74:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	3501      	adds	r5, #1
 800dc7e:	4606      	mov	r6, r0
 800dc80:	460f      	mov	r7, r1
 800dc82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dc86:	f109 0908 	add.w	r9, r9, #8
 800dc8a:	e7e0      	b.n	800dc4e <_dtoa_r+0x36e>
 800dc8c:	f000 809f 	beq.w	800ddce <_dtoa_r+0x4ee>
 800dc90:	f1cb 0600 	rsb	r6, fp, #0
 800dc94:	4ba1      	ldr	r3, [pc, #644]	; (800df1c <_dtoa_r+0x63c>)
 800dc96:	4fa2      	ldr	r7, [pc, #648]	; (800df20 <_dtoa_r+0x640>)
 800dc98:	f006 020f 	and.w	r2, r6, #15
 800dc9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	ec51 0b18 	vmov	r0, r1, d8
 800dca8:	f7f2 fca6 	bl	80005f8 <__aeabi_dmul>
 800dcac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcb0:	1136      	asrs	r6, r6, #4
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	2502      	movs	r5, #2
 800dcb6:	2e00      	cmp	r6, #0
 800dcb8:	d17e      	bne.n	800ddb8 <_dtoa_r+0x4d8>
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1d0      	bne.n	800dc60 <_dtoa_r+0x380>
 800dcbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f000 8084 	beq.w	800ddd2 <_dtoa_r+0x4f2>
 800dcca:	4b96      	ldr	r3, [pc, #600]	; (800df24 <_dtoa_r+0x644>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	4640      	mov	r0, r8
 800dcd0:	4649      	mov	r1, r9
 800dcd2:	f7f2 ff03 	bl	8000adc <__aeabi_dcmplt>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d07b      	beq.n	800ddd2 <_dtoa_r+0x4f2>
 800dcda:	9b04      	ldr	r3, [sp, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d078      	beq.n	800ddd2 <_dtoa_r+0x4f2>
 800dce0:	9b01      	ldr	r3, [sp, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	dd39      	ble.n	800dd5a <_dtoa_r+0x47a>
 800dce6:	4b90      	ldr	r3, [pc, #576]	; (800df28 <_dtoa_r+0x648>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	4640      	mov	r0, r8
 800dcec:	4649      	mov	r1, r9
 800dcee:	f7f2 fc83 	bl	80005f8 <__aeabi_dmul>
 800dcf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcf6:	9e01      	ldr	r6, [sp, #4]
 800dcf8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dcfc:	3501      	adds	r5, #1
 800dcfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dd02:	4628      	mov	r0, r5
 800dd04:	f7f2 fc0e 	bl	8000524 <__aeabi_i2d>
 800dd08:	4642      	mov	r2, r8
 800dd0a:	464b      	mov	r3, r9
 800dd0c:	f7f2 fc74 	bl	80005f8 <__aeabi_dmul>
 800dd10:	4b86      	ldr	r3, [pc, #536]	; (800df2c <_dtoa_r+0x64c>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	f7f2 faba 	bl	800028c <__adddf3>
 800dd18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dd1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd20:	9303      	str	r3, [sp, #12]
 800dd22:	2e00      	cmp	r6, #0
 800dd24:	d158      	bne.n	800ddd8 <_dtoa_r+0x4f8>
 800dd26:	4b82      	ldr	r3, [pc, #520]	; (800df30 <_dtoa_r+0x650>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	4640      	mov	r0, r8
 800dd2c:	4649      	mov	r1, r9
 800dd2e:	f7f2 faab 	bl	8000288 <__aeabi_dsub>
 800dd32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd36:	4680      	mov	r8, r0
 800dd38:	4689      	mov	r9, r1
 800dd3a:	f7f2 feed 	bl	8000b18 <__aeabi_dcmpgt>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f040 8296 	bne.w	800e270 <_dtoa_r+0x990>
 800dd44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dd48:	4640      	mov	r0, r8
 800dd4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd4e:	4649      	mov	r1, r9
 800dd50:	f7f2 fec4 	bl	8000adc <__aeabi_dcmplt>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	f040 8289 	bne.w	800e26c <_dtoa_r+0x98c>
 800dd5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dd5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	f2c0 814e 	blt.w	800e002 <_dtoa_r+0x722>
 800dd66:	f1bb 0f0e 	cmp.w	fp, #14
 800dd6a:	f300 814a 	bgt.w	800e002 <_dtoa_r+0x722>
 800dd6e:	4b6b      	ldr	r3, [pc, #428]	; (800df1c <_dtoa_r+0x63c>)
 800dd70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f280 80dc 	bge.w	800df38 <_dtoa_r+0x658>
 800dd80:	9b04      	ldr	r3, [sp, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f300 80d8 	bgt.w	800df38 <_dtoa_r+0x658>
 800dd88:	f040 826f 	bne.w	800e26a <_dtoa_r+0x98a>
 800dd8c:	4b68      	ldr	r3, [pc, #416]	; (800df30 <_dtoa_r+0x650>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	4640      	mov	r0, r8
 800dd92:	4649      	mov	r1, r9
 800dd94:	f7f2 fc30 	bl	80005f8 <__aeabi_dmul>
 800dd98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd9c:	f7f2 feb2 	bl	8000b04 <__aeabi_dcmpge>
 800dda0:	9e04      	ldr	r6, [sp, #16]
 800dda2:	4637      	mov	r7, r6
 800dda4:	2800      	cmp	r0, #0
 800dda6:	f040 8245 	bne.w	800e234 <_dtoa_r+0x954>
 800ddaa:	9d00      	ldr	r5, [sp, #0]
 800ddac:	2331      	movs	r3, #49	; 0x31
 800ddae:	f805 3b01 	strb.w	r3, [r5], #1
 800ddb2:	f10b 0b01 	add.w	fp, fp, #1
 800ddb6:	e241      	b.n	800e23c <_dtoa_r+0x95c>
 800ddb8:	07f2      	lsls	r2, r6, #31
 800ddba:	d505      	bpl.n	800ddc8 <_dtoa_r+0x4e8>
 800ddbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddc0:	f7f2 fc1a 	bl	80005f8 <__aeabi_dmul>
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	1076      	asrs	r6, r6, #1
 800ddca:	3708      	adds	r7, #8
 800ddcc:	e773      	b.n	800dcb6 <_dtoa_r+0x3d6>
 800ddce:	2502      	movs	r5, #2
 800ddd0:	e775      	b.n	800dcbe <_dtoa_r+0x3de>
 800ddd2:	9e04      	ldr	r6, [sp, #16]
 800ddd4:	465f      	mov	r7, fp
 800ddd6:	e792      	b.n	800dcfe <_dtoa_r+0x41e>
 800ddd8:	9900      	ldr	r1, [sp, #0]
 800ddda:	4b50      	ldr	r3, [pc, #320]	; (800df1c <_dtoa_r+0x63c>)
 800dddc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dde0:	4431      	add	r1, r6
 800dde2:	9102      	str	r1, [sp, #8]
 800dde4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dde6:	eeb0 9a47 	vmov.f32	s18, s14
 800ddea:	eef0 9a67 	vmov.f32	s19, s15
 800ddee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ddf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddf6:	2900      	cmp	r1, #0
 800ddf8:	d044      	beq.n	800de84 <_dtoa_r+0x5a4>
 800ddfa:	494e      	ldr	r1, [pc, #312]	; (800df34 <_dtoa_r+0x654>)
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	f7f2 fd25 	bl	800084c <__aeabi_ddiv>
 800de02:	ec53 2b19 	vmov	r2, r3, d9
 800de06:	f7f2 fa3f 	bl	8000288 <__aeabi_dsub>
 800de0a:	9d00      	ldr	r5, [sp, #0]
 800de0c:	ec41 0b19 	vmov	d9, r0, r1
 800de10:	4649      	mov	r1, r9
 800de12:	4640      	mov	r0, r8
 800de14:	f7f2 fea0 	bl	8000b58 <__aeabi_d2iz>
 800de18:	4606      	mov	r6, r0
 800de1a:	f7f2 fb83 	bl	8000524 <__aeabi_i2d>
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	4640      	mov	r0, r8
 800de24:	4649      	mov	r1, r9
 800de26:	f7f2 fa2f 	bl	8000288 <__aeabi_dsub>
 800de2a:	3630      	adds	r6, #48	; 0x30
 800de2c:	f805 6b01 	strb.w	r6, [r5], #1
 800de30:	ec53 2b19 	vmov	r2, r3, d9
 800de34:	4680      	mov	r8, r0
 800de36:	4689      	mov	r9, r1
 800de38:	f7f2 fe50 	bl	8000adc <__aeabi_dcmplt>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	d164      	bne.n	800df0a <_dtoa_r+0x62a>
 800de40:	4642      	mov	r2, r8
 800de42:	464b      	mov	r3, r9
 800de44:	4937      	ldr	r1, [pc, #220]	; (800df24 <_dtoa_r+0x644>)
 800de46:	2000      	movs	r0, #0
 800de48:	f7f2 fa1e 	bl	8000288 <__aeabi_dsub>
 800de4c:	ec53 2b19 	vmov	r2, r3, d9
 800de50:	f7f2 fe44 	bl	8000adc <__aeabi_dcmplt>
 800de54:	2800      	cmp	r0, #0
 800de56:	f040 80b6 	bne.w	800dfc6 <_dtoa_r+0x6e6>
 800de5a:	9b02      	ldr	r3, [sp, #8]
 800de5c:	429d      	cmp	r5, r3
 800de5e:	f43f af7c 	beq.w	800dd5a <_dtoa_r+0x47a>
 800de62:	4b31      	ldr	r3, [pc, #196]	; (800df28 <_dtoa_r+0x648>)
 800de64:	ec51 0b19 	vmov	r0, r1, d9
 800de68:	2200      	movs	r2, #0
 800de6a:	f7f2 fbc5 	bl	80005f8 <__aeabi_dmul>
 800de6e:	4b2e      	ldr	r3, [pc, #184]	; (800df28 <_dtoa_r+0x648>)
 800de70:	ec41 0b19 	vmov	d9, r0, r1
 800de74:	2200      	movs	r2, #0
 800de76:	4640      	mov	r0, r8
 800de78:	4649      	mov	r1, r9
 800de7a:	f7f2 fbbd 	bl	80005f8 <__aeabi_dmul>
 800de7e:	4680      	mov	r8, r0
 800de80:	4689      	mov	r9, r1
 800de82:	e7c5      	b.n	800de10 <_dtoa_r+0x530>
 800de84:	ec51 0b17 	vmov	r0, r1, d7
 800de88:	f7f2 fbb6 	bl	80005f8 <__aeabi_dmul>
 800de8c:	9b02      	ldr	r3, [sp, #8]
 800de8e:	9d00      	ldr	r5, [sp, #0]
 800de90:	930f      	str	r3, [sp, #60]	; 0x3c
 800de92:	ec41 0b19 	vmov	d9, r0, r1
 800de96:	4649      	mov	r1, r9
 800de98:	4640      	mov	r0, r8
 800de9a:	f7f2 fe5d 	bl	8000b58 <__aeabi_d2iz>
 800de9e:	4606      	mov	r6, r0
 800dea0:	f7f2 fb40 	bl	8000524 <__aeabi_i2d>
 800dea4:	3630      	adds	r6, #48	; 0x30
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	4640      	mov	r0, r8
 800deac:	4649      	mov	r1, r9
 800deae:	f7f2 f9eb 	bl	8000288 <__aeabi_dsub>
 800deb2:	f805 6b01 	strb.w	r6, [r5], #1
 800deb6:	9b02      	ldr	r3, [sp, #8]
 800deb8:	429d      	cmp	r5, r3
 800deba:	4680      	mov	r8, r0
 800debc:	4689      	mov	r9, r1
 800debe:	f04f 0200 	mov.w	r2, #0
 800dec2:	d124      	bne.n	800df0e <_dtoa_r+0x62e>
 800dec4:	4b1b      	ldr	r3, [pc, #108]	; (800df34 <_dtoa_r+0x654>)
 800dec6:	ec51 0b19 	vmov	r0, r1, d9
 800deca:	f7f2 f9df 	bl	800028c <__adddf3>
 800dece:	4602      	mov	r2, r0
 800ded0:	460b      	mov	r3, r1
 800ded2:	4640      	mov	r0, r8
 800ded4:	4649      	mov	r1, r9
 800ded6:	f7f2 fe1f 	bl	8000b18 <__aeabi_dcmpgt>
 800deda:	2800      	cmp	r0, #0
 800dedc:	d173      	bne.n	800dfc6 <_dtoa_r+0x6e6>
 800dede:	ec53 2b19 	vmov	r2, r3, d9
 800dee2:	4914      	ldr	r1, [pc, #80]	; (800df34 <_dtoa_r+0x654>)
 800dee4:	2000      	movs	r0, #0
 800dee6:	f7f2 f9cf 	bl	8000288 <__aeabi_dsub>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4640      	mov	r0, r8
 800def0:	4649      	mov	r1, r9
 800def2:	f7f2 fdf3 	bl	8000adc <__aeabi_dcmplt>
 800def6:	2800      	cmp	r0, #0
 800def8:	f43f af2f 	beq.w	800dd5a <_dtoa_r+0x47a>
 800defc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800defe:	1e6b      	subs	r3, r5, #1
 800df00:	930f      	str	r3, [sp, #60]	; 0x3c
 800df02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800df06:	2b30      	cmp	r3, #48	; 0x30
 800df08:	d0f8      	beq.n	800defc <_dtoa_r+0x61c>
 800df0a:	46bb      	mov	fp, r7
 800df0c:	e04a      	b.n	800dfa4 <_dtoa_r+0x6c4>
 800df0e:	4b06      	ldr	r3, [pc, #24]	; (800df28 <_dtoa_r+0x648>)
 800df10:	f7f2 fb72 	bl	80005f8 <__aeabi_dmul>
 800df14:	4680      	mov	r8, r0
 800df16:	4689      	mov	r9, r1
 800df18:	e7bd      	b.n	800de96 <_dtoa_r+0x5b6>
 800df1a:	bf00      	nop
 800df1c:	080144e8 	.word	0x080144e8
 800df20:	080144c0 	.word	0x080144c0
 800df24:	3ff00000 	.word	0x3ff00000
 800df28:	40240000 	.word	0x40240000
 800df2c:	401c0000 	.word	0x401c0000
 800df30:	40140000 	.word	0x40140000
 800df34:	3fe00000 	.word	0x3fe00000
 800df38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df3c:	9d00      	ldr	r5, [sp, #0]
 800df3e:	4642      	mov	r2, r8
 800df40:	464b      	mov	r3, r9
 800df42:	4630      	mov	r0, r6
 800df44:	4639      	mov	r1, r7
 800df46:	f7f2 fc81 	bl	800084c <__aeabi_ddiv>
 800df4a:	f7f2 fe05 	bl	8000b58 <__aeabi_d2iz>
 800df4e:	9001      	str	r0, [sp, #4]
 800df50:	f7f2 fae8 	bl	8000524 <__aeabi_i2d>
 800df54:	4642      	mov	r2, r8
 800df56:	464b      	mov	r3, r9
 800df58:	f7f2 fb4e 	bl	80005f8 <__aeabi_dmul>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4630      	mov	r0, r6
 800df62:	4639      	mov	r1, r7
 800df64:	f7f2 f990 	bl	8000288 <__aeabi_dsub>
 800df68:	9e01      	ldr	r6, [sp, #4]
 800df6a:	9f04      	ldr	r7, [sp, #16]
 800df6c:	3630      	adds	r6, #48	; 0x30
 800df6e:	f805 6b01 	strb.w	r6, [r5], #1
 800df72:	9e00      	ldr	r6, [sp, #0]
 800df74:	1bae      	subs	r6, r5, r6
 800df76:	42b7      	cmp	r7, r6
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	d134      	bne.n	800dfe8 <_dtoa_r+0x708>
 800df7e:	f7f2 f985 	bl	800028c <__adddf3>
 800df82:	4642      	mov	r2, r8
 800df84:	464b      	mov	r3, r9
 800df86:	4606      	mov	r6, r0
 800df88:	460f      	mov	r7, r1
 800df8a:	f7f2 fdc5 	bl	8000b18 <__aeabi_dcmpgt>
 800df8e:	b9c8      	cbnz	r0, 800dfc4 <_dtoa_r+0x6e4>
 800df90:	4642      	mov	r2, r8
 800df92:	464b      	mov	r3, r9
 800df94:	4630      	mov	r0, r6
 800df96:	4639      	mov	r1, r7
 800df98:	f7f2 fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 800df9c:	b110      	cbz	r0, 800dfa4 <_dtoa_r+0x6c4>
 800df9e:	9b01      	ldr	r3, [sp, #4]
 800dfa0:	07db      	lsls	r3, r3, #31
 800dfa2:	d40f      	bmi.n	800dfc4 <_dtoa_r+0x6e4>
 800dfa4:	4651      	mov	r1, sl
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 fbcc 	bl	800e744 <_Bfree>
 800dfac:	2300      	movs	r3, #0
 800dfae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dfb0:	702b      	strb	r3, [r5, #0]
 800dfb2:	f10b 0301 	add.w	r3, fp, #1
 800dfb6:	6013      	str	r3, [r2, #0]
 800dfb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f43f ace2 	beq.w	800d984 <_dtoa_r+0xa4>
 800dfc0:	601d      	str	r5, [r3, #0]
 800dfc2:	e4df      	b.n	800d984 <_dtoa_r+0xa4>
 800dfc4:	465f      	mov	r7, fp
 800dfc6:	462b      	mov	r3, r5
 800dfc8:	461d      	mov	r5, r3
 800dfca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfce:	2a39      	cmp	r2, #57	; 0x39
 800dfd0:	d106      	bne.n	800dfe0 <_dtoa_r+0x700>
 800dfd2:	9a00      	ldr	r2, [sp, #0]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d1f7      	bne.n	800dfc8 <_dtoa_r+0x6e8>
 800dfd8:	9900      	ldr	r1, [sp, #0]
 800dfda:	2230      	movs	r2, #48	; 0x30
 800dfdc:	3701      	adds	r7, #1
 800dfde:	700a      	strb	r2, [r1, #0]
 800dfe0:	781a      	ldrb	r2, [r3, #0]
 800dfe2:	3201      	adds	r2, #1
 800dfe4:	701a      	strb	r2, [r3, #0]
 800dfe6:	e790      	b.n	800df0a <_dtoa_r+0x62a>
 800dfe8:	4ba3      	ldr	r3, [pc, #652]	; (800e278 <_dtoa_r+0x998>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	f7f2 fb04 	bl	80005f8 <__aeabi_dmul>
 800dff0:	2200      	movs	r2, #0
 800dff2:	2300      	movs	r3, #0
 800dff4:	4606      	mov	r6, r0
 800dff6:	460f      	mov	r7, r1
 800dff8:	f7f2 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d09e      	beq.n	800df3e <_dtoa_r+0x65e>
 800e000:	e7d0      	b.n	800dfa4 <_dtoa_r+0x6c4>
 800e002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e004:	2a00      	cmp	r2, #0
 800e006:	f000 80ca 	beq.w	800e19e <_dtoa_r+0x8be>
 800e00a:	9a07      	ldr	r2, [sp, #28]
 800e00c:	2a01      	cmp	r2, #1
 800e00e:	f300 80ad 	bgt.w	800e16c <_dtoa_r+0x88c>
 800e012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e014:	2a00      	cmp	r2, #0
 800e016:	f000 80a5 	beq.w	800e164 <_dtoa_r+0x884>
 800e01a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e01e:	9e08      	ldr	r6, [sp, #32]
 800e020:	9d05      	ldr	r5, [sp, #20]
 800e022:	9a05      	ldr	r2, [sp, #20]
 800e024:	441a      	add	r2, r3
 800e026:	9205      	str	r2, [sp, #20]
 800e028:	9a06      	ldr	r2, [sp, #24]
 800e02a:	2101      	movs	r1, #1
 800e02c:	441a      	add	r2, r3
 800e02e:	4620      	mov	r0, r4
 800e030:	9206      	str	r2, [sp, #24]
 800e032:	f000 fc3d 	bl	800e8b0 <__i2b>
 800e036:	4607      	mov	r7, r0
 800e038:	b165      	cbz	r5, 800e054 <_dtoa_r+0x774>
 800e03a:	9b06      	ldr	r3, [sp, #24]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	dd09      	ble.n	800e054 <_dtoa_r+0x774>
 800e040:	42ab      	cmp	r3, r5
 800e042:	9a05      	ldr	r2, [sp, #20]
 800e044:	bfa8      	it	ge
 800e046:	462b      	movge	r3, r5
 800e048:	1ad2      	subs	r2, r2, r3
 800e04a:	9205      	str	r2, [sp, #20]
 800e04c:	9a06      	ldr	r2, [sp, #24]
 800e04e:	1aed      	subs	r5, r5, r3
 800e050:	1ad3      	subs	r3, r2, r3
 800e052:	9306      	str	r3, [sp, #24]
 800e054:	9b08      	ldr	r3, [sp, #32]
 800e056:	b1f3      	cbz	r3, 800e096 <_dtoa_r+0x7b6>
 800e058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f000 80a3 	beq.w	800e1a6 <_dtoa_r+0x8c6>
 800e060:	2e00      	cmp	r6, #0
 800e062:	dd10      	ble.n	800e086 <_dtoa_r+0x7a6>
 800e064:	4639      	mov	r1, r7
 800e066:	4632      	mov	r2, r6
 800e068:	4620      	mov	r0, r4
 800e06a:	f000 fce1 	bl	800ea30 <__pow5mult>
 800e06e:	4652      	mov	r2, sl
 800e070:	4601      	mov	r1, r0
 800e072:	4607      	mov	r7, r0
 800e074:	4620      	mov	r0, r4
 800e076:	f000 fc31 	bl	800e8dc <__multiply>
 800e07a:	4651      	mov	r1, sl
 800e07c:	4680      	mov	r8, r0
 800e07e:	4620      	mov	r0, r4
 800e080:	f000 fb60 	bl	800e744 <_Bfree>
 800e084:	46c2      	mov	sl, r8
 800e086:	9b08      	ldr	r3, [sp, #32]
 800e088:	1b9a      	subs	r2, r3, r6
 800e08a:	d004      	beq.n	800e096 <_dtoa_r+0x7b6>
 800e08c:	4651      	mov	r1, sl
 800e08e:	4620      	mov	r0, r4
 800e090:	f000 fcce 	bl	800ea30 <__pow5mult>
 800e094:	4682      	mov	sl, r0
 800e096:	2101      	movs	r1, #1
 800e098:	4620      	mov	r0, r4
 800e09a:	f000 fc09 	bl	800e8b0 <__i2b>
 800e09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	f340 8081 	ble.w	800e1aa <_dtoa_r+0x8ca>
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	4601      	mov	r1, r0
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f000 fcbf 	bl	800ea30 <__pow5mult>
 800e0b2:	9b07      	ldr	r3, [sp, #28]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	dd7a      	ble.n	800e1b0 <_dtoa_r+0x8d0>
 800e0ba:	f04f 0800 	mov.w	r8, #0
 800e0be:	6933      	ldr	r3, [r6, #16]
 800e0c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e0c4:	6918      	ldr	r0, [r3, #16]
 800e0c6:	f000 fba5 	bl	800e814 <__hi0bits>
 800e0ca:	f1c0 0020 	rsb	r0, r0, #32
 800e0ce:	9b06      	ldr	r3, [sp, #24]
 800e0d0:	4418      	add	r0, r3
 800e0d2:	f010 001f 	ands.w	r0, r0, #31
 800e0d6:	f000 8094 	beq.w	800e202 <_dtoa_r+0x922>
 800e0da:	f1c0 0320 	rsb	r3, r0, #32
 800e0de:	2b04      	cmp	r3, #4
 800e0e0:	f340 8085 	ble.w	800e1ee <_dtoa_r+0x90e>
 800e0e4:	9b05      	ldr	r3, [sp, #20]
 800e0e6:	f1c0 001c 	rsb	r0, r0, #28
 800e0ea:	4403      	add	r3, r0
 800e0ec:	9305      	str	r3, [sp, #20]
 800e0ee:	9b06      	ldr	r3, [sp, #24]
 800e0f0:	4403      	add	r3, r0
 800e0f2:	4405      	add	r5, r0
 800e0f4:	9306      	str	r3, [sp, #24]
 800e0f6:	9b05      	ldr	r3, [sp, #20]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	dd05      	ble.n	800e108 <_dtoa_r+0x828>
 800e0fc:	4651      	mov	r1, sl
 800e0fe:	461a      	mov	r2, r3
 800e100:	4620      	mov	r0, r4
 800e102:	f000 fcef 	bl	800eae4 <__lshift>
 800e106:	4682      	mov	sl, r0
 800e108:	9b06      	ldr	r3, [sp, #24]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	dd05      	ble.n	800e11a <_dtoa_r+0x83a>
 800e10e:	4631      	mov	r1, r6
 800e110:	461a      	mov	r2, r3
 800e112:	4620      	mov	r0, r4
 800e114:	f000 fce6 	bl	800eae4 <__lshift>
 800e118:	4606      	mov	r6, r0
 800e11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d072      	beq.n	800e206 <_dtoa_r+0x926>
 800e120:	4631      	mov	r1, r6
 800e122:	4650      	mov	r0, sl
 800e124:	f000 fd4a 	bl	800ebbc <__mcmp>
 800e128:	2800      	cmp	r0, #0
 800e12a:	da6c      	bge.n	800e206 <_dtoa_r+0x926>
 800e12c:	2300      	movs	r3, #0
 800e12e:	4651      	mov	r1, sl
 800e130:	220a      	movs	r2, #10
 800e132:	4620      	mov	r0, r4
 800e134:	f000 fb28 	bl	800e788 <__multadd>
 800e138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e13a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e13e:	4682      	mov	sl, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	f000 81b0 	beq.w	800e4a6 <_dtoa_r+0xbc6>
 800e146:	2300      	movs	r3, #0
 800e148:	4639      	mov	r1, r7
 800e14a:	220a      	movs	r2, #10
 800e14c:	4620      	mov	r0, r4
 800e14e:	f000 fb1b 	bl	800e788 <__multadd>
 800e152:	9b01      	ldr	r3, [sp, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	4607      	mov	r7, r0
 800e158:	f300 8096 	bgt.w	800e288 <_dtoa_r+0x9a8>
 800e15c:	9b07      	ldr	r3, [sp, #28]
 800e15e:	2b02      	cmp	r3, #2
 800e160:	dc59      	bgt.n	800e216 <_dtoa_r+0x936>
 800e162:	e091      	b.n	800e288 <_dtoa_r+0x9a8>
 800e164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e166:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e16a:	e758      	b.n	800e01e <_dtoa_r+0x73e>
 800e16c:	9b04      	ldr	r3, [sp, #16]
 800e16e:	1e5e      	subs	r6, r3, #1
 800e170:	9b08      	ldr	r3, [sp, #32]
 800e172:	42b3      	cmp	r3, r6
 800e174:	bfbf      	itttt	lt
 800e176:	9b08      	ldrlt	r3, [sp, #32]
 800e178:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e17a:	9608      	strlt	r6, [sp, #32]
 800e17c:	1af3      	sublt	r3, r6, r3
 800e17e:	bfb4      	ite	lt
 800e180:	18d2      	addlt	r2, r2, r3
 800e182:	1b9e      	subge	r6, r3, r6
 800e184:	9b04      	ldr	r3, [sp, #16]
 800e186:	bfbc      	itt	lt
 800e188:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e18a:	2600      	movlt	r6, #0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	bfb7      	itett	lt
 800e190:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e194:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e198:	1a9d      	sublt	r5, r3, r2
 800e19a:	2300      	movlt	r3, #0
 800e19c:	e741      	b.n	800e022 <_dtoa_r+0x742>
 800e19e:	9e08      	ldr	r6, [sp, #32]
 800e1a0:	9d05      	ldr	r5, [sp, #20]
 800e1a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e1a4:	e748      	b.n	800e038 <_dtoa_r+0x758>
 800e1a6:	9a08      	ldr	r2, [sp, #32]
 800e1a8:	e770      	b.n	800e08c <_dtoa_r+0x7ac>
 800e1aa:	9b07      	ldr	r3, [sp, #28]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	dc19      	bgt.n	800e1e4 <_dtoa_r+0x904>
 800e1b0:	9b02      	ldr	r3, [sp, #8]
 800e1b2:	b9bb      	cbnz	r3, 800e1e4 <_dtoa_r+0x904>
 800e1b4:	9b03      	ldr	r3, [sp, #12]
 800e1b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1ba:	b99b      	cbnz	r3, 800e1e4 <_dtoa_r+0x904>
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1c2:	0d1b      	lsrs	r3, r3, #20
 800e1c4:	051b      	lsls	r3, r3, #20
 800e1c6:	b183      	cbz	r3, 800e1ea <_dtoa_r+0x90a>
 800e1c8:	9b05      	ldr	r3, [sp, #20]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	9305      	str	r3, [sp, #20]
 800e1ce:	9b06      	ldr	r3, [sp, #24]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	9306      	str	r3, [sp, #24]
 800e1d4:	f04f 0801 	mov.w	r8, #1
 800e1d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f47f af6f 	bne.w	800e0be <_dtoa_r+0x7de>
 800e1e0:	2001      	movs	r0, #1
 800e1e2:	e774      	b.n	800e0ce <_dtoa_r+0x7ee>
 800e1e4:	f04f 0800 	mov.w	r8, #0
 800e1e8:	e7f6      	b.n	800e1d8 <_dtoa_r+0x8f8>
 800e1ea:	4698      	mov	r8, r3
 800e1ec:	e7f4      	b.n	800e1d8 <_dtoa_r+0x8f8>
 800e1ee:	d082      	beq.n	800e0f6 <_dtoa_r+0x816>
 800e1f0:	9a05      	ldr	r2, [sp, #20]
 800e1f2:	331c      	adds	r3, #28
 800e1f4:	441a      	add	r2, r3
 800e1f6:	9205      	str	r2, [sp, #20]
 800e1f8:	9a06      	ldr	r2, [sp, #24]
 800e1fa:	441a      	add	r2, r3
 800e1fc:	441d      	add	r5, r3
 800e1fe:	9206      	str	r2, [sp, #24]
 800e200:	e779      	b.n	800e0f6 <_dtoa_r+0x816>
 800e202:	4603      	mov	r3, r0
 800e204:	e7f4      	b.n	800e1f0 <_dtoa_r+0x910>
 800e206:	9b04      	ldr	r3, [sp, #16]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	dc37      	bgt.n	800e27c <_dtoa_r+0x99c>
 800e20c:	9b07      	ldr	r3, [sp, #28]
 800e20e:	2b02      	cmp	r3, #2
 800e210:	dd34      	ble.n	800e27c <_dtoa_r+0x99c>
 800e212:	9b04      	ldr	r3, [sp, #16]
 800e214:	9301      	str	r3, [sp, #4]
 800e216:	9b01      	ldr	r3, [sp, #4]
 800e218:	b963      	cbnz	r3, 800e234 <_dtoa_r+0x954>
 800e21a:	4631      	mov	r1, r6
 800e21c:	2205      	movs	r2, #5
 800e21e:	4620      	mov	r0, r4
 800e220:	f000 fab2 	bl	800e788 <__multadd>
 800e224:	4601      	mov	r1, r0
 800e226:	4606      	mov	r6, r0
 800e228:	4650      	mov	r0, sl
 800e22a:	f000 fcc7 	bl	800ebbc <__mcmp>
 800e22e:	2800      	cmp	r0, #0
 800e230:	f73f adbb 	bgt.w	800ddaa <_dtoa_r+0x4ca>
 800e234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e236:	9d00      	ldr	r5, [sp, #0]
 800e238:	ea6f 0b03 	mvn.w	fp, r3
 800e23c:	f04f 0800 	mov.w	r8, #0
 800e240:	4631      	mov	r1, r6
 800e242:	4620      	mov	r0, r4
 800e244:	f000 fa7e 	bl	800e744 <_Bfree>
 800e248:	2f00      	cmp	r7, #0
 800e24a:	f43f aeab 	beq.w	800dfa4 <_dtoa_r+0x6c4>
 800e24e:	f1b8 0f00 	cmp.w	r8, #0
 800e252:	d005      	beq.n	800e260 <_dtoa_r+0x980>
 800e254:	45b8      	cmp	r8, r7
 800e256:	d003      	beq.n	800e260 <_dtoa_r+0x980>
 800e258:	4641      	mov	r1, r8
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 fa72 	bl	800e744 <_Bfree>
 800e260:	4639      	mov	r1, r7
 800e262:	4620      	mov	r0, r4
 800e264:	f000 fa6e 	bl	800e744 <_Bfree>
 800e268:	e69c      	b.n	800dfa4 <_dtoa_r+0x6c4>
 800e26a:	2600      	movs	r6, #0
 800e26c:	4637      	mov	r7, r6
 800e26e:	e7e1      	b.n	800e234 <_dtoa_r+0x954>
 800e270:	46bb      	mov	fp, r7
 800e272:	4637      	mov	r7, r6
 800e274:	e599      	b.n	800ddaa <_dtoa_r+0x4ca>
 800e276:	bf00      	nop
 800e278:	40240000 	.word	0x40240000
 800e27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 80c8 	beq.w	800e414 <_dtoa_r+0xb34>
 800e284:	9b04      	ldr	r3, [sp, #16]
 800e286:	9301      	str	r3, [sp, #4]
 800e288:	2d00      	cmp	r5, #0
 800e28a:	dd05      	ble.n	800e298 <_dtoa_r+0x9b8>
 800e28c:	4639      	mov	r1, r7
 800e28e:	462a      	mov	r2, r5
 800e290:	4620      	mov	r0, r4
 800e292:	f000 fc27 	bl	800eae4 <__lshift>
 800e296:	4607      	mov	r7, r0
 800e298:	f1b8 0f00 	cmp.w	r8, #0
 800e29c:	d05b      	beq.n	800e356 <_dtoa_r+0xa76>
 800e29e:	6879      	ldr	r1, [r7, #4]
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f000 fa0f 	bl	800e6c4 <_Balloc>
 800e2a6:	4605      	mov	r5, r0
 800e2a8:	b928      	cbnz	r0, 800e2b6 <_dtoa_r+0x9d6>
 800e2aa:	4b83      	ldr	r3, [pc, #524]	; (800e4b8 <_dtoa_r+0xbd8>)
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e2b2:	f7ff bb2e 	b.w	800d912 <_dtoa_r+0x32>
 800e2b6:	693a      	ldr	r2, [r7, #16]
 800e2b8:	3202      	adds	r2, #2
 800e2ba:	0092      	lsls	r2, r2, #2
 800e2bc:	f107 010c 	add.w	r1, r7, #12
 800e2c0:	300c      	adds	r0, #12
 800e2c2:	f7ff fa56 	bl	800d772 <memcpy>
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 fc0a 	bl	800eae4 <__lshift>
 800e2d0:	9b00      	ldr	r3, [sp, #0]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	9304      	str	r3, [sp, #16]
 800e2d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2da:	4413      	add	r3, r2
 800e2dc:	9308      	str	r3, [sp, #32]
 800e2de:	9b02      	ldr	r3, [sp, #8]
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	46b8      	mov	r8, r7
 800e2e6:	9306      	str	r3, [sp, #24]
 800e2e8:	4607      	mov	r7, r0
 800e2ea:	9b04      	ldr	r3, [sp, #16]
 800e2ec:	4631      	mov	r1, r6
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	4650      	mov	r0, sl
 800e2f2:	9301      	str	r3, [sp, #4]
 800e2f4:	f7ff fa6a 	bl	800d7cc <quorem>
 800e2f8:	4641      	mov	r1, r8
 800e2fa:	9002      	str	r0, [sp, #8]
 800e2fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e300:	4650      	mov	r0, sl
 800e302:	f000 fc5b 	bl	800ebbc <__mcmp>
 800e306:	463a      	mov	r2, r7
 800e308:	9005      	str	r0, [sp, #20]
 800e30a:	4631      	mov	r1, r6
 800e30c:	4620      	mov	r0, r4
 800e30e:	f000 fc71 	bl	800ebf4 <__mdiff>
 800e312:	68c2      	ldr	r2, [r0, #12]
 800e314:	4605      	mov	r5, r0
 800e316:	bb02      	cbnz	r2, 800e35a <_dtoa_r+0xa7a>
 800e318:	4601      	mov	r1, r0
 800e31a:	4650      	mov	r0, sl
 800e31c:	f000 fc4e 	bl	800ebbc <__mcmp>
 800e320:	4602      	mov	r2, r0
 800e322:	4629      	mov	r1, r5
 800e324:	4620      	mov	r0, r4
 800e326:	9209      	str	r2, [sp, #36]	; 0x24
 800e328:	f000 fa0c 	bl	800e744 <_Bfree>
 800e32c:	9b07      	ldr	r3, [sp, #28]
 800e32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e330:	9d04      	ldr	r5, [sp, #16]
 800e332:	ea43 0102 	orr.w	r1, r3, r2
 800e336:	9b06      	ldr	r3, [sp, #24]
 800e338:	4319      	orrs	r1, r3
 800e33a:	d110      	bne.n	800e35e <_dtoa_r+0xa7e>
 800e33c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e340:	d029      	beq.n	800e396 <_dtoa_r+0xab6>
 800e342:	9b05      	ldr	r3, [sp, #20]
 800e344:	2b00      	cmp	r3, #0
 800e346:	dd02      	ble.n	800e34e <_dtoa_r+0xa6e>
 800e348:	9b02      	ldr	r3, [sp, #8]
 800e34a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e34e:	9b01      	ldr	r3, [sp, #4]
 800e350:	f883 9000 	strb.w	r9, [r3]
 800e354:	e774      	b.n	800e240 <_dtoa_r+0x960>
 800e356:	4638      	mov	r0, r7
 800e358:	e7ba      	b.n	800e2d0 <_dtoa_r+0x9f0>
 800e35a:	2201      	movs	r2, #1
 800e35c:	e7e1      	b.n	800e322 <_dtoa_r+0xa42>
 800e35e:	9b05      	ldr	r3, [sp, #20]
 800e360:	2b00      	cmp	r3, #0
 800e362:	db04      	blt.n	800e36e <_dtoa_r+0xa8e>
 800e364:	9907      	ldr	r1, [sp, #28]
 800e366:	430b      	orrs	r3, r1
 800e368:	9906      	ldr	r1, [sp, #24]
 800e36a:	430b      	orrs	r3, r1
 800e36c:	d120      	bne.n	800e3b0 <_dtoa_r+0xad0>
 800e36e:	2a00      	cmp	r2, #0
 800e370:	dded      	ble.n	800e34e <_dtoa_r+0xa6e>
 800e372:	4651      	mov	r1, sl
 800e374:	2201      	movs	r2, #1
 800e376:	4620      	mov	r0, r4
 800e378:	f000 fbb4 	bl	800eae4 <__lshift>
 800e37c:	4631      	mov	r1, r6
 800e37e:	4682      	mov	sl, r0
 800e380:	f000 fc1c 	bl	800ebbc <__mcmp>
 800e384:	2800      	cmp	r0, #0
 800e386:	dc03      	bgt.n	800e390 <_dtoa_r+0xab0>
 800e388:	d1e1      	bne.n	800e34e <_dtoa_r+0xa6e>
 800e38a:	f019 0f01 	tst.w	r9, #1
 800e38e:	d0de      	beq.n	800e34e <_dtoa_r+0xa6e>
 800e390:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e394:	d1d8      	bne.n	800e348 <_dtoa_r+0xa68>
 800e396:	9a01      	ldr	r2, [sp, #4]
 800e398:	2339      	movs	r3, #57	; 0x39
 800e39a:	7013      	strb	r3, [r2, #0]
 800e39c:	462b      	mov	r3, r5
 800e39e:	461d      	mov	r5, r3
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e3a6:	2a39      	cmp	r2, #57	; 0x39
 800e3a8:	d06c      	beq.n	800e484 <_dtoa_r+0xba4>
 800e3aa:	3201      	adds	r2, #1
 800e3ac:	701a      	strb	r2, [r3, #0]
 800e3ae:	e747      	b.n	800e240 <_dtoa_r+0x960>
 800e3b0:	2a00      	cmp	r2, #0
 800e3b2:	dd07      	ble.n	800e3c4 <_dtoa_r+0xae4>
 800e3b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e3b8:	d0ed      	beq.n	800e396 <_dtoa_r+0xab6>
 800e3ba:	9a01      	ldr	r2, [sp, #4]
 800e3bc:	f109 0301 	add.w	r3, r9, #1
 800e3c0:	7013      	strb	r3, [r2, #0]
 800e3c2:	e73d      	b.n	800e240 <_dtoa_r+0x960>
 800e3c4:	9b04      	ldr	r3, [sp, #16]
 800e3c6:	9a08      	ldr	r2, [sp, #32]
 800e3c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e3cc:	4293      	cmp	r3, r2
 800e3ce:	d043      	beq.n	800e458 <_dtoa_r+0xb78>
 800e3d0:	4651      	mov	r1, sl
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	220a      	movs	r2, #10
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 f9d6 	bl	800e788 <__multadd>
 800e3dc:	45b8      	cmp	r8, r7
 800e3de:	4682      	mov	sl, r0
 800e3e0:	f04f 0300 	mov.w	r3, #0
 800e3e4:	f04f 020a 	mov.w	r2, #10
 800e3e8:	4641      	mov	r1, r8
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	d107      	bne.n	800e3fe <_dtoa_r+0xb1e>
 800e3ee:	f000 f9cb 	bl	800e788 <__multadd>
 800e3f2:	4680      	mov	r8, r0
 800e3f4:	4607      	mov	r7, r0
 800e3f6:	9b04      	ldr	r3, [sp, #16]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	9304      	str	r3, [sp, #16]
 800e3fc:	e775      	b.n	800e2ea <_dtoa_r+0xa0a>
 800e3fe:	f000 f9c3 	bl	800e788 <__multadd>
 800e402:	4639      	mov	r1, r7
 800e404:	4680      	mov	r8, r0
 800e406:	2300      	movs	r3, #0
 800e408:	220a      	movs	r2, #10
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 f9bc 	bl	800e788 <__multadd>
 800e410:	4607      	mov	r7, r0
 800e412:	e7f0      	b.n	800e3f6 <_dtoa_r+0xb16>
 800e414:	9b04      	ldr	r3, [sp, #16]
 800e416:	9301      	str	r3, [sp, #4]
 800e418:	9d00      	ldr	r5, [sp, #0]
 800e41a:	4631      	mov	r1, r6
 800e41c:	4650      	mov	r0, sl
 800e41e:	f7ff f9d5 	bl	800d7cc <quorem>
 800e422:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e426:	9b00      	ldr	r3, [sp, #0]
 800e428:	f805 9b01 	strb.w	r9, [r5], #1
 800e42c:	1aea      	subs	r2, r5, r3
 800e42e:	9b01      	ldr	r3, [sp, #4]
 800e430:	4293      	cmp	r3, r2
 800e432:	dd07      	ble.n	800e444 <_dtoa_r+0xb64>
 800e434:	4651      	mov	r1, sl
 800e436:	2300      	movs	r3, #0
 800e438:	220a      	movs	r2, #10
 800e43a:	4620      	mov	r0, r4
 800e43c:	f000 f9a4 	bl	800e788 <__multadd>
 800e440:	4682      	mov	sl, r0
 800e442:	e7ea      	b.n	800e41a <_dtoa_r+0xb3a>
 800e444:	9b01      	ldr	r3, [sp, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	bfc8      	it	gt
 800e44a:	461d      	movgt	r5, r3
 800e44c:	9b00      	ldr	r3, [sp, #0]
 800e44e:	bfd8      	it	le
 800e450:	2501      	movle	r5, #1
 800e452:	441d      	add	r5, r3
 800e454:	f04f 0800 	mov.w	r8, #0
 800e458:	4651      	mov	r1, sl
 800e45a:	2201      	movs	r2, #1
 800e45c:	4620      	mov	r0, r4
 800e45e:	f000 fb41 	bl	800eae4 <__lshift>
 800e462:	4631      	mov	r1, r6
 800e464:	4682      	mov	sl, r0
 800e466:	f000 fba9 	bl	800ebbc <__mcmp>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	dc96      	bgt.n	800e39c <_dtoa_r+0xabc>
 800e46e:	d102      	bne.n	800e476 <_dtoa_r+0xb96>
 800e470:	f019 0f01 	tst.w	r9, #1
 800e474:	d192      	bne.n	800e39c <_dtoa_r+0xabc>
 800e476:	462b      	mov	r3, r5
 800e478:	461d      	mov	r5, r3
 800e47a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e47e:	2a30      	cmp	r2, #48	; 0x30
 800e480:	d0fa      	beq.n	800e478 <_dtoa_r+0xb98>
 800e482:	e6dd      	b.n	800e240 <_dtoa_r+0x960>
 800e484:	9a00      	ldr	r2, [sp, #0]
 800e486:	429a      	cmp	r2, r3
 800e488:	d189      	bne.n	800e39e <_dtoa_r+0xabe>
 800e48a:	f10b 0b01 	add.w	fp, fp, #1
 800e48e:	2331      	movs	r3, #49	; 0x31
 800e490:	e796      	b.n	800e3c0 <_dtoa_r+0xae0>
 800e492:	4b0a      	ldr	r3, [pc, #40]	; (800e4bc <_dtoa_r+0xbdc>)
 800e494:	f7ff ba99 	b.w	800d9ca <_dtoa_r+0xea>
 800e498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f47f aa6d 	bne.w	800d97a <_dtoa_r+0x9a>
 800e4a0:	4b07      	ldr	r3, [pc, #28]	; (800e4c0 <_dtoa_r+0xbe0>)
 800e4a2:	f7ff ba92 	b.w	800d9ca <_dtoa_r+0xea>
 800e4a6:	9b01      	ldr	r3, [sp, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dcb5      	bgt.n	800e418 <_dtoa_r+0xb38>
 800e4ac:	9b07      	ldr	r3, [sp, #28]
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	f73f aeb1 	bgt.w	800e216 <_dtoa_r+0x936>
 800e4b4:	e7b0      	b.n	800e418 <_dtoa_r+0xb38>
 800e4b6:	bf00      	nop
 800e4b8:	08014453 	.word	0x08014453
 800e4bc:	0801431d 	.word	0x0801431d
 800e4c0:	080143ee 	.word	0x080143ee

0800e4c4 <_free_r>:
 800e4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4c6:	2900      	cmp	r1, #0
 800e4c8:	d044      	beq.n	800e554 <_free_r+0x90>
 800e4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4ce:	9001      	str	r0, [sp, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f1a1 0404 	sub.w	r4, r1, #4
 800e4d6:	bfb8      	it	lt
 800e4d8:	18e4      	addlt	r4, r4, r3
 800e4da:	f000 f8e7 	bl	800e6ac <__malloc_lock>
 800e4de:	4a1e      	ldr	r2, [pc, #120]	; (800e558 <_free_r+0x94>)
 800e4e0:	9801      	ldr	r0, [sp, #4]
 800e4e2:	6813      	ldr	r3, [r2, #0]
 800e4e4:	b933      	cbnz	r3, 800e4f4 <_free_r+0x30>
 800e4e6:	6063      	str	r3, [r4, #4]
 800e4e8:	6014      	str	r4, [r2, #0]
 800e4ea:	b003      	add	sp, #12
 800e4ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4f0:	f000 b8e2 	b.w	800e6b8 <__malloc_unlock>
 800e4f4:	42a3      	cmp	r3, r4
 800e4f6:	d908      	bls.n	800e50a <_free_r+0x46>
 800e4f8:	6825      	ldr	r5, [r4, #0]
 800e4fa:	1961      	adds	r1, r4, r5
 800e4fc:	428b      	cmp	r3, r1
 800e4fe:	bf01      	itttt	eq
 800e500:	6819      	ldreq	r1, [r3, #0]
 800e502:	685b      	ldreq	r3, [r3, #4]
 800e504:	1949      	addeq	r1, r1, r5
 800e506:	6021      	streq	r1, [r4, #0]
 800e508:	e7ed      	b.n	800e4e6 <_free_r+0x22>
 800e50a:	461a      	mov	r2, r3
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	b10b      	cbz	r3, 800e514 <_free_r+0x50>
 800e510:	42a3      	cmp	r3, r4
 800e512:	d9fa      	bls.n	800e50a <_free_r+0x46>
 800e514:	6811      	ldr	r1, [r2, #0]
 800e516:	1855      	adds	r5, r2, r1
 800e518:	42a5      	cmp	r5, r4
 800e51a:	d10b      	bne.n	800e534 <_free_r+0x70>
 800e51c:	6824      	ldr	r4, [r4, #0]
 800e51e:	4421      	add	r1, r4
 800e520:	1854      	adds	r4, r2, r1
 800e522:	42a3      	cmp	r3, r4
 800e524:	6011      	str	r1, [r2, #0]
 800e526:	d1e0      	bne.n	800e4ea <_free_r+0x26>
 800e528:	681c      	ldr	r4, [r3, #0]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	6053      	str	r3, [r2, #4]
 800e52e:	440c      	add	r4, r1
 800e530:	6014      	str	r4, [r2, #0]
 800e532:	e7da      	b.n	800e4ea <_free_r+0x26>
 800e534:	d902      	bls.n	800e53c <_free_r+0x78>
 800e536:	230c      	movs	r3, #12
 800e538:	6003      	str	r3, [r0, #0]
 800e53a:	e7d6      	b.n	800e4ea <_free_r+0x26>
 800e53c:	6825      	ldr	r5, [r4, #0]
 800e53e:	1961      	adds	r1, r4, r5
 800e540:	428b      	cmp	r3, r1
 800e542:	bf04      	itt	eq
 800e544:	6819      	ldreq	r1, [r3, #0]
 800e546:	685b      	ldreq	r3, [r3, #4]
 800e548:	6063      	str	r3, [r4, #4]
 800e54a:	bf04      	itt	eq
 800e54c:	1949      	addeq	r1, r1, r5
 800e54e:	6021      	streq	r1, [r4, #0]
 800e550:	6054      	str	r4, [r2, #4]
 800e552:	e7ca      	b.n	800e4ea <_free_r+0x26>
 800e554:	b003      	add	sp, #12
 800e556:	bd30      	pop	{r4, r5, pc}
 800e558:	20011b3c 	.word	0x20011b3c

0800e55c <malloc>:
 800e55c:	4b02      	ldr	r3, [pc, #8]	; (800e568 <malloc+0xc>)
 800e55e:	4601      	mov	r1, r0
 800e560:	6818      	ldr	r0, [r3, #0]
 800e562:	f000 b823 	b.w	800e5ac <_malloc_r>
 800e566:	bf00      	nop
 800e568:	20000600 	.word	0x20000600

0800e56c <sbrk_aligned>:
 800e56c:	b570      	push	{r4, r5, r6, lr}
 800e56e:	4e0e      	ldr	r6, [pc, #56]	; (800e5a8 <sbrk_aligned+0x3c>)
 800e570:	460c      	mov	r4, r1
 800e572:	6831      	ldr	r1, [r6, #0]
 800e574:	4605      	mov	r5, r0
 800e576:	b911      	cbnz	r1, 800e57e <sbrk_aligned+0x12>
 800e578:	f000 fee8 	bl	800f34c <_sbrk_r>
 800e57c:	6030      	str	r0, [r6, #0]
 800e57e:	4621      	mov	r1, r4
 800e580:	4628      	mov	r0, r5
 800e582:	f000 fee3 	bl	800f34c <_sbrk_r>
 800e586:	1c43      	adds	r3, r0, #1
 800e588:	d00a      	beq.n	800e5a0 <sbrk_aligned+0x34>
 800e58a:	1cc4      	adds	r4, r0, #3
 800e58c:	f024 0403 	bic.w	r4, r4, #3
 800e590:	42a0      	cmp	r0, r4
 800e592:	d007      	beq.n	800e5a4 <sbrk_aligned+0x38>
 800e594:	1a21      	subs	r1, r4, r0
 800e596:	4628      	mov	r0, r5
 800e598:	f000 fed8 	bl	800f34c <_sbrk_r>
 800e59c:	3001      	adds	r0, #1
 800e59e:	d101      	bne.n	800e5a4 <sbrk_aligned+0x38>
 800e5a0:	f04f 34ff 	mov.w	r4, #4294967295
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}
 800e5a8:	20011b40 	.word	0x20011b40

0800e5ac <_malloc_r>:
 800e5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b0:	1ccd      	adds	r5, r1, #3
 800e5b2:	f025 0503 	bic.w	r5, r5, #3
 800e5b6:	3508      	adds	r5, #8
 800e5b8:	2d0c      	cmp	r5, #12
 800e5ba:	bf38      	it	cc
 800e5bc:	250c      	movcc	r5, #12
 800e5be:	2d00      	cmp	r5, #0
 800e5c0:	4607      	mov	r7, r0
 800e5c2:	db01      	blt.n	800e5c8 <_malloc_r+0x1c>
 800e5c4:	42a9      	cmp	r1, r5
 800e5c6:	d905      	bls.n	800e5d4 <_malloc_r+0x28>
 800e5c8:	230c      	movs	r3, #12
 800e5ca:	603b      	str	r3, [r7, #0]
 800e5cc:	2600      	movs	r6, #0
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e6a8 <_malloc_r+0xfc>
 800e5d8:	f000 f868 	bl	800e6ac <__malloc_lock>
 800e5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e5e0:	461c      	mov	r4, r3
 800e5e2:	bb5c      	cbnz	r4, 800e63c <_malloc_r+0x90>
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	f7ff ffc0 	bl	800e56c <sbrk_aligned>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	d155      	bne.n	800e69e <_malloc_r+0xf2>
 800e5f2:	f8d8 4000 	ldr.w	r4, [r8]
 800e5f6:	4626      	mov	r6, r4
 800e5f8:	2e00      	cmp	r6, #0
 800e5fa:	d145      	bne.n	800e688 <_malloc_r+0xdc>
 800e5fc:	2c00      	cmp	r4, #0
 800e5fe:	d048      	beq.n	800e692 <_malloc_r+0xe6>
 800e600:	6823      	ldr	r3, [r4, #0]
 800e602:	4631      	mov	r1, r6
 800e604:	4638      	mov	r0, r7
 800e606:	eb04 0903 	add.w	r9, r4, r3
 800e60a:	f000 fe9f 	bl	800f34c <_sbrk_r>
 800e60e:	4581      	cmp	r9, r0
 800e610:	d13f      	bne.n	800e692 <_malloc_r+0xe6>
 800e612:	6821      	ldr	r1, [r4, #0]
 800e614:	1a6d      	subs	r5, r5, r1
 800e616:	4629      	mov	r1, r5
 800e618:	4638      	mov	r0, r7
 800e61a:	f7ff ffa7 	bl	800e56c <sbrk_aligned>
 800e61e:	3001      	adds	r0, #1
 800e620:	d037      	beq.n	800e692 <_malloc_r+0xe6>
 800e622:	6823      	ldr	r3, [r4, #0]
 800e624:	442b      	add	r3, r5
 800e626:	6023      	str	r3, [r4, #0]
 800e628:	f8d8 3000 	ldr.w	r3, [r8]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d038      	beq.n	800e6a2 <_malloc_r+0xf6>
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	42a2      	cmp	r2, r4
 800e634:	d12b      	bne.n	800e68e <_malloc_r+0xe2>
 800e636:	2200      	movs	r2, #0
 800e638:	605a      	str	r2, [r3, #4]
 800e63a:	e00f      	b.n	800e65c <_malloc_r+0xb0>
 800e63c:	6822      	ldr	r2, [r4, #0]
 800e63e:	1b52      	subs	r2, r2, r5
 800e640:	d41f      	bmi.n	800e682 <_malloc_r+0xd6>
 800e642:	2a0b      	cmp	r2, #11
 800e644:	d917      	bls.n	800e676 <_malloc_r+0xca>
 800e646:	1961      	adds	r1, r4, r5
 800e648:	42a3      	cmp	r3, r4
 800e64a:	6025      	str	r5, [r4, #0]
 800e64c:	bf18      	it	ne
 800e64e:	6059      	strne	r1, [r3, #4]
 800e650:	6863      	ldr	r3, [r4, #4]
 800e652:	bf08      	it	eq
 800e654:	f8c8 1000 	streq.w	r1, [r8]
 800e658:	5162      	str	r2, [r4, r5]
 800e65a:	604b      	str	r3, [r1, #4]
 800e65c:	4638      	mov	r0, r7
 800e65e:	f104 060b 	add.w	r6, r4, #11
 800e662:	f000 f829 	bl	800e6b8 <__malloc_unlock>
 800e666:	f026 0607 	bic.w	r6, r6, #7
 800e66a:	1d23      	adds	r3, r4, #4
 800e66c:	1af2      	subs	r2, r6, r3
 800e66e:	d0ae      	beq.n	800e5ce <_malloc_r+0x22>
 800e670:	1b9b      	subs	r3, r3, r6
 800e672:	50a3      	str	r3, [r4, r2]
 800e674:	e7ab      	b.n	800e5ce <_malloc_r+0x22>
 800e676:	42a3      	cmp	r3, r4
 800e678:	6862      	ldr	r2, [r4, #4]
 800e67a:	d1dd      	bne.n	800e638 <_malloc_r+0x8c>
 800e67c:	f8c8 2000 	str.w	r2, [r8]
 800e680:	e7ec      	b.n	800e65c <_malloc_r+0xb0>
 800e682:	4623      	mov	r3, r4
 800e684:	6864      	ldr	r4, [r4, #4]
 800e686:	e7ac      	b.n	800e5e2 <_malloc_r+0x36>
 800e688:	4634      	mov	r4, r6
 800e68a:	6876      	ldr	r6, [r6, #4]
 800e68c:	e7b4      	b.n	800e5f8 <_malloc_r+0x4c>
 800e68e:	4613      	mov	r3, r2
 800e690:	e7cc      	b.n	800e62c <_malloc_r+0x80>
 800e692:	230c      	movs	r3, #12
 800e694:	603b      	str	r3, [r7, #0]
 800e696:	4638      	mov	r0, r7
 800e698:	f000 f80e 	bl	800e6b8 <__malloc_unlock>
 800e69c:	e797      	b.n	800e5ce <_malloc_r+0x22>
 800e69e:	6025      	str	r5, [r4, #0]
 800e6a0:	e7dc      	b.n	800e65c <_malloc_r+0xb0>
 800e6a2:	605b      	str	r3, [r3, #4]
 800e6a4:	deff      	udf	#255	; 0xff
 800e6a6:	bf00      	nop
 800e6a8:	20011b3c 	.word	0x20011b3c

0800e6ac <__malloc_lock>:
 800e6ac:	4801      	ldr	r0, [pc, #4]	; (800e6b4 <__malloc_lock+0x8>)
 800e6ae:	f7ff b856 	b.w	800d75e <__retarget_lock_acquire_recursive>
 800e6b2:	bf00      	nop
 800e6b4:	20011b38 	.word	0x20011b38

0800e6b8 <__malloc_unlock>:
 800e6b8:	4801      	ldr	r0, [pc, #4]	; (800e6c0 <__malloc_unlock+0x8>)
 800e6ba:	f7ff b851 	b.w	800d760 <__retarget_lock_release_recursive>
 800e6be:	bf00      	nop
 800e6c0:	20011b38 	.word	0x20011b38

0800e6c4 <_Balloc>:
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	69c6      	ldr	r6, [r0, #28]
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	b976      	cbnz	r6, 800e6ec <_Balloc+0x28>
 800e6ce:	2010      	movs	r0, #16
 800e6d0:	f7ff ff44 	bl	800e55c <malloc>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	61e0      	str	r0, [r4, #28]
 800e6d8:	b920      	cbnz	r0, 800e6e4 <_Balloc+0x20>
 800e6da:	4b18      	ldr	r3, [pc, #96]	; (800e73c <_Balloc+0x78>)
 800e6dc:	4818      	ldr	r0, [pc, #96]	; (800e740 <_Balloc+0x7c>)
 800e6de:	216b      	movs	r1, #107	; 0x6b
 800e6e0:	f7ff f856 	bl	800d790 <__assert_func>
 800e6e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6e8:	6006      	str	r6, [r0, #0]
 800e6ea:	60c6      	str	r6, [r0, #12]
 800e6ec:	69e6      	ldr	r6, [r4, #28]
 800e6ee:	68f3      	ldr	r3, [r6, #12]
 800e6f0:	b183      	cbz	r3, 800e714 <_Balloc+0x50>
 800e6f2:	69e3      	ldr	r3, [r4, #28]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6fa:	b9b8      	cbnz	r0, 800e72c <_Balloc+0x68>
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	fa01 f605 	lsl.w	r6, r1, r5
 800e702:	1d72      	adds	r2, r6, #5
 800e704:	0092      	lsls	r2, r2, #2
 800e706:	4620      	mov	r0, r4
 800e708:	f000 fe37 	bl	800f37a <_calloc_r>
 800e70c:	b160      	cbz	r0, 800e728 <_Balloc+0x64>
 800e70e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e712:	e00e      	b.n	800e732 <_Balloc+0x6e>
 800e714:	2221      	movs	r2, #33	; 0x21
 800e716:	2104      	movs	r1, #4
 800e718:	4620      	mov	r0, r4
 800e71a:	f000 fe2e 	bl	800f37a <_calloc_r>
 800e71e:	69e3      	ldr	r3, [r4, #28]
 800e720:	60f0      	str	r0, [r6, #12]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1e4      	bne.n	800e6f2 <_Balloc+0x2e>
 800e728:	2000      	movs	r0, #0
 800e72a:	bd70      	pop	{r4, r5, r6, pc}
 800e72c:	6802      	ldr	r2, [r0, #0]
 800e72e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e732:	2300      	movs	r3, #0
 800e734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e738:	e7f7      	b.n	800e72a <_Balloc+0x66>
 800e73a:	bf00      	nop
 800e73c:	08014341 	.word	0x08014341
 800e740:	08014464 	.word	0x08014464

0800e744 <_Bfree>:
 800e744:	b570      	push	{r4, r5, r6, lr}
 800e746:	69c6      	ldr	r6, [r0, #28]
 800e748:	4605      	mov	r5, r0
 800e74a:	460c      	mov	r4, r1
 800e74c:	b976      	cbnz	r6, 800e76c <_Bfree+0x28>
 800e74e:	2010      	movs	r0, #16
 800e750:	f7ff ff04 	bl	800e55c <malloc>
 800e754:	4602      	mov	r2, r0
 800e756:	61e8      	str	r0, [r5, #28]
 800e758:	b920      	cbnz	r0, 800e764 <_Bfree+0x20>
 800e75a:	4b09      	ldr	r3, [pc, #36]	; (800e780 <_Bfree+0x3c>)
 800e75c:	4809      	ldr	r0, [pc, #36]	; (800e784 <_Bfree+0x40>)
 800e75e:	218f      	movs	r1, #143	; 0x8f
 800e760:	f7ff f816 	bl	800d790 <__assert_func>
 800e764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e768:	6006      	str	r6, [r0, #0]
 800e76a:	60c6      	str	r6, [r0, #12]
 800e76c:	b13c      	cbz	r4, 800e77e <_Bfree+0x3a>
 800e76e:	69eb      	ldr	r3, [r5, #28]
 800e770:	6862      	ldr	r2, [r4, #4]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e778:	6021      	str	r1, [r4, #0]
 800e77a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e77e:	bd70      	pop	{r4, r5, r6, pc}
 800e780:	08014341 	.word	0x08014341
 800e784:	08014464 	.word	0x08014464

0800e788 <__multadd>:
 800e788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e78c:	690d      	ldr	r5, [r1, #16]
 800e78e:	4607      	mov	r7, r0
 800e790:	460c      	mov	r4, r1
 800e792:	461e      	mov	r6, r3
 800e794:	f101 0c14 	add.w	ip, r1, #20
 800e798:	2000      	movs	r0, #0
 800e79a:	f8dc 3000 	ldr.w	r3, [ip]
 800e79e:	b299      	uxth	r1, r3
 800e7a0:	fb02 6101 	mla	r1, r2, r1, r6
 800e7a4:	0c1e      	lsrs	r6, r3, #16
 800e7a6:	0c0b      	lsrs	r3, r1, #16
 800e7a8:	fb02 3306 	mla	r3, r2, r6, r3
 800e7ac:	b289      	uxth	r1, r1
 800e7ae:	3001      	adds	r0, #1
 800e7b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e7b4:	4285      	cmp	r5, r0
 800e7b6:	f84c 1b04 	str.w	r1, [ip], #4
 800e7ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e7be:	dcec      	bgt.n	800e79a <__multadd+0x12>
 800e7c0:	b30e      	cbz	r6, 800e806 <__multadd+0x7e>
 800e7c2:	68a3      	ldr	r3, [r4, #8]
 800e7c4:	42ab      	cmp	r3, r5
 800e7c6:	dc19      	bgt.n	800e7fc <__multadd+0x74>
 800e7c8:	6861      	ldr	r1, [r4, #4]
 800e7ca:	4638      	mov	r0, r7
 800e7cc:	3101      	adds	r1, #1
 800e7ce:	f7ff ff79 	bl	800e6c4 <_Balloc>
 800e7d2:	4680      	mov	r8, r0
 800e7d4:	b928      	cbnz	r0, 800e7e2 <__multadd+0x5a>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	4b0c      	ldr	r3, [pc, #48]	; (800e80c <__multadd+0x84>)
 800e7da:	480d      	ldr	r0, [pc, #52]	; (800e810 <__multadd+0x88>)
 800e7dc:	21ba      	movs	r1, #186	; 0xba
 800e7de:	f7fe ffd7 	bl	800d790 <__assert_func>
 800e7e2:	6922      	ldr	r2, [r4, #16]
 800e7e4:	3202      	adds	r2, #2
 800e7e6:	f104 010c 	add.w	r1, r4, #12
 800e7ea:	0092      	lsls	r2, r2, #2
 800e7ec:	300c      	adds	r0, #12
 800e7ee:	f7fe ffc0 	bl	800d772 <memcpy>
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	4638      	mov	r0, r7
 800e7f6:	f7ff ffa5 	bl	800e744 <_Bfree>
 800e7fa:	4644      	mov	r4, r8
 800e7fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e800:	3501      	adds	r5, #1
 800e802:	615e      	str	r6, [r3, #20]
 800e804:	6125      	str	r5, [r4, #16]
 800e806:	4620      	mov	r0, r4
 800e808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e80c:	08014453 	.word	0x08014453
 800e810:	08014464 	.word	0x08014464

0800e814 <__hi0bits>:
 800e814:	0c03      	lsrs	r3, r0, #16
 800e816:	041b      	lsls	r3, r3, #16
 800e818:	b9d3      	cbnz	r3, 800e850 <__hi0bits+0x3c>
 800e81a:	0400      	lsls	r0, r0, #16
 800e81c:	2310      	movs	r3, #16
 800e81e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e822:	bf04      	itt	eq
 800e824:	0200      	lsleq	r0, r0, #8
 800e826:	3308      	addeq	r3, #8
 800e828:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e82c:	bf04      	itt	eq
 800e82e:	0100      	lsleq	r0, r0, #4
 800e830:	3304      	addeq	r3, #4
 800e832:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e836:	bf04      	itt	eq
 800e838:	0080      	lsleq	r0, r0, #2
 800e83a:	3302      	addeq	r3, #2
 800e83c:	2800      	cmp	r0, #0
 800e83e:	db05      	blt.n	800e84c <__hi0bits+0x38>
 800e840:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e844:	f103 0301 	add.w	r3, r3, #1
 800e848:	bf08      	it	eq
 800e84a:	2320      	moveq	r3, #32
 800e84c:	4618      	mov	r0, r3
 800e84e:	4770      	bx	lr
 800e850:	2300      	movs	r3, #0
 800e852:	e7e4      	b.n	800e81e <__hi0bits+0xa>

0800e854 <__lo0bits>:
 800e854:	6803      	ldr	r3, [r0, #0]
 800e856:	f013 0207 	ands.w	r2, r3, #7
 800e85a:	d00c      	beq.n	800e876 <__lo0bits+0x22>
 800e85c:	07d9      	lsls	r1, r3, #31
 800e85e:	d422      	bmi.n	800e8a6 <__lo0bits+0x52>
 800e860:	079a      	lsls	r2, r3, #30
 800e862:	bf49      	itett	mi
 800e864:	085b      	lsrmi	r3, r3, #1
 800e866:	089b      	lsrpl	r3, r3, #2
 800e868:	6003      	strmi	r3, [r0, #0]
 800e86a:	2201      	movmi	r2, #1
 800e86c:	bf5c      	itt	pl
 800e86e:	6003      	strpl	r3, [r0, #0]
 800e870:	2202      	movpl	r2, #2
 800e872:	4610      	mov	r0, r2
 800e874:	4770      	bx	lr
 800e876:	b299      	uxth	r1, r3
 800e878:	b909      	cbnz	r1, 800e87e <__lo0bits+0x2a>
 800e87a:	0c1b      	lsrs	r3, r3, #16
 800e87c:	2210      	movs	r2, #16
 800e87e:	b2d9      	uxtb	r1, r3
 800e880:	b909      	cbnz	r1, 800e886 <__lo0bits+0x32>
 800e882:	3208      	adds	r2, #8
 800e884:	0a1b      	lsrs	r3, r3, #8
 800e886:	0719      	lsls	r1, r3, #28
 800e888:	bf04      	itt	eq
 800e88a:	091b      	lsreq	r3, r3, #4
 800e88c:	3204      	addeq	r2, #4
 800e88e:	0799      	lsls	r1, r3, #30
 800e890:	bf04      	itt	eq
 800e892:	089b      	lsreq	r3, r3, #2
 800e894:	3202      	addeq	r2, #2
 800e896:	07d9      	lsls	r1, r3, #31
 800e898:	d403      	bmi.n	800e8a2 <__lo0bits+0x4e>
 800e89a:	085b      	lsrs	r3, r3, #1
 800e89c:	f102 0201 	add.w	r2, r2, #1
 800e8a0:	d003      	beq.n	800e8aa <__lo0bits+0x56>
 800e8a2:	6003      	str	r3, [r0, #0]
 800e8a4:	e7e5      	b.n	800e872 <__lo0bits+0x1e>
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	e7e3      	b.n	800e872 <__lo0bits+0x1e>
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	e7e1      	b.n	800e872 <__lo0bits+0x1e>
	...

0800e8b0 <__i2b>:
 800e8b0:	b510      	push	{r4, lr}
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	2101      	movs	r1, #1
 800e8b6:	f7ff ff05 	bl	800e6c4 <_Balloc>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	b928      	cbnz	r0, 800e8ca <__i2b+0x1a>
 800e8be:	4b05      	ldr	r3, [pc, #20]	; (800e8d4 <__i2b+0x24>)
 800e8c0:	4805      	ldr	r0, [pc, #20]	; (800e8d8 <__i2b+0x28>)
 800e8c2:	f240 1145 	movw	r1, #325	; 0x145
 800e8c6:	f7fe ff63 	bl	800d790 <__assert_func>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	6144      	str	r4, [r0, #20]
 800e8ce:	6103      	str	r3, [r0, #16]
 800e8d0:	bd10      	pop	{r4, pc}
 800e8d2:	bf00      	nop
 800e8d4:	08014453 	.word	0x08014453
 800e8d8:	08014464 	.word	0x08014464

0800e8dc <__multiply>:
 800e8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e0:	4691      	mov	r9, r2
 800e8e2:	690a      	ldr	r2, [r1, #16]
 800e8e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	bfb8      	it	lt
 800e8ec:	460b      	movlt	r3, r1
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	bfbc      	itt	lt
 800e8f2:	464c      	movlt	r4, r9
 800e8f4:	4699      	movlt	r9, r3
 800e8f6:	6927      	ldr	r7, [r4, #16]
 800e8f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e8fc:	68a3      	ldr	r3, [r4, #8]
 800e8fe:	6861      	ldr	r1, [r4, #4]
 800e900:	eb07 060a 	add.w	r6, r7, sl
 800e904:	42b3      	cmp	r3, r6
 800e906:	b085      	sub	sp, #20
 800e908:	bfb8      	it	lt
 800e90a:	3101      	addlt	r1, #1
 800e90c:	f7ff feda 	bl	800e6c4 <_Balloc>
 800e910:	b930      	cbnz	r0, 800e920 <__multiply+0x44>
 800e912:	4602      	mov	r2, r0
 800e914:	4b44      	ldr	r3, [pc, #272]	; (800ea28 <__multiply+0x14c>)
 800e916:	4845      	ldr	r0, [pc, #276]	; (800ea2c <__multiply+0x150>)
 800e918:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e91c:	f7fe ff38 	bl	800d790 <__assert_func>
 800e920:	f100 0514 	add.w	r5, r0, #20
 800e924:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e928:	462b      	mov	r3, r5
 800e92a:	2200      	movs	r2, #0
 800e92c:	4543      	cmp	r3, r8
 800e92e:	d321      	bcc.n	800e974 <__multiply+0x98>
 800e930:	f104 0314 	add.w	r3, r4, #20
 800e934:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e938:	f109 0314 	add.w	r3, r9, #20
 800e93c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e940:	9202      	str	r2, [sp, #8]
 800e942:	1b3a      	subs	r2, r7, r4
 800e944:	3a15      	subs	r2, #21
 800e946:	f022 0203 	bic.w	r2, r2, #3
 800e94a:	3204      	adds	r2, #4
 800e94c:	f104 0115 	add.w	r1, r4, #21
 800e950:	428f      	cmp	r7, r1
 800e952:	bf38      	it	cc
 800e954:	2204      	movcc	r2, #4
 800e956:	9201      	str	r2, [sp, #4]
 800e958:	9a02      	ldr	r2, [sp, #8]
 800e95a:	9303      	str	r3, [sp, #12]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d80c      	bhi.n	800e97a <__multiply+0x9e>
 800e960:	2e00      	cmp	r6, #0
 800e962:	dd03      	ble.n	800e96c <__multiply+0x90>
 800e964:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d05b      	beq.n	800ea24 <__multiply+0x148>
 800e96c:	6106      	str	r6, [r0, #16]
 800e96e:	b005      	add	sp, #20
 800e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e974:	f843 2b04 	str.w	r2, [r3], #4
 800e978:	e7d8      	b.n	800e92c <__multiply+0x50>
 800e97a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e97e:	f1ba 0f00 	cmp.w	sl, #0
 800e982:	d024      	beq.n	800e9ce <__multiply+0xf2>
 800e984:	f104 0e14 	add.w	lr, r4, #20
 800e988:	46a9      	mov	r9, r5
 800e98a:	f04f 0c00 	mov.w	ip, #0
 800e98e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e992:	f8d9 1000 	ldr.w	r1, [r9]
 800e996:	fa1f fb82 	uxth.w	fp, r2
 800e99a:	b289      	uxth	r1, r1
 800e99c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e9a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e9a4:	f8d9 2000 	ldr.w	r2, [r9]
 800e9a8:	4461      	add	r1, ip
 800e9aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e9ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800e9b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e9b6:	b289      	uxth	r1, r1
 800e9b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e9bc:	4577      	cmp	r7, lr
 800e9be:	f849 1b04 	str.w	r1, [r9], #4
 800e9c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e9c6:	d8e2      	bhi.n	800e98e <__multiply+0xb2>
 800e9c8:	9a01      	ldr	r2, [sp, #4]
 800e9ca:	f845 c002 	str.w	ip, [r5, r2]
 800e9ce:	9a03      	ldr	r2, [sp, #12]
 800e9d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	f1b9 0f00 	cmp.w	r9, #0
 800e9da:	d021      	beq.n	800ea20 <__multiply+0x144>
 800e9dc:	6829      	ldr	r1, [r5, #0]
 800e9de:	f104 0c14 	add.w	ip, r4, #20
 800e9e2:	46ae      	mov	lr, r5
 800e9e4:	f04f 0a00 	mov.w	sl, #0
 800e9e8:	f8bc b000 	ldrh.w	fp, [ip]
 800e9ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e9f0:	fb09 220b 	mla	r2, r9, fp, r2
 800e9f4:	4452      	add	r2, sl
 800e9f6:	b289      	uxth	r1, r1
 800e9f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e9fc:	f84e 1b04 	str.w	r1, [lr], #4
 800ea00:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ea04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ea08:	f8be 1000 	ldrh.w	r1, [lr]
 800ea0c:	fb09 110a 	mla	r1, r9, sl, r1
 800ea10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ea14:	4567      	cmp	r7, ip
 800ea16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ea1a:	d8e5      	bhi.n	800e9e8 <__multiply+0x10c>
 800ea1c:	9a01      	ldr	r2, [sp, #4]
 800ea1e:	50a9      	str	r1, [r5, r2]
 800ea20:	3504      	adds	r5, #4
 800ea22:	e799      	b.n	800e958 <__multiply+0x7c>
 800ea24:	3e01      	subs	r6, #1
 800ea26:	e79b      	b.n	800e960 <__multiply+0x84>
 800ea28:	08014453 	.word	0x08014453
 800ea2c:	08014464 	.word	0x08014464

0800ea30 <__pow5mult>:
 800ea30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea34:	4615      	mov	r5, r2
 800ea36:	f012 0203 	ands.w	r2, r2, #3
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	460f      	mov	r7, r1
 800ea3e:	d007      	beq.n	800ea50 <__pow5mult+0x20>
 800ea40:	4c25      	ldr	r4, [pc, #148]	; (800ead8 <__pow5mult+0xa8>)
 800ea42:	3a01      	subs	r2, #1
 800ea44:	2300      	movs	r3, #0
 800ea46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea4a:	f7ff fe9d 	bl	800e788 <__multadd>
 800ea4e:	4607      	mov	r7, r0
 800ea50:	10ad      	asrs	r5, r5, #2
 800ea52:	d03d      	beq.n	800ead0 <__pow5mult+0xa0>
 800ea54:	69f4      	ldr	r4, [r6, #28]
 800ea56:	b97c      	cbnz	r4, 800ea78 <__pow5mult+0x48>
 800ea58:	2010      	movs	r0, #16
 800ea5a:	f7ff fd7f 	bl	800e55c <malloc>
 800ea5e:	4602      	mov	r2, r0
 800ea60:	61f0      	str	r0, [r6, #28]
 800ea62:	b928      	cbnz	r0, 800ea70 <__pow5mult+0x40>
 800ea64:	4b1d      	ldr	r3, [pc, #116]	; (800eadc <__pow5mult+0xac>)
 800ea66:	481e      	ldr	r0, [pc, #120]	; (800eae0 <__pow5mult+0xb0>)
 800ea68:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ea6c:	f7fe fe90 	bl	800d790 <__assert_func>
 800ea70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea74:	6004      	str	r4, [r0, #0]
 800ea76:	60c4      	str	r4, [r0, #12]
 800ea78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ea7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea80:	b94c      	cbnz	r4, 800ea96 <__pow5mult+0x66>
 800ea82:	f240 2171 	movw	r1, #625	; 0x271
 800ea86:	4630      	mov	r0, r6
 800ea88:	f7ff ff12 	bl	800e8b0 <__i2b>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea92:	4604      	mov	r4, r0
 800ea94:	6003      	str	r3, [r0, #0]
 800ea96:	f04f 0900 	mov.w	r9, #0
 800ea9a:	07eb      	lsls	r3, r5, #31
 800ea9c:	d50a      	bpl.n	800eab4 <__pow5mult+0x84>
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	f7ff ff1a 	bl	800e8dc <__multiply>
 800eaa8:	4639      	mov	r1, r7
 800eaaa:	4680      	mov	r8, r0
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7ff fe49 	bl	800e744 <_Bfree>
 800eab2:	4647      	mov	r7, r8
 800eab4:	106d      	asrs	r5, r5, #1
 800eab6:	d00b      	beq.n	800ead0 <__pow5mult+0xa0>
 800eab8:	6820      	ldr	r0, [r4, #0]
 800eaba:	b938      	cbnz	r0, 800eacc <__pow5mult+0x9c>
 800eabc:	4622      	mov	r2, r4
 800eabe:	4621      	mov	r1, r4
 800eac0:	4630      	mov	r0, r6
 800eac2:	f7ff ff0b 	bl	800e8dc <__multiply>
 800eac6:	6020      	str	r0, [r4, #0]
 800eac8:	f8c0 9000 	str.w	r9, [r0]
 800eacc:	4604      	mov	r4, r0
 800eace:	e7e4      	b.n	800ea9a <__pow5mult+0x6a>
 800ead0:	4638      	mov	r0, r7
 800ead2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ead6:	bf00      	nop
 800ead8:	080145b0 	.word	0x080145b0
 800eadc:	08014341 	.word	0x08014341
 800eae0:	08014464 	.word	0x08014464

0800eae4 <__lshift>:
 800eae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae8:	460c      	mov	r4, r1
 800eaea:	6849      	ldr	r1, [r1, #4]
 800eaec:	6923      	ldr	r3, [r4, #16]
 800eaee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eaf2:	68a3      	ldr	r3, [r4, #8]
 800eaf4:	4607      	mov	r7, r0
 800eaf6:	4691      	mov	r9, r2
 800eaf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eafc:	f108 0601 	add.w	r6, r8, #1
 800eb00:	42b3      	cmp	r3, r6
 800eb02:	db0b      	blt.n	800eb1c <__lshift+0x38>
 800eb04:	4638      	mov	r0, r7
 800eb06:	f7ff fddd 	bl	800e6c4 <_Balloc>
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	b948      	cbnz	r0, 800eb22 <__lshift+0x3e>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	4b28      	ldr	r3, [pc, #160]	; (800ebb4 <__lshift+0xd0>)
 800eb12:	4829      	ldr	r0, [pc, #164]	; (800ebb8 <__lshift+0xd4>)
 800eb14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800eb18:	f7fe fe3a 	bl	800d790 <__assert_func>
 800eb1c:	3101      	adds	r1, #1
 800eb1e:	005b      	lsls	r3, r3, #1
 800eb20:	e7ee      	b.n	800eb00 <__lshift+0x1c>
 800eb22:	2300      	movs	r3, #0
 800eb24:	f100 0114 	add.w	r1, r0, #20
 800eb28:	f100 0210 	add.w	r2, r0, #16
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	4553      	cmp	r3, sl
 800eb30:	db33      	blt.n	800eb9a <__lshift+0xb6>
 800eb32:	6920      	ldr	r0, [r4, #16]
 800eb34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb38:	f104 0314 	add.w	r3, r4, #20
 800eb3c:	f019 091f 	ands.w	r9, r9, #31
 800eb40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb48:	d02b      	beq.n	800eba2 <__lshift+0xbe>
 800eb4a:	f1c9 0e20 	rsb	lr, r9, #32
 800eb4e:	468a      	mov	sl, r1
 800eb50:	2200      	movs	r2, #0
 800eb52:	6818      	ldr	r0, [r3, #0]
 800eb54:	fa00 f009 	lsl.w	r0, r0, r9
 800eb58:	4310      	orrs	r0, r2
 800eb5a:	f84a 0b04 	str.w	r0, [sl], #4
 800eb5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb62:	459c      	cmp	ip, r3
 800eb64:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb68:	d8f3      	bhi.n	800eb52 <__lshift+0x6e>
 800eb6a:	ebac 0304 	sub.w	r3, ip, r4
 800eb6e:	3b15      	subs	r3, #21
 800eb70:	f023 0303 	bic.w	r3, r3, #3
 800eb74:	3304      	adds	r3, #4
 800eb76:	f104 0015 	add.w	r0, r4, #21
 800eb7a:	4584      	cmp	ip, r0
 800eb7c:	bf38      	it	cc
 800eb7e:	2304      	movcc	r3, #4
 800eb80:	50ca      	str	r2, [r1, r3]
 800eb82:	b10a      	cbz	r2, 800eb88 <__lshift+0xa4>
 800eb84:	f108 0602 	add.w	r6, r8, #2
 800eb88:	3e01      	subs	r6, #1
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	612e      	str	r6, [r5, #16]
 800eb8e:	4621      	mov	r1, r4
 800eb90:	f7ff fdd8 	bl	800e744 <_Bfree>
 800eb94:	4628      	mov	r0, r5
 800eb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb9e:	3301      	adds	r3, #1
 800eba0:	e7c5      	b.n	800eb2e <__lshift+0x4a>
 800eba2:	3904      	subs	r1, #4
 800eba4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ebac:	459c      	cmp	ip, r3
 800ebae:	d8f9      	bhi.n	800eba4 <__lshift+0xc0>
 800ebb0:	e7ea      	b.n	800eb88 <__lshift+0xa4>
 800ebb2:	bf00      	nop
 800ebb4:	08014453 	.word	0x08014453
 800ebb8:	08014464 	.word	0x08014464

0800ebbc <__mcmp>:
 800ebbc:	b530      	push	{r4, r5, lr}
 800ebbe:	6902      	ldr	r2, [r0, #16]
 800ebc0:	690c      	ldr	r4, [r1, #16]
 800ebc2:	1b12      	subs	r2, r2, r4
 800ebc4:	d10e      	bne.n	800ebe4 <__mcmp+0x28>
 800ebc6:	f100 0314 	add.w	r3, r0, #20
 800ebca:	3114      	adds	r1, #20
 800ebcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ebd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ebd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ebd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ebdc:	42a5      	cmp	r5, r4
 800ebde:	d003      	beq.n	800ebe8 <__mcmp+0x2c>
 800ebe0:	d305      	bcc.n	800ebee <__mcmp+0x32>
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	bd30      	pop	{r4, r5, pc}
 800ebe8:	4283      	cmp	r3, r0
 800ebea:	d3f3      	bcc.n	800ebd4 <__mcmp+0x18>
 800ebec:	e7fa      	b.n	800ebe4 <__mcmp+0x28>
 800ebee:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf2:	e7f7      	b.n	800ebe4 <__mcmp+0x28>

0800ebf4 <__mdiff>:
 800ebf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf8:	460c      	mov	r4, r1
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	4620      	mov	r0, r4
 800ec00:	4690      	mov	r8, r2
 800ec02:	f7ff ffdb 	bl	800ebbc <__mcmp>
 800ec06:	1e05      	subs	r5, r0, #0
 800ec08:	d110      	bne.n	800ec2c <__mdiff+0x38>
 800ec0a:	4629      	mov	r1, r5
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	f7ff fd59 	bl	800e6c4 <_Balloc>
 800ec12:	b930      	cbnz	r0, 800ec22 <__mdiff+0x2e>
 800ec14:	4b3a      	ldr	r3, [pc, #232]	; (800ed00 <__mdiff+0x10c>)
 800ec16:	4602      	mov	r2, r0
 800ec18:	f240 2137 	movw	r1, #567	; 0x237
 800ec1c:	4839      	ldr	r0, [pc, #228]	; (800ed04 <__mdiff+0x110>)
 800ec1e:	f7fe fdb7 	bl	800d790 <__assert_func>
 800ec22:	2301      	movs	r3, #1
 800ec24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec2c:	bfa4      	itt	ge
 800ec2e:	4643      	movge	r3, r8
 800ec30:	46a0      	movge	r8, r4
 800ec32:	4630      	mov	r0, r6
 800ec34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ec38:	bfa6      	itte	ge
 800ec3a:	461c      	movge	r4, r3
 800ec3c:	2500      	movge	r5, #0
 800ec3e:	2501      	movlt	r5, #1
 800ec40:	f7ff fd40 	bl	800e6c4 <_Balloc>
 800ec44:	b920      	cbnz	r0, 800ec50 <__mdiff+0x5c>
 800ec46:	4b2e      	ldr	r3, [pc, #184]	; (800ed00 <__mdiff+0x10c>)
 800ec48:	4602      	mov	r2, r0
 800ec4a:	f240 2145 	movw	r1, #581	; 0x245
 800ec4e:	e7e5      	b.n	800ec1c <__mdiff+0x28>
 800ec50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ec54:	6926      	ldr	r6, [r4, #16]
 800ec56:	60c5      	str	r5, [r0, #12]
 800ec58:	f104 0914 	add.w	r9, r4, #20
 800ec5c:	f108 0514 	add.w	r5, r8, #20
 800ec60:	f100 0e14 	add.w	lr, r0, #20
 800ec64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ec68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ec6c:	f108 0210 	add.w	r2, r8, #16
 800ec70:	46f2      	mov	sl, lr
 800ec72:	2100      	movs	r1, #0
 800ec74:	f859 3b04 	ldr.w	r3, [r9], #4
 800ec78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ec7c:	fa11 f88b 	uxtah	r8, r1, fp
 800ec80:	b299      	uxth	r1, r3
 800ec82:	0c1b      	lsrs	r3, r3, #16
 800ec84:	eba8 0801 	sub.w	r8, r8, r1
 800ec88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ec8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ec90:	fa1f f888 	uxth.w	r8, r8
 800ec94:	1419      	asrs	r1, r3, #16
 800ec96:	454e      	cmp	r6, r9
 800ec98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ec9c:	f84a 3b04 	str.w	r3, [sl], #4
 800eca0:	d8e8      	bhi.n	800ec74 <__mdiff+0x80>
 800eca2:	1b33      	subs	r3, r6, r4
 800eca4:	3b15      	subs	r3, #21
 800eca6:	f023 0303 	bic.w	r3, r3, #3
 800ecaa:	3304      	adds	r3, #4
 800ecac:	3415      	adds	r4, #21
 800ecae:	42a6      	cmp	r6, r4
 800ecb0:	bf38      	it	cc
 800ecb2:	2304      	movcc	r3, #4
 800ecb4:	441d      	add	r5, r3
 800ecb6:	4473      	add	r3, lr
 800ecb8:	469e      	mov	lr, r3
 800ecba:	462e      	mov	r6, r5
 800ecbc:	4566      	cmp	r6, ip
 800ecbe:	d30e      	bcc.n	800ecde <__mdiff+0xea>
 800ecc0:	f10c 0203 	add.w	r2, ip, #3
 800ecc4:	1b52      	subs	r2, r2, r5
 800ecc6:	f022 0203 	bic.w	r2, r2, #3
 800ecca:	3d03      	subs	r5, #3
 800eccc:	45ac      	cmp	ip, r5
 800ecce:	bf38      	it	cc
 800ecd0:	2200      	movcc	r2, #0
 800ecd2:	4413      	add	r3, r2
 800ecd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ecd8:	b17a      	cbz	r2, 800ecfa <__mdiff+0x106>
 800ecda:	6107      	str	r7, [r0, #16]
 800ecdc:	e7a4      	b.n	800ec28 <__mdiff+0x34>
 800ecde:	f856 8b04 	ldr.w	r8, [r6], #4
 800ece2:	fa11 f288 	uxtah	r2, r1, r8
 800ece6:	1414      	asrs	r4, r2, #16
 800ece8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ecec:	b292      	uxth	r2, r2
 800ecee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ecf2:	f84e 2b04 	str.w	r2, [lr], #4
 800ecf6:	1421      	asrs	r1, r4, #16
 800ecf8:	e7e0      	b.n	800ecbc <__mdiff+0xc8>
 800ecfa:	3f01      	subs	r7, #1
 800ecfc:	e7ea      	b.n	800ecd4 <__mdiff+0xe0>
 800ecfe:	bf00      	nop
 800ed00:	08014453 	.word	0x08014453
 800ed04:	08014464 	.word	0x08014464

0800ed08 <__d2b>:
 800ed08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed0c:	460f      	mov	r7, r1
 800ed0e:	2101      	movs	r1, #1
 800ed10:	ec59 8b10 	vmov	r8, r9, d0
 800ed14:	4616      	mov	r6, r2
 800ed16:	f7ff fcd5 	bl	800e6c4 <_Balloc>
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	b930      	cbnz	r0, 800ed2c <__d2b+0x24>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	4b24      	ldr	r3, [pc, #144]	; (800edb4 <__d2b+0xac>)
 800ed22:	4825      	ldr	r0, [pc, #148]	; (800edb8 <__d2b+0xb0>)
 800ed24:	f240 310f 	movw	r1, #783	; 0x30f
 800ed28:	f7fe fd32 	bl	800d790 <__assert_func>
 800ed2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed34:	bb2d      	cbnz	r5, 800ed82 <__d2b+0x7a>
 800ed36:	9301      	str	r3, [sp, #4]
 800ed38:	f1b8 0300 	subs.w	r3, r8, #0
 800ed3c:	d026      	beq.n	800ed8c <__d2b+0x84>
 800ed3e:	4668      	mov	r0, sp
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	f7ff fd87 	bl	800e854 <__lo0bits>
 800ed46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed4a:	b1e8      	cbz	r0, 800ed88 <__d2b+0x80>
 800ed4c:	f1c0 0320 	rsb	r3, r0, #32
 800ed50:	fa02 f303 	lsl.w	r3, r2, r3
 800ed54:	430b      	orrs	r3, r1
 800ed56:	40c2      	lsrs	r2, r0
 800ed58:	6163      	str	r3, [r4, #20]
 800ed5a:	9201      	str	r2, [sp, #4]
 800ed5c:	9b01      	ldr	r3, [sp, #4]
 800ed5e:	61a3      	str	r3, [r4, #24]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	bf14      	ite	ne
 800ed64:	2202      	movne	r2, #2
 800ed66:	2201      	moveq	r2, #1
 800ed68:	6122      	str	r2, [r4, #16]
 800ed6a:	b1bd      	cbz	r5, 800ed9c <__d2b+0x94>
 800ed6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ed70:	4405      	add	r5, r0
 800ed72:	603d      	str	r5, [r7, #0]
 800ed74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ed78:	6030      	str	r0, [r6, #0]
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	b003      	add	sp, #12
 800ed7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed86:	e7d6      	b.n	800ed36 <__d2b+0x2e>
 800ed88:	6161      	str	r1, [r4, #20]
 800ed8a:	e7e7      	b.n	800ed5c <__d2b+0x54>
 800ed8c:	a801      	add	r0, sp, #4
 800ed8e:	f7ff fd61 	bl	800e854 <__lo0bits>
 800ed92:	9b01      	ldr	r3, [sp, #4]
 800ed94:	6163      	str	r3, [r4, #20]
 800ed96:	3020      	adds	r0, #32
 800ed98:	2201      	movs	r2, #1
 800ed9a:	e7e5      	b.n	800ed68 <__d2b+0x60>
 800ed9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eda0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eda4:	6038      	str	r0, [r7, #0]
 800eda6:	6918      	ldr	r0, [r3, #16]
 800eda8:	f7ff fd34 	bl	800e814 <__hi0bits>
 800edac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800edb0:	e7e2      	b.n	800ed78 <__d2b+0x70>
 800edb2:	bf00      	nop
 800edb4:	08014453 	.word	0x08014453
 800edb8:	08014464 	.word	0x08014464

0800edbc <__ssputs_r>:
 800edbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edc0:	688e      	ldr	r6, [r1, #8]
 800edc2:	461f      	mov	r7, r3
 800edc4:	42be      	cmp	r6, r7
 800edc6:	680b      	ldr	r3, [r1, #0]
 800edc8:	4682      	mov	sl, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	4690      	mov	r8, r2
 800edce:	d82c      	bhi.n	800ee2a <__ssputs_r+0x6e>
 800edd0:	898a      	ldrh	r2, [r1, #12]
 800edd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800edd6:	d026      	beq.n	800ee26 <__ssputs_r+0x6a>
 800edd8:	6965      	ldr	r5, [r4, #20]
 800edda:	6909      	ldr	r1, [r1, #16]
 800eddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ede0:	eba3 0901 	sub.w	r9, r3, r1
 800ede4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ede8:	1c7b      	adds	r3, r7, #1
 800edea:	444b      	add	r3, r9
 800edec:	106d      	asrs	r5, r5, #1
 800edee:	429d      	cmp	r5, r3
 800edf0:	bf38      	it	cc
 800edf2:	461d      	movcc	r5, r3
 800edf4:	0553      	lsls	r3, r2, #21
 800edf6:	d527      	bpl.n	800ee48 <__ssputs_r+0x8c>
 800edf8:	4629      	mov	r1, r5
 800edfa:	f7ff fbd7 	bl	800e5ac <_malloc_r>
 800edfe:	4606      	mov	r6, r0
 800ee00:	b360      	cbz	r0, 800ee5c <__ssputs_r+0xa0>
 800ee02:	6921      	ldr	r1, [r4, #16]
 800ee04:	464a      	mov	r2, r9
 800ee06:	f7fe fcb4 	bl	800d772 <memcpy>
 800ee0a:	89a3      	ldrh	r3, [r4, #12]
 800ee0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee14:	81a3      	strh	r3, [r4, #12]
 800ee16:	6126      	str	r6, [r4, #16]
 800ee18:	6165      	str	r5, [r4, #20]
 800ee1a:	444e      	add	r6, r9
 800ee1c:	eba5 0509 	sub.w	r5, r5, r9
 800ee20:	6026      	str	r6, [r4, #0]
 800ee22:	60a5      	str	r5, [r4, #8]
 800ee24:	463e      	mov	r6, r7
 800ee26:	42be      	cmp	r6, r7
 800ee28:	d900      	bls.n	800ee2c <__ssputs_r+0x70>
 800ee2a:	463e      	mov	r6, r7
 800ee2c:	6820      	ldr	r0, [r4, #0]
 800ee2e:	4632      	mov	r2, r6
 800ee30:	4641      	mov	r1, r8
 800ee32:	f000 fa71 	bl	800f318 <memmove>
 800ee36:	68a3      	ldr	r3, [r4, #8]
 800ee38:	1b9b      	subs	r3, r3, r6
 800ee3a:	60a3      	str	r3, [r4, #8]
 800ee3c:	6823      	ldr	r3, [r4, #0]
 800ee3e:	4433      	add	r3, r6
 800ee40:	6023      	str	r3, [r4, #0]
 800ee42:	2000      	movs	r0, #0
 800ee44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee48:	462a      	mov	r2, r5
 800ee4a:	f000 fabe 	bl	800f3ca <_realloc_r>
 800ee4e:	4606      	mov	r6, r0
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d1e0      	bne.n	800ee16 <__ssputs_r+0x5a>
 800ee54:	6921      	ldr	r1, [r4, #16]
 800ee56:	4650      	mov	r0, sl
 800ee58:	f7ff fb34 	bl	800e4c4 <_free_r>
 800ee5c:	230c      	movs	r3, #12
 800ee5e:	f8ca 3000 	str.w	r3, [sl]
 800ee62:	89a3      	ldrh	r3, [r4, #12]
 800ee64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee68:	81a3      	strh	r3, [r4, #12]
 800ee6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee6e:	e7e9      	b.n	800ee44 <__ssputs_r+0x88>

0800ee70 <_svfiprintf_r>:
 800ee70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee74:	4698      	mov	r8, r3
 800ee76:	898b      	ldrh	r3, [r1, #12]
 800ee78:	061b      	lsls	r3, r3, #24
 800ee7a:	b09d      	sub	sp, #116	; 0x74
 800ee7c:	4607      	mov	r7, r0
 800ee7e:	460d      	mov	r5, r1
 800ee80:	4614      	mov	r4, r2
 800ee82:	d50e      	bpl.n	800eea2 <_svfiprintf_r+0x32>
 800ee84:	690b      	ldr	r3, [r1, #16]
 800ee86:	b963      	cbnz	r3, 800eea2 <_svfiprintf_r+0x32>
 800ee88:	2140      	movs	r1, #64	; 0x40
 800ee8a:	f7ff fb8f 	bl	800e5ac <_malloc_r>
 800ee8e:	6028      	str	r0, [r5, #0]
 800ee90:	6128      	str	r0, [r5, #16]
 800ee92:	b920      	cbnz	r0, 800ee9e <_svfiprintf_r+0x2e>
 800ee94:	230c      	movs	r3, #12
 800ee96:	603b      	str	r3, [r7, #0]
 800ee98:	f04f 30ff 	mov.w	r0, #4294967295
 800ee9c:	e0d0      	b.n	800f040 <_svfiprintf_r+0x1d0>
 800ee9e:	2340      	movs	r3, #64	; 0x40
 800eea0:	616b      	str	r3, [r5, #20]
 800eea2:	2300      	movs	r3, #0
 800eea4:	9309      	str	r3, [sp, #36]	; 0x24
 800eea6:	2320      	movs	r3, #32
 800eea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eeac:	f8cd 800c 	str.w	r8, [sp, #12]
 800eeb0:	2330      	movs	r3, #48	; 0x30
 800eeb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f058 <_svfiprintf_r+0x1e8>
 800eeb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eeba:	f04f 0901 	mov.w	r9, #1
 800eebe:	4623      	mov	r3, r4
 800eec0:	469a      	mov	sl, r3
 800eec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eec6:	b10a      	cbz	r2, 800eecc <_svfiprintf_r+0x5c>
 800eec8:	2a25      	cmp	r2, #37	; 0x25
 800eeca:	d1f9      	bne.n	800eec0 <_svfiprintf_r+0x50>
 800eecc:	ebba 0b04 	subs.w	fp, sl, r4
 800eed0:	d00b      	beq.n	800eeea <_svfiprintf_r+0x7a>
 800eed2:	465b      	mov	r3, fp
 800eed4:	4622      	mov	r2, r4
 800eed6:	4629      	mov	r1, r5
 800eed8:	4638      	mov	r0, r7
 800eeda:	f7ff ff6f 	bl	800edbc <__ssputs_r>
 800eede:	3001      	adds	r0, #1
 800eee0:	f000 80a9 	beq.w	800f036 <_svfiprintf_r+0x1c6>
 800eee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eee6:	445a      	add	r2, fp
 800eee8:	9209      	str	r2, [sp, #36]	; 0x24
 800eeea:	f89a 3000 	ldrb.w	r3, [sl]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	f000 80a1 	beq.w	800f036 <_svfiprintf_r+0x1c6>
 800eef4:	2300      	movs	r3, #0
 800eef6:	f04f 32ff 	mov.w	r2, #4294967295
 800eefa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eefe:	f10a 0a01 	add.w	sl, sl, #1
 800ef02:	9304      	str	r3, [sp, #16]
 800ef04:	9307      	str	r3, [sp, #28]
 800ef06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ef0c:	4654      	mov	r4, sl
 800ef0e:	2205      	movs	r2, #5
 800ef10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef14:	4850      	ldr	r0, [pc, #320]	; (800f058 <_svfiprintf_r+0x1e8>)
 800ef16:	f7f1 f95b 	bl	80001d0 <memchr>
 800ef1a:	9a04      	ldr	r2, [sp, #16]
 800ef1c:	b9d8      	cbnz	r0, 800ef56 <_svfiprintf_r+0xe6>
 800ef1e:	06d0      	lsls	r0, r2, #27
 800ef20:	bf44      	itt	mi
 800ef22:	2320      	movmi	r3, #32
 800ef24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef28:	0711      	lsls	r1, r2, #28
 800ef2a:	bf44      	itt	mi
 800ef2c:	232b      	movmi	r3, #43	; 0x2b
 800ef2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef32:	f89a 3000 	ldrb.w	r3, [sl]
 800ef36:	2b2a      	cmp	r3, #42	; 0x2a
 800ef38:	d015      	beq.n	800ef66 <_svfiprintf_r+0xf6>
 800ef3a:	9a07      	ldr	r2, [sp, #28]
 800ef3c:	4654      	mov	r4, sl
 800ef3e:	2000      	movs	r0, #0
 800ef40:	f04f 0c0a 	mov.w	ip, #10
 800ef44:	4621      	mov	r1, r4
 800ef46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef4a:	3b30      	subs	r3, #48	; 0x30
 800ef4c:	2b09      	cmp	r3, #9
 800ef4e:	d94d      	bls.n	800efec <_svfiprintf_r+0x17c>
 800ef50:	b1b0      	cbz	r0, 800ef80 <_svfiprintf_r+0x110>
 800ef52:	9207      	str	r2, [sp, #28]
 800ef54:	e014      	b.n	800ef80 <_svfiprintf_r+0x110>
 800ef56:	eba0 0308 	sub.w	r3, r0, r8
 800ef5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	9304      	str	r3, [sp, #16]
 800ef62:	46a2      	mov	sl, r4
 800ef64:	e7d2      	b.n	800ef0c <_svfiprintf_r+0x9c>
 800ef66:	9b03      	ldr	r3, [sp, #12]
 800ef68:	1d19      	adds	r1, r3, #4
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	9103      	str	r1, [sp, #12]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	bfbb      	ittet	lt
 800ef72:	425b      	neglt	r3, r3
 800ef74:	f042 0202 	orrlt.w	r2, r2, #2
 800ef78:	9307      	strge	r3, [sp, #28]
 800ef7a:	9307      	strlt	r3, [sp, #28]
 800ef7c:	bfb8      	it	lt
 800ef7e:	9204      	strlt	r2, [sp, #16]
 800ef80:	7823      	ldrb	r3, [r4, #0]
 800ef82:	2b2e      	cmp	r3, #46	; 0x2e
 800ef84:	d10c      	bne.n	800efa0 <_svfiprintf_r+0x130>
 800ef86:	7863      	ldrb	r3, [r4, #1]
 800ef88:	2b2a      	cmp	r3, #42	; 0x2a
 800ef8a:	d134      	bne.n	800eff6 <_svfiprintf_r+0x186>
 800ef8c:	9b03      	ldr	r3, [sp, #12]
 800ef8e:	1d1a      	adds	r2, r3, #4
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	9203      	str	r2, [sp, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	bfb8      	it	lt
 800ef98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef9c:	3402      	adds	r4, #2
 800ef9e:	9305      	str	r3, [sp, #20]
 800efa0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f068 <_svfiprintf_r+0x1f8>
 800efa4:	7821      	ldrb	r1, [r4, #0]
 800efa6:	2203      	movs	r2, #3
 800efa8:	4650      	mov	r0, sl
 800efaa:	f7f1 f911 	bl	80001d0 <memchr>
 800efae:	b138      	cbz	r0, 800efc0 <_svfiprintf_r+0x150>
 800efb0:	9b04      	ldr	r3, [sp, #16]
 800efb2:	eba0 000a 	sub.w	r0, r0, sl
 800efb6:	2240      	movs	r2, #64	; 0x40
 800efb8:	4082      	lsls	r2, r0
 800efba:	4313      	orrs	r3, r2
 800efbc:	3401      	adds	r4, #1
 800efbe:	9304      	str	r3, [sp, #16]
 800efc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc4:	4825      	ldr	r0, [pc, #148]	; (800f05c <_svfiprintf_r+0x1ec>)
 800efc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efca:	2206      	movs	r2, #6
 800efcc:	f7f1 f900 	bl	80001d0 <memchr>
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d038      	beq.n	800f046 <_svfiprintf_r+0x1d6>
 800efd4:	4b22      	ldr	r3, [pc, #136]	; (800f060 <_svfiprintf_r+0x1f0>)
 800efd6:	bb1b      	cbnz	r3, 800f020 <_svfiprintf_r+0x1b0>
 800efd8:	9b03      	ldr	r3, [sp, #12]
 800efda:	3307      	adds	r3, #7
 800efdc:	f023 0307 	bic.w	r3, r3, #7
 800efe0:	3308      	adds	r3, #8
 800efe2:	9303      	str	r3, [sp, #12]
 800efe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efe6:	4433      	add	r3, r6
 800efe8:	9309      	str	r3, [sp, #36]	; 0x24
 800efea:	e768      	b.n	800eebe <_svfiprintf_r+0x4e>
 800efec:	fb0c 3202 	mla	r2, ip, r2, r3
 800eff0:	460c      	mov	r4, r1
 800eff2:	2001      	movs	r0, #1
 800eff4:	e7a6      	b.n	800ef44 <_svfiprintf_r+0xd4>
 800eff6:	2300      	movs	r3, #0
 800eff8:	3401      	adds	r4, #1
 800effa:	9305      	str	r3, [sp, #20]
 800effc:	4619      	mov	r1, r3
 800effe:	f04f 0c0a 	mov.w	ip, #10
 800f002:	4620      	mov	r0, r4
 800f004:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f008:	3a30      	subs	r2, #48	; 0x30
 800f00a:	2a09      	cmp	r2, #9
 800f00c:	d903      	bls.n	800f016 <_svfiprintf_r+0x1a6>
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d0c6      	beq.n	800efa0 <_svfiprintf_r+0x130>
 800f012:	9105      	str	r1, [sp, #20]
 800f014:	e7c4      	b.n	800efa0 <_svfiprintf_r+0x130>
 800f016:	fb0c 2101 	mla	r1, ip, r1, r2
 800f01a:	4604      	mov	r4, r0
 800f01c:	2301      	movs	r3, #1
 800f01e:	e7f0      	b.n	800f002 <_svfiprintf_r+0x192>
 800f020:	ab03      	add	r3, sp, #12
 800f022:	9300      	str	r3, [sp, #0]
 800f024:	462a      	mov	r2, r5
 800f026:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <_svfiprintf_r+0x1f4>)
 800f028:	a904      	add	r1, sp, #16
 800f02a:	4638      	mov	r0, r7
 800f02c:	f7fd fd7c 	bl	800cb28 <_printf_float>
 800f030:	1c42      	adds	r2, r0, #1
 800f032:	4606      	mov	r6, r0
 800f034:	d1d6      	bne.n	800efe4 <_svfiprintf_r+0x174>
 800f036:	89ab      	ldrh	r3, [r5, #12]
 800f038:	065b      	lsls	r3, r3, #25
 800f03a:	f53f af2d 	bmi.w	800ee98 <_svfiprintf_r+0x28>
 800f03e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f040:	b01d      	add	sp, #116	; 0x74
 800f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f046:	ab03      	add	r3, sp, #12
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	462a      	mov	r2, r5
 800f04c:	4b05      	ldr	r3, [pc, #20]	; (800f064 <_svfiprintf_r+0x1f4>)
 800f04e:	a904      	add	r1, sp, #16
 800f050:	4638      	mov	r0, r7
 800f052:	f7fe f80d 	bl	800d070 <_printf_i>
 800f056:	e7eb      	b.n	800f030 <_svfiprintf_r+0x1c0>
 800f058:	080145bc 	.word	0x080145bc
 800f05c:	080145c6 	.word	0x080145c6
 800f060:	0800cb29 	.word	0x0800cb29
 800f064:	0800edbd 	.word	0x0800edbd
 800f068:	080145c2 	.word	0x080145c2

0800f06c <__sflush_r>:
 800f06c:	898a      	ldrh	r2, [r1, #12]
 800f06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f072:	4605      	mov	r5, r0
 800f074:	0710      	lsls	r0, r2, #28
 800f076:	460c      	mov	r4, r1
 800f078:	d458      	bmi.n	800f12c <__sflush_r+0xc0>
 800f07a:	684b      	ldr	r3, [r1, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	dc05      	bgt.n	800f08c <__sflush_r+0x20>
 800f080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f082:	2b00      	cmp	r3, #0
 800f084:	dc02      	bgt.n	800f08c <__sflush_r+0x20>
 800f086:	2000      	movs	r0, #0
 800f088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f08c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f08e:	2e00      	cmp	r6, #0
 800f090:	d0f9      	beq.n	800f086 <__sflush_r+0x1a>
 800f092:	2300      	movs	r3, #0
 800f094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f098:	682f      	ldr	r7, [r5, #0]
 800f09a:	6a21      	ldr	r1, [r4, #32]
 800f09c:	602b      	str	r3, [r5, #0]
 800f09e:	d032      	beq.n	800f106 <__sflush_r+0x9a>
 800f0a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0a2:	89a3      	ldrh	r3, [r4, #12]
 800f0a4:	075a      	lsls	r2, r3, #29
 800f0a6:	d505      	bpl.n	800f0b4 <__sflush_r+0x48>
 800f0a8:	6863      	ldr	r3, [r4, #4]
 800f0aa:	1ac0      	subs	r0, r0, r3
 800f0ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0ae:	b10b      	cbz	r3, 800f0b4 <__sflush_r+0x48>
 800f0b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0b2:	1ac0      	subs	r0, r0, r3
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0ba:	6a21      	ldr	r1, [r4, #32]
 800f0bc:	4628      	mov	r0, r5
 800f0be:	47b0      	blx	r6
 800f0c0:	1c43      	adds	r3, r0, #1
 800f0c2:	89a3      	ldrh	r3, [r4, #12]
 800f0c4:	d106      	bne.n	800f0d4 <__sflush_r+0x68>
 800f0c6:	6829      	ldr	r1, [r5, #0]
 800f0c8:	291d      	cmp	r1, #29
 800f0ca:	d82b      	bhi.n	800f124 <__sflush_r+0xb8>
 800f0cc:	4a29      	ldr	r2, [pc, #164]	; (800f174 <__sflush_r+0x108>)
 800f0ce:	410a      	asrs	r2, r1
 800f0d0:	07d6      	lsls	r6, r2, #31
 800f0d2:	d427      	bmi.n	800f124 <__sflush_r+0xb8>
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	6062      	str	r2, [r4, #4]
 800f0d8:	04d9      	lsls	r1, r3, #19
 800f0da:	6922      	ldr	r2, [r4, #16]
 800f0dc:	6022      	str	r2, [r4, #0]
 800f0de:	d504      	bpl.n	800f0ea <__sflush_r+0x7e>
 800f0e0:	1c42      	adds	r2, r0, #1
 800f0e2:	d101      	bne.n	800f0e8 <__sflush_r+0x7c>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	b903      	cbnz	r3, 800f0ea <__sflush_r+0x7e>
 800f0e8:	6560      	str	r0, [r4, #84]	; 0x54
 800f0ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0ec:	602f      	str	r7, [r5, #0]
 800f0ee:	2900      	cmp	r1, #0
 800f0f0:	d0c9      	beq.n	800f086 <__sflush_r+0x1a>
 800f0f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0f6:	4299      	cmp	r1, r3
 800f0f8:	d002      	beq.n	800f100 <__sflush_r+0x94>
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	f7ff f9e2 	bl	800e4c4 <_free_r>
 800f100:	2000      	movs	r0, #0
 800f102:	6360      	str	r0, [r4, #52]	; 0x34
 800f104:	e7c0      	b.n	800f088 <__sflush_r+0x1c>
 800f106:	2301      	movs	r3, #1
 800f108:	4628      	mov	r0, r5
 800f10a:	47b0      	blx	r6
 800f10c:	1c41      	adds	r1, r0, #1
 800f10e:	d1c8      	bne.n	800f0a2 <__sflush_r+0x36>
 800f110:	682b      	ldr	r3, [r5, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d0c5      	beq.n	800f0a2 <__sflush_r+0x36>
 800f116:	2b1d      	cmp	r3, #29
 800f118:	d001      	beq.n	800f11e <__sflush_r+0xb2>
 800f11a:	2b16      	cmp	r3, #22
 800f11c:	d101      	bne.n	800f122 <__sflush_r+0xb6>
 800f11e:	602f      	str	r7, [r5, #0]
 800f120:	e7b1      	b.n	800f086 <__sflush_r+0x1a>
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f128:	81a3      	strh	r3, [r4, #12]
 800f12a:	e7ad      	b.n	800f088 <__sflush_r+0x1c>
 800f12c:	690f      	ldr	r7, [r1, #16]
 800f12e:	2f00      	cmp	r7, #0
 800f130:	d0a9      	beq.n	800f086 <__sflush_r+0x1a>
 800f132:	0793      	lsls	r3, r2, #30
 800f134:	680e      	ldr	r6, [r1, #0]
 800f136:	bf08      	it	eq
 800f138:	694b      	ldreq	r3, [r1, #20]
 800f13a:	600f      	str	r7, [r1, #0]
 800f13c:	bf18      	it	ne
 800f13e:	2300      	movne	r3, #0
 800f140:	eba6 0807 	sub.w	r8, r6, r7
 800f144:	608b      	str	r3, [r1, #8]
 800f146:	f1b8 0f00 	cmp.w	r8, #0
 800f14a:	dd9c      	ble.n	800f086 <__sflush_r+0x1a>
 800f14c:	6a21      	ldr	r1, [r4, #32]
 800f14e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f150:	4643      	mov	r3, r8
 800f152:	463a      	mov	r2, r7
 800f154:	4628      	mov	r0, r5
 800f156:	47b0      	blx	r6
 800f158:	2800      	cmp	r0, #0
 800f15a:	dc06      	bgt.n	800f16a <__sflush_r+0xfe>
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f162:	81a3      	strh	r3, [r4, #12]
 800f164:	f04f 30ff 	mov.w	r0, #4294967295
 800f168:	e78e      	b.n	800f088 <__sflush_r+0x1c>
 800f16a:	4407      	add	r7, r0
 800f16c:	eba8 0800 	sub.w	r8, r8, r0
 800f170:	e7e9      	b.n	800f146 <__sflush_r+0xda>
 800f172:	bf00      	nop
 800f174:	dfbffffe 	.word	0xdfbffffe

0800f178 <_fflush_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	690b      	ldr	r3, [r1, #16]
 800f17c:	4605      	mov	r5, r0
 800f17e:	460c      	mov	r4, r1
 800f180:	b913      	cbnz	r3, 800f188 <_fflush_r+0x10>
 800f182:	2500      	movs	r5, #0
 800f184:	4628      	mov	r0, r5
 800f186:	bd38      	pop	{r3, r4, r5, pc}
 800f188:	b118      	cbz	r0, 800f192 <_fflush_r+0x1a>
 800f18a:	6a03      	ldr	r3, [r0, #32]
 800f18c:	b90b      	cbnz	r3, 800f192 <_fflush_r+0x1a>
 800f18e:	f7fe f91d 	bl	800d3cc <__sinit>
 800f192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d0f3      	beq.n	800f182 <_fflush_r+0xa>
 800f19a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f19c:	07d0      	lsls	r0, r2, #31
 800f19e:	d404      	bmi.n	800f1aa <_fflush_r+0x32>
 800f1a0:	0599      	lsls	r1, r3, #22
 800f1a2:	d402      	bmi.n	800f1aa <_fflush_r+0x32>
 800f1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1a6:	f7fe fada 	bl	800d75e <__retarget_lock_acquire_recursive>
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	f7ff ff5d 	bl	800f06c <__sflush_r>
 800f1b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1b4:	07da      	lsls	r2, r3, #31
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	d4e4      	bmi.n	800f184 <_fflush_r+0xc>
 800f1ba:	89a3      	ldrh	r3, [r4, #12]
 800f1bc:	059b      	lsls	r3, r3, #22
 800f1be:	d4e1      	bmi.n	800f184 <_fflush_r+0xc>
 800f1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1c2:	f7fe facd 	bl	800d760 <__retarget_lock_release_recursive>
 800f1c6:	e7dd      	b.n	800f184 <_fflush_r+0xc>

0800f1c8 <fiprintf>:
 800f1c8:	b40e      	push	{r1, r2, r3}
 800f1ca:	b503      	push	{r0, r1, lr}
 800f1cc:	4601      	mov	r1, r0
 800f1ce:	ab03      	add	r3, sp, #12
 800f1d0:	4805      	ldr	r0, [pc, #20]	; (800f1e8 <fiprintf+0x20>)
 800f1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1d6:	6800      	ldr	r0, [r0, #0]
 800f1d8:	9301      	str	r3, [sp, #4]
 800f1da:	f000 f95b 	bl	800f494 <_vfiprintf_r>
 800f1de:	b002      	add	sp, #8
 800f1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1e4:	b003      	add	sp, #12
 800f1e6:	4770      	bx	lr
 800f1e8:	20000600 	.word	0x20000600

0800f1ec <__swbuf_r>:
 800f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ee:	460e      	mov	r6, r1
 800f1f0:	4614      	mov	r4, r2
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	b118      	cbz	r0, 800f1fe <__swbuf_r+0x12>
 800f1f6:	6a03      	ldr	r3, [r0, #32]
 800f1f8:	b90b      	cbnz	r3, 800f1fe <__swbuf_r+0x12>
 800f1fa:	f7fe f8e7 	bl	800d3cc <__sinit>
 800f1fe:	69a3      	ldr	r3, [r4, #24]
 800f200:	60a3      	str	r3, [r4, #8]
 800f202:	89a3      	ldrh	r3, [r4, #12]
 800f204:	071a      	lsls	r2, r3, #28
 800f206:	d525      	bpl.n	800f254 <__swbuf_r+0x68>
 800f208:	6923      	ldr	r3, [r4, #16]
 800f20a:	b31b      	cbz	r3, 800f254 <__swbuf_r+0x68>
 800f20c:	6823      	ldr	r3, [r4, #0]
 800f20e:	6922      	ldr	r2, [r4, #16]
 800f210:	1a98      	subs	r0, r3, r2
 800f212:	6963      	ldr	r3, [r4, #20]
 800f214:	b2f6      	uxtb	r6, r6
 800f216:	4283      	cmp	r3, r0
 800f218:	4637      	mov	r7, r6
 800f21a:	dc04      	bgt.n	800f226 <__swbuf_r+0x3a>
 800f21c:	4621      	mov	r1, r4
 800f21e:	4628      	mov	r0, r5
 800f220:	f7ff ffaa 	bl	800f178 <_fflush_r>
 800f224:	b9e0      	cbnz	r0, 800f260 <__swbuf_r+0x74>
 800f226:	68a3      	ldr	r3, [r4, #8]
 800f228:	3b01      	subs	r3, #1
 800f22a:	60a3      	str	r3, [r4, #8]
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	1c5a      	adds	r2, r3, #1
 800f230:	6022      	str	r2, [r4, #0]
 800f232:	701e      	strb	r6, [r3, #0]
 800f234:	6962      	ldr	r2, [r4, #20]
 800f236:	1c43      	adds	r3, r0, #1
 800f238:	429a      	cmp	r2, r3
 800f23a:	d004      	beq.n	800f246 <__swbuf_r+0x5a>
 800f23c:	89a3      	ldrh	r3, [r4, #12]
 800f23e:	07db      	lsls	r3, r3, #31
 800f240:	d506      	bpl.n	800f250 <__swbuf_r+0x64>
 800f242:	2e0a      	cmp	r6, #10
 800f244:	d104      	bne.n	800f250 <__swbuf_r+0x64>
 800f246:	4621      	mov	r1, r4
 800f248:	4628      	mov	r0, r5
 800f24a:	f7ff ff95 	bl	800f178 <_fflush_r>
 800f24e:	b938      	cbnz	r0, 800f260 <__swbuf_r+0x74>
 800f250:	4638      	mov	r0, r7
 800f252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f254:	4621      	mov	r1, r4
 800f256:	4628      	mov	r0, r5
 800f258:	f000 f806 	bl	800f268 <__swsetup_r>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d0d5      	beq.n	800f20c <__swbuf_r+0x20>
 800f260:	f04f 37ff 	mov.w	r7, #4294967295
 800f264:	e7f4      	b.n	800f250 <__swbuf_r+0x64>
	...

0800f268 <__swsetup_r>:
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	4b2a      	ldr	r3, [pc, #168]	; (800f314 <__swsetup_r+0xac>)
 800f26c:	4605      	mov	r5, r0
 800f26e:	6818      	ldr	r0, [r3, #0]
 800f270:	460c      	mov	r4, r1
 800f272:	b118      	cbz	r0, 800f27c <__swsetup_r+0x14>
 800f274:	6a03      	ldr	r3, [r0, #32]
 800f276:	b90b      	cbnz	r3, 800f27c <__swsetup_r+0x14>
 800f278:	f7fe f8a8 	bl	800d3cc <__sinit>
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f282:	0718      	lsls	r0, r3, #28
 800f284:	d422      	bmi.n	800f2cc <__swsetup_r+0x64>
 800f286:	06d9      	lsls	r1, r3, #27
 800f288:	d407      	bmi.n	800f29a <__swsetup_r+0x32>
 800f28a:	2309      	movs	r3, #9
 800f28c:	602b      	str	r3, [r5, #0]
 800f28e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f292:	81a3      	strh	r3, [r4, #12]
 800f294:	f04f 30ff 	mov.w	r0, #4294967295
 800f298:	e034      	b.n	800f304 <__swsetup_r+0x9c>
 800f29a:	0758      	lsls	r0, r3, #29
 800f29c:	d512      	bpl.n	800f2c4 <__swsetup_r+0x5c>
 800f29e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2a0:	b141      	cbz	r1, 800f2b4 <__swsetup_r+0x4c>
 800f2a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2a6:	4299      	cmp	r1, r3
 800f2a8:	d002      	beq.n	800f2b0 <__swsetup_r+0x48>
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f7ff f90a 	bl	800e4c4 <_free_r>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	6363      	str	r3, [r4, #52]	; 0x34
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2ba:	81a3      	strh	r3, [r4, #12]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	6063      	str	r3, [r4, #4]
 800f2c0:	6923      	ldr	r3, [r4, #16]
 800f2c2:	6023      	str	r3, [r4, #0]
 800f2c4:	89a3      	ldrh	r3, [r4, #12]
 800f2c6:	f043 0308 	orr.w	r3, r3, #8
 800f2ca:	81a3      	strh	r3, [r4, #12]
 800f2cc:	6923      	ldr	r3, [r4, #16]
 800f2ce:	b94b      	cbnz	r3, 800f2e4 <__swsetup_r+0x7c>
 800f2d0:	89a3      	ldrh	r3, [r4, #12]
 800f2d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2da:	d003      	beq.n	800f2e4 <__swsetup_r+0x7c>
 800f2dc:	4621      	mov	r1, r4
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f000 fa18 	bl	800f714 <__smakebuf_r>
 800f2e4:	89a0      	ldrh	r0, [r4, #12]
 800f2e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2ea:	f010 0301 	ands.w	r3, r0, #1
 800f2ee:	d00a      	beq.n	800f306 <__swsetup_r+0x9e>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	60a3      	str	r3, [r4, #8]
 800f2f4:	6963      	ldr	r3, [r4, #20]
 800f2f6:	425b      	negs	r3, r3
 800f2f8:	61a3      	str	r3, [r4, #24]
 800f2fa:	6923      	ldr	r3, [r4, #16]
 800f2fc:	b943      	cbnz	r3, 800f310 <__swsetup_r+0xa8>
 800f2fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f302:	d1c4      	bne.n	800f28e <__swsetup_r+0x26>
 800f304:	bd38      	pop	{r3, r4, r5, pc}
 800f306:	0781      	lsls	r1, r0, #30
 800f308:	bf58      	it	pl
 800f30a:	6963      	ldrpl	r3, [r4, #20]
 800f30c:	60a3      	str	r3, [r4, #8]
 800f30e:	e7f4      	b.n	800f2fa <__swsetup_r+0x92>
 800f310:	2000      	movs	r0, #0
 800f312:	e7f7      	b.n	800f304 <__swsetup_r+0x9c>
 800f314:	20000600 	.word	0x20000600

0800f318 <memmove>:
 800f318:	4288      	cmp	r0, r1
 800f31a:	b510      	push	{r4, lr}
 800f31c:	eb01 0402 	add.w	r4, r1, r2
 800f320:	d902      	bls.n	800f328 <memmove+0x10>
 800f322:	4284      	cmp	r4, r0
 800f324:	4623      	mov	r3, r4
 800f326:	d807      	bhi.n	800f338 <memmove+0x20>
 800f328:	1e43      	subs	r3, r0, #1
 800f32a:	42a1      	cmp	r1, r4
 800f32c:	d008      	beq.n	800f340 <memmove+0x28>
 800f32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f332:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f336:	e7f8      	b.n	800f32a <memmove+0x12>
 800f338:	4402      	add	r2, r0
 800f33a:	4601      	mov	r1, r0
 800f33c:	428a      	cmp	r2, r1
 800f33e:	d100      	bne.n	800f342 <memmove+0x2a>
 800f340:	bd10      	pop	{r4, pc}
 800f342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f34a:	e7f7      	b.n	800f33c <memmove+0x24>

0800f34c <_sbrk_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	4d06      	ldr	r5, [pc, #24]	; (800f368 <_sbrk_r+0x1c>)
 800f350:	2300      	movs	r3, #0
 800f352:	4604      	mov	r4, r0
 800f354:	4608      	mov	r0, r1
 800f356:	602b      	str	r3, [r5, #0]
 800f358:	f7f4 fd86 	bl	8003e68 <_sbrk>
 800f35c:	1c43      	adds	r3, r0, #1
 800f35e:	d102      	bne.n	800f366 <_sbrk_r+0x1a>
 800f360:	682b      	ldr	r3, [r5, #0]
 800f362:	b103      	cbz	r3, 800f366 <_sbrk_r+0x1a>
 800f364:	6023      	str	r3, [r4, #0]
 800f366:	bd38      	pop	{r3, r4, r5, pc}
 800f368:	20011b34 	.word	0x20011b34

0800f36c <abort>:
 800f36c:	b508      	push	{r3, lr}
 800f36e:	2006      	movs	r0, #6
 800f370:	f000 fa34 	bl	800f7dc <raise>
 800f374:	2001      	movs	r0, #1
 800f376:	f7f4 fcff 	bl	8003d78 <_exit>

0800f37a <_calloc_r>:
 800f37a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f37c:	fba1 2402 	umull	r2, r4, r1, r2
 800f380:	b94c      	cbnz	r4, 800f396 <_calloc_r+0x1c>
 800f382:	4611      	mov	r1, r2
 800f384:	9201      	str	r2, [sp, #4]
 800f386:	f7ff f911 	bl	800e5ac <_malloc_r>
 800f38a:	9a01      	ldr	r2, [sp, #4]
 800f38c:	4605      	mov	r5, r0
 800f38e:	b930      	cbnz	r0, 800f39e <_calloc_r+0x24>
 800f390:	4628      	mov	r0, r5
 800f392:	b003      	add	sp, #12
 800f394:	bd30      	pop	{r4, r5, pc}
 800f396:	220c      	movs	r2, #12
 800f398:	6002      	str	r2, [r0, #0]
 800f39a:	2500      	movs	r5, #0
 800f39c:	e7f8      	b.n	800f390 <_calloc_r+0x16>
 800f39e:	4621      	mov	r1, r4
 800f3a0:	f7fe f8ad 	bl	800d4fe <memset>
 800f3a4:	e7f4      	b.n	800f390 <_calloc_r+0x16>

0800f3a6 <__ascii_mbtowc>:
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	b901      	cbnz	r1, 800f3ac <__ascii_mbtowc+0x6>
 800f3aa:	a901      	add	r1, sp, #4
 800f3ac:	b142      	cbz	r2, 800f3c0 <__ascii_mbtowc+0x1a>
 800f3ae:	b14b      	cbz	r3, 800f3c4 <__ascii_mbtowc+0x1e>
 800f3b0:	7813      	ldrb	r3, [r2, #0]
 800f3b2:	600b      	str	r3, [r1, #0]
 800f3b4:	7812      	ldrb	r2, [r2, #0]
 800f3b6:	1e10      	subs	r0, r2, #0
 800f3b8:	bf18      	it	ne
 800f3ba:	2001      	movne	r0, #1
 800f3bc:	b002      	add	sp, #8
 800f3be:	4770      	bx	lr
 800f3c0:	4610      	mov	r0, r2
 800f3c2:	e7fb      	b.n	800f3bc <__ascii_mbtowc+0x16>
 800f3c4:	f06f 0001 	mvn.w	r0, #1
 800f3c8:	e7f8      	b.n	800f3bc <__ascii_mbtowc+0x16>

0800f3ca <_realloc_r>:
 800f3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ce:	4680      	mov	r8, r0
 800f3d0:	4614      	mov	r4, r2
 800f3d2:	460e      	mov	r6, r1
 800f3d4:	b921      	cbnz	r1, 800f3e0 <_realloc_r+0x16>
 800f3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3da:	4611      	mov	r1, r2
 800f3dc:	f7ff b8e6 	b.w	800e5ac <_malloc_r>
 800f3e0:	b92a      	cbnz	r2, 800f3ee <_realloc_r+0x24>
 800f3e2:	f7ff f86f 	bl	800e4c4 <_free_r>
 800f3e6:	4625      	mov	r5, r4
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ee:	f000 fa33 	bl	800f858 <_malloc_usable_size_r>
 800f3f2:	4284      	cmp	r4, r0
 800f3f4:	4607      	mov	r7, r0
 800f3f6:	d802      	bhi.n	800f3fe <_realloc_r+0x34>
 800f3f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f3fc:	d812      	bhi.n	800f424 <_realloc_r+0x5a>
 800f3fe:	4621      	mov	r1, r4
 800f400:	4640      	mov	r0, r8
 800f402:	f7ff f8d3 	bl	800e5ac <_malloc_r>
 800f406:	4605      	mov	r5, r0
 800f408:	2800      	cmp	r0, #0
 800f40a:	d0ed      	beq.n	800f3e8 <_realloc_r+0x1e>
 800f40c:	42bc      	cmp	r4, r7
 800f40e:	4622      	mov	r2, r4
 800f410:	4631      	mov	r1, r6
 800f412:	bf28      	it	cs
 800f414:	463a      	movcs	r2, r7
 800f416:	f7fe f9ac 	bl	800d772 <memcpy>
 800f41a:	4631      	mov	r1, r6
 800f41c:	4640      	mov	r0, r8
 800f41e:	f7ff f851 	bl	800e4c4 <_free_r>
 800f422:	e7e1      	b.n	800f3e8 <_realloc_r+0x1e>
 800f424:	4635      	mov	r5, r6
 800f426:	e7df      	b.n	800f3e8 <_realloc_r+0x1e>

0800f428 <__ascii_wctomb>:
 800f428:	b149      	cbz	r1, 800f43e <__ascii_wctomb+0x16>
 800f42a:	2aff      	cmp	r2, #255	; 0xff
 800f42c:	bf85      	ittet	hi
 800f42e:	238a      	movhi	r3, #138	; 0x8a
 800f430:	6003      	strhi	r3, [r0, #0]
 800f432:	700a      	strbls	r2, [r1, #0]
 800f434:	f04f 30ff 	movhi.w	r0, #4294967295
 800f438:	bf98      	it	ls
 800f43a:	2001      	movls	r0, #1
 800f43c:	4770      	bx	lr
 800f43e:	4608      	mov	r0, r1
 800f440:	4770      	bx	lr

0800f442 <__sfputc_r>:
 800f442:	6893      	ldr	r3, [r2, #8]
 800f444:	3b01      	subs	r3, #1
 800f446:	2b00      	cmp	r3, #0
 800f448:	b410      	push	{r4}
 800f44a:	6093      	str	r3, [r2, #8]
 800f44c:	da08      	bge.n	800f460 <__sfputc_r+0x1e>
 800f44e:	6994      	ldr	r4, [r2, #24]
 800f450:	42a3      	cmp	r3, r4
 800f452:	db01      	blt.n	800f458 <__sfputc_r+0x16>
 800f454:	290a      	cmp	r1, #10
 800f456:	d103      	bne.n	800f460 <__sfputc_r+0x1e>
 800f458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f45c:	f7ff bec6 	b.w	800f1ec <__swbuf_r>
 800f460:	6813      	ldr	r3, [r2, #0]
 800f462:	1c58      	adds	r0, r3, #1
 800f464:	6010      	str	r0, [r2, #0]
 800f466:	7019      	strb	r1, [r3, #0]
 800f468:	4608      	mov	r0, r1
 800f46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <__sfputs_r>:
 800f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f472:	4606      	mov	r6, r0
 800f474:	460f      	mov	r7, r1
 800f476:	4614      	mov	r4, r2
 800f478:	18d5      	adds	r5, r2, r3
 800f47a:	42ac      	cmp	r4, r5
 800f47c:	d101      	bne.n	800f482 <__sfputs_r+0x12>
 800f47e:	2000      	movs	r0, #0
 800f480:	e007      	b.n	800f492 <__sfputs_r+0x22>
 800f482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f486:	463a      	mov	r2, r7
 800f488:	4630      	mov	r0, r6
 800f48a:	f7ff ffda 	bl	800f442 <__sfputc_r>
 800f48e:	1c43      	adds	r3, r0, #1
 800f490:	d1f3      	bne.n	800f47a <__sfputs_r+0xa>
 800f492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f494 <_vfiprintf_r>:
 800f494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f498:	460d      	mov	r5, r1
 800f49a:	b09d      	sub	sp, #116	; 0x74
 800f49c:	4614      	mov	r4, r2
 800f49e:	4698      	mov	r8, r3
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	b118      	cbz	r0, 800f4ac <_vfiprintf_r+0x18>
 800f4a4:	6a03      	ldr	r3, [r0, #32]
 800f4a6:	b90b      	cbnz	r3, 800f4ac <_vfiprintf_r+0x18>
 800f4a8:	f7fd ff90 	bl	800d3cc <__sinit>
 800f4ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4ae:	07d9      	lsls	r1, r3, #31
 800f4b0:	d405      	bmi.n	800f4be <_vfiprintf_r+0x2a>
 800f4b2:	89ab      	ldrh	r3, [r5, #12]
 800f4b4:	059a      	lsls	r2, r3, #22
 800f4b6:	d402      	bmi.n	800f4be <_vfiprintf_r+0x2a>
 800f4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4ba:	f7fe f950 	bl	800d75e <__retarget_lock_acquire_recursive>
 800f4be:	89ab      	ldrh	r3, [r5, #12]
 800f4c0:	071b      	lsls	r3, r3, #28
 800f4c2:	d501      	bpl.n	800f4c8 <_vfiprintf_r+0x34>
 800f4c4:	692b      	ldr	r3, [r5, #16]
 800f4c6:	b99b      	cbnz	r3, 800f4f0 <_vfiprintf_r+0x5c>
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f7ff fecc 	bl	800f268 <__swsetup_r>
 800f4d0:	b170      	cbz	r0, 800f4f0 <_vfiprintf_r+0x5c>
 800f4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4d4:	07dc      	lsls	r4, r3, #31
 800f4d6:	d504      	bpl.n	800f4e2 <_vfiprintf_r+0x4e>
 800f4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4dc:	b01d      	add	sp, #116	; 0x74
 800f4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e2:	89ab      	ldrh	r3, [r5, #12]
 800f4e4:	0598      	lsls	r0, r3, #22
 800f4e6:	d4f7      	bmi.n	800f4d8 <_vfiprintf_r+0x44>
 800f4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4ea:	f7fe f939 	bl	800d760 <__retarget_lock_release_recursive>
 800f4ee:	e7f3      	b.n	800f4d8 <_vfiprintf_r+0x44>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f4f4:	2320      	movs	r3, #32
 800f4f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4fe:	2330      	movs	r3, #48	; 0x30
 800f500:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f6b4 <_vfiprintf_r+0x220>
 800f504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f508:	f04f 0901 	mov.w	r9, #1
 800f50c:	4623      	mov	r3, r4
 800f50e:	469a      	mov	sl, r3
 800f510:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f514:	b10a      	cbz	r2, 800f51a <_vfiprintf_r+0x86>
 800f516:	2a25      	cmp	r2, #37	; 0x25
 800f518:	d1f9      	bne.n	800f50e <_vfiprintf_r+0x7a>
 800f51a:	ebba 0b04 	subs.w	fp, sl, r4
 800f51e:	d00b      	beq.n	800f538 <_vfiprintf_r+0xa4>
 800f520:	465b      	mov	r3, fp
 800f522:	4622      	mov	r2, r4
 800f524:	4629      	mov	r1, r5
 800f526:	4630      	mov	r0, r6
 800f528:	f7ff ffa2 	bl	800f470 <__sfputs_r>
 800f52c:	3001      	adds	r0, #1
 800f52e:	f000 80a9 	beq.w	800f684 <_vfiprintf_r+0x1f0>
 800f532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f534:	445a      	add	r2, fp
 800f536:	9209      	str	r2, [sp, #36]	; 0x24
 800f538:	f89a 3000 	ldrb.w	r3, [sl]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	f000 80a1 	beq.w	800f684 <_vfiprintf_r+0x1f0>
 800f542:	2300      	movs	r3, #0
 800f544:	f04f 32ff 	mov.w	r2, #4294967295
 800f548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f54c:	f10a 0a01 	add.w	sl, sl, #1
 800f550:	9304      	str	r3, [sp, #16]
 800f552:	9307      	str	r3, [sp, #28]
 800f554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f558:	931a      	str	r3, [sp, #104]	; 0x68
 800f55a:	4654      	mov	r4, sl
 800f55c:	2205      	movs	r2, #5
 800f55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f562:	4854      	ldr	r0, [pc, #336]	; (800f6b4 <_vfiprintf_r+0x220>)
 800f564:	f7f0 fe34 	bl	80001d0 <memchr>
 800f568:	9a04      	ldr	r2, [sp, #16]
 800f56a:	b9d8      	cbnz	r0, 800f5a4 <_vfiprintf_r+0x110>
 800f56c:	06d1      	lsls	r1, r2, #27
 800f56e:	bf44      	itt	mi
 800f570:	2320      	movmi	r3, #32
 800f572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f576:	0713      	lsls	r3, r2, #28
 800f578:	bf44      	itt	mi
 800f57a:	232b      	movmi	r3, #43	; 0x2b
 800f57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f580:	f89a 3000 	ldrb.w	r3, [sl]
 800f584:	2b2a      	cmp	r3, #42	; 0x2a
 800f586:	d015      	beq.n	800f5b4 <_vfiprintf_r+0x120>
 800f588:	9a07      	ldr	r2, [sp, #28]
 800f58a:	4654      	mov	r4, sl
 800f58c:	2000      	movs	r0, #0
 800f58e:	f04f 0c0a 	mov.w	ip, #10
 800f592:	4621      	mov	r1, r4
 800f594:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f598:	3b30      	subs	r3, #48	; 0x30
 800f59a:	2b09      	cmp	r3, #9
 800f59c:	d94d      	bls.n	800f63a <_vfiprintf_r+0x1a6>
 800f59e:	b1b0      	cbz	r0, 800f5ce <_vfiprintf_r+0x13a>
 800f5a0:	9207      	str	r2, [sp, #28]
 800f5a2:	e014      	b.n	800f5ce <_vfiprintf_r+0x13a>
 800f5a4:	eba0 0308 	sub.w	r3, r0, r8
 800f5a8:	fa09 f303 	lsl.w	r3, r9, r3
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	9304      	str	r3, [sp, #16]
 800f5b0:	46a2      	mov	sl, r4
 800f5b2:	e7d2      	b.n	800f55a <_vfiprintf_r+0xc6>
 800f5b4:	9b03      	ldr	r3, [sp, #12]
 800f5b6:	1d19      	adds	r1, r3, #4
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	9103      	str	r1, [sp, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	bfbb      	ittet	lt
 800f5c0:	425b      	neglt	r3, r3
 800f5c2:	f042 0202 	orrlt.w	r2, r2, #2
 800f5c6:	9307      	strge	r3, [sp, #28]
 800f5c8:	9307      	strlt	r3, [sp, #28]
 800f5ca:	bfb8      	it	lt
 800f5cc:	9204      	strlt	r2, [sp, #16]
 800f5ce:	7823      	ldrb	r3, [r4, #0]
 800f5d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f5d2:	d10c      	bne.n	800f5ee <_vfiprintf_r+0x15a>
 800f5d4:	7863      	ldrb	r3, [r4, #1]
 800f5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f5d8:	d134      	bne.n	800f644 <_vfiprintf_r+0x1b0>
 800f5da:	9b03      	ldr	r3, [sp, #12]
 800f5dc:	1d1a      	adds	r2, r3, #4
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	9203      	str	r2, [sp, #12]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	bfb8      	it	lt
 800f5e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5ea:	3402      	adds	r4, #2
 800f5ec:	9305      	str	r3, [sp, #20]
 800f5ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f6c4 <_vfiprintf_r+0x230>
 800f5f2:	7821      	ldrb	r1, [r4, #0]
 800f5f4:	2203      	movs	r2, #3
 800f5f6:	4650      	mov	r0, sl
 800f5f8:	f7f0 fdea 	bl	80001d0 <memchr>
 800f5fc:	b138      	cbz	r0, 800f60e <_vfiprintf_r+0x17a>
 800f5fe:	9b04      	ldr	r3, [sp, #16]
 800f600:	eba0 000a 	sub.w	r0, r0, sl
 800f604:	2240      	movs	r2, #64	; 0x40
 800f606:	4082      	lsls	r2, r0
 800f608:	4313      	orrs	r3, r2
 800f60a:	3401      	adds	r4, #1
 800f60c:	9304      	str	r3, [sp, #16]
 800f60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f612:	4829      	ldr	r0, [pc, #164]	; (800f6b8 <_vfiprintf_r+0x224>)
 800f614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f618:	2206      	movs	r2, #6
 800f61a:	f7f0 fdd9 	bl	80001d0 <memchr>
 800f61e:	2800      	cmp	r0, #0
 800f620:	d03f      	beq.n	800f6a2 <_vfiprintf_r+0x20e>
 800f622:	4b26      	ldr	r3, [pc, #152]	; (800f6bc <_vfiprintf_r+0x228>)
 800f624:	bb1b      	cbnz	r3, 800f66e <_vfiprintf_r+0x1da>
 800f626:	9b03      	ldr	r3, [sp, #12]
 800f628:	3307      	adds	r3, #7
 800f62a:	f023 0307 	bic.w	r3, r3, #7
 800f62e:	3308      	adds	r3, #8
 800f630:	9303      	str	r3, [sp, #12]
 800f632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f634:	443b      	add	r3, r7
 800f636:	9309      	str	r3, [sp, #36]	; 0x24
 800f638:	e768      	b.n	800f50c <_vfiprintf_r+0x78>
 800f63a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f63e:	460c      	mov	r4, r1
 800f640:	2001      	movs	r0, #1
 800f642:	e7a6      	b.n	800f592 <_vfiprintf_r+0xfe>
 800f644:	2300      	movs	r3, #0
 800f646:	3401      	adds	r4, #1
 800f648:	9305      	str	r3, [sp, #20]
 800f64a:	4619      	mov	r1, r3
 800f64c:	f04f 0c0a 	mov.w	ip, #10
 800f650:	4620      	mov	r0, r4
 800f652:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f656:	3a30      	subs	r2, #48	; 0x30
 800f658:	2a09      	cmp	r2, #9
 800f65a:	d903      	bls.n	800f664 <_vfiprintf_r+0x1d0>
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d0c6      	beq.n	800f5ee <_vfiprintf_r+0x15a>
 800f660:	9105      	str	r1, [sp, #20]
 800f662:	e7c4      	b.n	800f5ee <_vfiprintf_r+0x15a>
 800f664:	fb0c 2101 	mla	r1, ip, r1, r2
 800f668:	4604      	mov	r4, r0
 800f66a:	2301      	movs	r3, #1
 800f66c:	e7f0      	b.n	800f650 <_vfiprintf_r+0x1bc>
 800f66e:	ab03      	add	r3, sp, #12
 800f670:	9300      	str	r3, [sp, #0]
 800f672:	462a      	mov	r2, r5
 800f674:	4b12      	ldr	r3, [pc, #72]	; (800f6c0 <_vfiprintf_r+0x22c>)
 800f676:	a904      	add	r1, sp, #16
 800f678:	4630      	mov	r0, r6
 800f67a:	f7fd fa55 	bl	800cb28 <_printf_float>
 800f67e:	4607      	mov	r7, r0
 800f680:	1c78      	adds	r0, r7, #1
 800f682:	d1d6      	bne.n	800f632 <_vfiprintf_r+0x19e>
 800f684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f686:	07d9      	lsls	r1, r3, #31
 800f688:	d405      	bmi.n	800f696 <_vfiprintf_r+0x202>
 800f68a:	89ab      	ldrh	r3, [r5, #12]
 800f68c:	059a      	lsls	r2, r3, #22
 800f68e:	d402      	bmi.n	800f696 <_vfiprintf_r+0x202>
 800f690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f692:	f7fe f865 	bl	800d760 <__retarget_lock_release_recursive>
 800f696:	89ab      	ldrh	r3, [r5, #12]
 800f698:	065b      	lsls	r3, r3, #25
 800f69a:	f53f af1d 	bmi.w	800f4d8 <_vfiprintf_r+0x44>
 800f69e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6a0:	e71c      	b.n	800f4dc <_vfiprintf_r+0x48>
 800f6a2:	ab03      	add	r3, sp, #12
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	462a      	mov	r2, r5
 800f6a8:	4b05      	ldr	r3, [pc, #20]	; (800f6c0 <_vfiprintf_r+0x22c>)
 800f6aa:	a904      	add	r1, sp, #16
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	f7fd fcdf 	bl	800d070 <_printf_i>
 800f6b2:	e7e4      	b.n	800f67e <_vfiprintf_r+0x1ea>
 800f6b4:	080145bc 	.word	0x080145bc
 800f6b8:	080145c6 	.word	0x080145c6
 800f6bc:	0800cb29 	.word	0x0800cb29
 800f6c0:	0800f471 	.word	0x0800f471
 800f6c4:	080145c2 	.word	0x080145c2

0800f6c8 <__swhatbuf_r>:
 800f6c8:	b570      	push	{r4, r5, r6, lr}
 800f6ca:	460c      	mov	r4, r1
 800f6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d0:	2900      	cmp	r1, #0
 800f6d2:	b096      	sub	sp, #88	; 0x58
 800f6d4:	4615      	mov	r5, r2
 800f6d6:	461e      	mov	r6, r3
 800f6d8:	da0d      	bge.n	800f6f6 <__swhatbuf_r+0x2e>
 800f6da:	89a3      	ldrh	r3, [r4, #12]
 800f6dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f6e0:	f04f 0100 	mov.w	r1, #0
 800f6e4:	bf0c      	ite	eq
 800f6e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f6ea:	2340      	movne	r3, #64	; 0x40
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	6031      	str	r1, [r6, #0]
 800f6f0:	602b      	str	r3, [r5, #0]
 800f6f2:	b016      	add	sp, #88	; 0x58
 800f6f4:	bd70      	pop	{r4, r5, r6, pc}
 800f6f6:	466a      	mov	r2, sp
 800f6f8:	f000 f878 	bl	800f7ec <_fstat_r>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	dbec      	blt.n	800f6da <__swhatbuf_r+0x12>
 800f700:	9901      	ldr	r1, [sp, #4]
 800f702:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f706:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f70a:	4259      	negs	r1, r3
 800f70c:	4159      	adcs	r1, r3
 800f70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f712:	e7eb      	b.n	800f6ec <__swhatbuf_r+0x24>

0800f714 <__smakebuf_r>:
 800f714:	898b      	ldrh	r3, [r1, #12]
 800f716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f718:	079d      	lsls	r5, r3, #30
 800f71a:	4606      	mov	r6, r0
 800f71c:	460c      	mov	r4, r1
 800f71e:	d507      	bpl.n	800f730 <__smakebuf_r+0x1c>
 800f720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	6123      	str	r3, [r4, #16]
 800f728:	2301      	movs	r3, #1
 800f72a:	6163      	str	r3, [r4, #20]
 800f72c:	b002      	add	sp, #8
 800f72e:	bd70      	pop	{r4, r5, r6, pc}
 800f730:	ab01      	add	r3, sp, #4
 800f732:	466a      	mov	r2, sp
 800f734:	f7ff ffc8 	bl	800f6c8 <__swhatbuf_r>
 800f738:	9900      	ldr	r1, [sp, #0]
 800f73a:	4605      	mov	r5, r0
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7fe ff35 	bl	800e5ac <_malloc_r>
 800f742:	b948      	cbnz	r0, 800f758 <__smakebuf_r+0x44>
 800f744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f748:	059a      	lsls	r2, r3, #22
 800f74a:	d4ef      	bmi.n	800f72c <__smakebuf_r+0x18>
 800f74c:	f023 0303 	bic.w	r3, r3, #3
 800f750:	f043 0302 	orr.w	r3, r3, #2
 800f754:	81a3      	strh	r3, [r4, #12]
 800f756:	e7e3      	b.n	800f720 <__smakebuf_r+0xc>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	6020      	str	r0, [r4, #0]
 800f75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f760:	81a3      	strh	r3, [r4, #12]
 800f762:	9b00      	ldr	r3, [sp, #0]
 800f764:	6163      	str	r3, [r4, #20]
 800f766:	9b01      	ldr	r3, [sp, #4]
 800f768:	6120      	str	r0, [r4, #16]
 800f76a:	b15b      	cbz	r3, 800f784 <__smakebuf_r+0x70>
 800f76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f770:	4630      	mov	r0, r6
 800f772:	f000 f84d 	bl	800f810 <_isatty_r>
 800f776:	b128      	cbz	r0, 800f784 <__smakebuf_r+0x70>
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	f023 0303 	bic.w	r3, r3, #3
 800f77e:	f043 0301 	orr.w	r3, r3, #1
 800f782:	81a3      	strh	r3, [r4, #12]
 800f784:	89a3      	ldrh	r3, [r4, #12]
 800f786:	431d      	orrs	r5, r3
 800f788:	81a5      	strh	r5, [r4, #12]
 800f78a:	e7cf      	b.n	800f72c <__smakebuf_r+0x18>

0800f78c <_raise_r>:
 800f78c:	291f      	cmp	r1, #31
 800f78e:	b538      	push	{r3, r4, r5, lr}
 800f790:	4604      	mov	r4, r0
 800f792:	460d      	mov	r5, r1
 800f794:	d904      	bls.n	800f7a0 <_raise_r+0x14>
 800f796:	2316      	movs	r3, #22
 800f798:	6003      	str	r3, [r0, #0]
 800f79a:	f04f 30ff 	mov.w	r0, #4294967295
 800f79e:	bd38      	pop	{r3, r4, r5, pc}
 800f7a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f7a2:	b112      	cbz	r2, 800f7aa <_raise_r+0x1e>
 800f7a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f7a8:	b94b      	cbnz	r3, 800f7be <_raise_r+0x32>
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f000 f852 	bl	800f854 <_getpid_r>
 800f7b0:	462a      	mov	r2, r5
 800f7b2:	4601      	mov	r1, r0
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7ba:	f000 b839 	b.w	800f830 <_kill_r>
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d00a      	beq.n	800f7d8 <_raise_r+0x4c>
 800f7c2:	1c59      	adds	r1, r3, #1
 800f7c4:	d103      	bne.n	800f7ce <_raise_r+0x42>
 800f7c6:	2316      	movs	r3, #22
 800f7c8:	6003      	str	r3, [r0, #0]
 800f7ca:	2001      	movs	r0, #1
 800f7cc:	e7e7      	b.n	800f79e <_raise_r+0x12>
 800f7ce:	2400      	movs	r4, #0
 800f7d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7d4:	4628      	mov	r0, r5
 800f7d6:	4798      	blx	r3
 800f7d8:	2000      	movs	r0, #0
 800f7da:	e7e0      	b.n	800f79e <_raise_r+0x12>

0800f7dc <raise>:
 800f7dc:	4b02      	ldr	r3, [pc, #8]	; (800f7e8 <raise+0xc>)
 800f7de:	4601      	mov	r1, r0
 800f7e0:	6818      	ldr	r0, [r3, #0]
 800f7e2:	f7ff bfd3 	b.w	800f78c <_raise_r>
 800f7e6:	bf00      	nop
 800f7e8:	20000600 	.word	0x20000600

0800f7ec <_fstat_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d07      	ldr	r5, [pc, #28]	; (800f80c <_fstat_r+0x20>)
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	4608      	mov	r0, r1
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	602b      	str	r3, [r5, #0]
 800f7fa:	f7f4 fb0c 	bl	8003e16 <_fstat>
 800f7fe:	1c43      	adds	r3, r0, #1
 800f800:	d102      	bne.n	800f808 <_fstat_r+0x1c>
 800f802:	682b      	ldr	r3, [r5, #0]
 800f804:	b103      	cbz	r3, 800f808 <_fstat_r+0x1c>
 800f806:	6023      	str	r3, [r4, #0]
 800f808:	bd38      	pop	{r3, r4, r5, pc}
 800f80a:	bf00      	nop
 800f80c:	20011b34 	.word	0x20011b34

0800f810 <_isatty_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d06      	ldr	r5, [pc, #24]	; (800f82c <_isatty_r+0x1c>)
 800f814:	2300      	movs	r3, #0
 800f816:	4604      	mov	r4, r0
 800f818:	4608      	mov	r0, r1
 800f81a:	602b      	str	r3, [r5, #0]
 800f81c:	f7f4 fb0b 	bl	8003e36 <_isatty>
 800f820:	1c43      	adds	r3, r0, #1
 800f822:	d102      	bne.n	800f82a <_isatty_r+0x1a>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	b103      	cbz	r3, 800f82a <_isatty_r+0x1a>
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	bd38      	pop	{r3, r4, r5, pc}
 800f82c:	20011b34 	.word	0x20011b34

0800f830 <_kill_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4d07      	ldr	r5, [pc, #28]	; (800f850 <_kill_r+0x20>)
 800f834:	2300      	movs	r3, #0
 800f836:	4604      	mov	r4, r0
 800f838:	4608      	mov	r0, r1
 800f83a:	4611      	mov	r1, r2
 800f83c:	602b      	str	r3, [r5, #0]
 800f83e:	f7f4 fa8b 	bl	8003d58 <_kill>
 800f842:	1c43      	adds	r3, r0, #1
 800f844:	d102      	bne.n	800f84c <_kill_r+0x1c>
 800f846:	682b      	ldr	r3, [r5, #0]
 800f848:	b103      	cbz	r3, 800f84c <_kill_r+0x1c>
 800f84a:	6023      	str	r3, [r4, #0]
 800f84c:	bd38      	pop	{r3, r4, r5, pc}
 800f84e:	bf00      	nop
 800f850:	20011b34 	.word	0x20011b34

0800f854 <_getpid_r>:
 800f854:	f7f4 ba78 	b.w	8003d48 <_getpid>

0800f858 <_malloc_usable_size_r>:
 800f858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f85c:	1f18      	subs	r0, r3, #4
 800f85e:	2b00      	cmp	r3, #0
 800f860:	bfbc      	itt	lt
 800f862:	580b      	ldrlt	r3, [r1, r0]
 800f864:	18c0      	addlt	r0, r0, r3
 800f866:	4770      	bx	lr

0800f868 <_init>:
 800f868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f86a:	bf00      	nop
 800f86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f86e:	bc08      	pop	{r3}
 800f870:	469e      	mov	lr, r3
 800f872:	4770      	bx	lr

0800f874 <_fini>:
 800f874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f876:	bf00      	nop
 800f878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f87a:	bc08      	pop	{r3}
 800f87c:	469e      	mov	lr, r3
 800f87e:	4770      	bx	lr
